let parse_pattern _ _ str =
  let any_cst = Parse_php.any_of_string str in
  let any = Ast_php_build.any any_cst in
  Php_to_generic.any any

let parse_target _ file =
  Pfff_or_tree_sitter.run file
    [
      Pfff
        (fun file ->
          (* TODO: at some point parser_php.mly should go directly
           * to ast_php.ml and we should get rid of cst_php.ml
           *)
          let cst, stat =
            Pfff_or_tree_sitter.throw_tokens Parse_php.parse file
          in
          (Ast_php_build.program cst, stat));
      (* TODO: can't put TreeSitter first, because we still use Pfff
       * to parse the pattern, and there must be mismatch between the
       * AST generated by Ast_php_build and Parse_php_tree_sitter.parse.
       *)
      TreeSitter Parse_php_tree_sitter.parse;
    ]
    Php_to_generic.program

let _ =
  Common.jsoo := true;
  Tree_sitter_run.Util_file.jsoo := true;
  Semgrep_js_shared.make_js_module [ Lang.Php ] parse_target parse_pattern
