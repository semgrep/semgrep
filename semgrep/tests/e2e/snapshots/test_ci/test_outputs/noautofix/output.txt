Running `semgrep ci` without API token but with configs ('p/something',)
Scan environment:
  versions    - semgrep <sanitized semgrep_version> on python <sanitized_version>
  environment - running in environment git, triggering event is unknown

Fetching configuration from semgrep.dev
Fetching rules from https://semgrep.dev/registry.
Scanning 1 file with 4 python rules.
{"errors": [], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["foo.py"]}, "results": [{"check_id": "eqeq-bad", "end": {"col": 11, "line": 4, "offset": 43}, "extra": {"fingerprint": "8c695a6a4ab5ffff33d0103309a310c1", "is_ignored": false, "lines": "    a == a", "message": "useless comparison", "metadata": {}, "metavars": {"$X": {"abstract_content": "a", "end": {"col": 6, "line": 4, "offset": 38}, "start": {"col": 5, "line": 4, "offset": 37}, "unique_id": {"md5sum": "abcc65172ec3009031d2a263d2d99002", "type": "AST"}}}, "severity": "ERROR"}, "path": "foo.py", "start": {"col": 5, "line": 4, "offset": 37}}, {"check_id": "eqeq-bad", "end": {"col": 11, "line": 5, "offset": 54}, "extra": {"fingerprint": "8abb389b2f01d0e52d663251e1d24ba7", "is_ignored": false, "lines": "    a == a", "message": "useless comparison", "metadata": {}, "metavars": {"$X": {"abstract_content": "a", "end": {"col": 6, "line": 5, "offset": 49}, "start": {"col": 5, "line": 5, "offset": 48}, "unique_id": {"md5sum": "c46fd68c38c3dd92cbfbc516c83e6aac", "type": "AST"}}}, "severity": "ERROR"}, "path": "foo.py", "start": {"col": 5, "line": 5, "offset": 48}}, {"check_id": "eqeq-bad", "end": {"col": 11, "line": 7, "offset": 85}, "extra": {"fingerprint": "f6c666e6921a44028a2015d0de15cc14", "is_ignored": false, "lines": "    a == a", "message": "useless comparison", "metadata": {}, "metavars": {"$X": {"abstract_content": "a", "end": {"col": 6, "line": 7, "offset": 80}, "start": {"col": 5, "line": 7, "offset": 79}, "unique_id": {"md5sum": "4703e843046f46d9f0e8954ed1579277", "type": "AST"}}}, "severity": "ERROR"}, "path": "foo.py", "start": {"col": 5, "line": 7, "offset": 79}}, {"check_id": "eqeq-bad", "end": {"col": 11, "line": 11, "offset": 118}, "extra": {"fingerprint": "d44049421636e370e7906a6bed5fce54", "is_ignored": false, "lines": "    y == y", "message": "useless comparison", "metadata": {}, "metavars": {"$X": {"abstract_content": "y", "end": {"col": 6, "line": 11, "offset": 113}, "start": {"col": 5, "line": 11, "offset": 112}, "unique_id": {"md5sum": "ac6b14813f9fb74aba4e7dcb2204f0aa", "type": "AST"}}}, "severity": "ERROR"}, "path": "foo.py", "start": {"col": 5, "line": 11, "offset": 112}}, {"check_id": "eqeq-four", "end": {"col": 13, "line": 19, "offset": 207}, "extra": {"fingerprint": "87cd1247dfc84bbd502c872035c71a63", "is_ignored": false, "lines": "    baz == 4", "message": "useless comparison to 4", "metadata": {"dev.semgrep.actions": ["block"]}, "metavars": {"$X": {"abstract_content": "baz", "end": {"col": 8, "line": 19, "offset": 202}, "start": {"col": 5, "line": 19, "offset": 199}, "unique_id": {"md5sum": "72dc1fb3d14226fa3ea6f9138244d6e1", "type": "AST"}}}, "severity": "ERROR"}, "path": "foo.py", "start": {"col": 5, "line": 19, "offset": 199}}, {"check_id": "eqeq-five", "end": {"col": 11, "line": 15, "offset": 151}, "extra": {"fingerprint": "8646a2dfc020913606969dcfe84e53c0", "fix": "x == 2", "is_ignored": false, "lines": "    x == 5", "message": "useless comparison to 5", "metadata": {"dev.semgrep.actions": []}, "metavars": {"$X": {"abstract_content": "x", "end": {"col": 6, "line": 15, "offset": 146}, "start": {"col": 5, "line": 15, "offset": 145}, "unique_id": {"md5sum": "682176f3be362251dafd208679741559", "type": "AST"}}}, "severity": "ERROR"}, "path": "foo.py", "start": {"col": 5, "line": 15, "offset": 145}}], "version": "<sanitized semgrep_version>"}

Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

Ran 4 rules on 1 file: 6 findings.
Ran 2 blocking rules, 1 audit rules, and 1 internal rules used for rule recommendations.
Found 5 findings from blocking rules and 1 findings from non-blocking rules
Has findings for blocking rules so exiting with code 1
