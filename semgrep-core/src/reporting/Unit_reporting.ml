open Common
open Testutil
module Out = Output_from_core_j

(*****************************************************************************)
(* Purpose *)
(*****************************************************************************)
(* Unit (and integration) tests exercising the semgrep-core output format.
 *
 * This module also exercises the semgrep CLI output! (this could be moved
 * in tests/e2e/ at some point
 *)

(*****************************************************************************)
(* Constants *)
(*****************************************************************************)

(* ran from _build/default/tests/ hence the '..'s below *)
let tests_path = "../../../tests"
let e2e_path = "../../../../semgrep/tests/e2e/snapshots/"

(*****************************************************************************)
(* Semgrep-core output *)
(*****************************************************************************)

let semgrep_core_output =
  pack_tests "semgrep core JSON output"
    (let dir = Filename.concat tests_path "OTHER/core_output" in
     (* Some of those JSON were generated by calling semgrep-core as in
      * semgrep-core -l py -e 'foo($X)' tests/python/ tests/OTHER/parsing_errors/ -json
      *)
     let files = Common2.glob (spf "%s/*.json" dir) in
     files
     |> Common.map (fun file ->
            ( file,
              fun () ->
                let s = Common.read_file file in
                let _res = Out.match_results_of_string s in
                () )))

(*****************************************************************************)
(* Semgrep CLI output *)
(*****************************************************************************)

let semgrep_cli_output =
  pack_tests "semgrep CLI JSON output"
    (let dir = Filename.concat tests_path "OTHER/cli_output" in
     (* Some of those JSON were generated by calling semgrep as in
      * semgrep -l py -e 'foo($X)' /tmp/dir1 where dir1 contained
      * a simple foo.py and bad.py files
      *)
     let files =
       Common2.glob (spf "%s/*.json" dir)
       @ (Common.files_of_dir_or_files_no_vcs_nofilter "json" [ e2e_path ]
         |> Common.exclude (fun file ->
                (* just toplevel 'scanned:' and 'skipped:', no match 'results:' *)
                file =~ ".*test_semgrepignore_ignore_log_json_report"
                (* empty JSON (because of timeout probably) *)
                || file =~ ".*/test_spacegrep_timeout/"
                (* weird JSON, results but not match results *)
                || file =~ ".*/test_cli_test/"
                (* missing offset *)
                || file =~ ".*/test_max_target_bytes/"
                || file =~ ".*/test_equivalence/"
                (* missing offset and extra debug: field *)
                || file =~ ".*/test_debugging_json/"
                (* different API *)
                || file =~ ".*/test_dump_ast/"
                (* different JSON, for findings API *)
                || file =~ ".*/test_ci/"
                (* too long filename exn in alcotest, and no fingerprint *)
                || file =~ ".*/test_join_rules/"
                (* no fingerprint *)
                || file =~ ".*/test_subshell_input"
                || file =~ ".*/test_multi_subshell_input"
                || file =~ ".*/test_stdin_input"
                || file =~ ".*/test_file_not_relative_to_base_path/"
                || false))
     in
     files
     |> Common.map (fun file ->
            ( file,
              fun () ->
                pr2 (spf "processing %s" file);
                let s = Common.read_file file in
                let _res = Out.final_result_of_string s in
                () )))

(*****************************************************************************)
(* All tests *)
(*****************************************************************************)

let tests = List.flatten [ semgrep_core_output; semgrep_cli_output ]
