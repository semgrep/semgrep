-*- org -*-

Have C-c C-t working to get type information under cursor! It's really useful.

* Code organization

Prefer simple Makefiles to ocamlbuild.

Avoid very generic filenames like server.ml. It makes it hard
(without -pack) to include your code with other projects
as you may have linking issues. Also it is annoying
for ocaml tools like stags, codemap, codegraph, etc.

* Style

** bad example of style

main problems:
- huge .ml files
- no .mli, and usually less types for concepts
- no comment on general idea of the algorithm or module
- no comment especially when the function is tricky and does complex
  side effects
- no comment at all
- no unit tests, no tests, no examples
- put too many things in one file, e.g. ast.ml should just contain
  the definition of the AST, not thousands of helpers and visitors.
- use of many globals

less:
- put old code in comment to test stuff, or some && false for
  debugging instead of using command line flags like -verbose
- many dead functions


** bad example of style: ocamlnet/netstring/nethtml.ml.

bad nested functions,

bad indentation, too many newlines

bad use of open variants

overuse of intermediate functions like extract

old: nested func
  let model_of element_name =
    if element_name = "" then
      (`Everywhere, `Any)
    else
      let extract =
	function
	    (eclass, `Sub_exclusions(_,m)) -> eclass, m
	  | m -> m
      in
      try
	extract(Hashtbl.find dtd_hash element_name)
      with
	  Not_found -> (`Everywhere, `Any)
  in

better:
let model_of ~dtd_hash element_name =
  if element_name = ""
  then (Everywhere, Any)
  else
    try
      (match Hashtbl.find dtd_hash element_name with
      | (eclass, Sub_exclusions(_,m)) -> eclass, m
      | m -> m
      )
    with Not_found -> (Everywhere, Any)

** bad example of style: ccss/

bad use of open variants instead of plain variants

use of _t to suffix type definition (no need, different namespace)

unindented mutually recursive types. When have lots of type definitions,
 as it's the case usually with AST of languages, indent the types
 to convey grouping information.

use more than 80 columns!

don't use TABS, use space, and indent 2 space, not 4 (and especially not 8!)

* Style

*** prefer 'match () with | _ ... when ->' over nested elsif

if X1 then ...
else if X2 then ...
else if X3
==>
match () with
 | _ when X1 ->
 | _ when X2 ->
 | _ when X3 ->

*** use regexps, not complex String.sub/String.length expressions

*** do not use the same variable name if it has a different types
It's ok to do:
 let heap = foo heap in
 let heap = bar heap in
 ...
when you "thread" the same thing again and again.

But don't do:
 let x = int_expr() in
 let x = float_expr x in

*** don't use the same abbreviation for very different things
for instance if use 'm' to stand for members, then don't use
it elsewhere to mean a method_def

*** use label arguments when passing bool
foo x a true c
==>
foo x a is_static:true c

*** indent the code ...
dont do:

 ...
 if ... then ... else
 ...


*** use Common.profile_code(), not printf and manual Sys.time()
