(*
   Untranslated CST allowing mixing with an AST.
*)

(*
   A concrete syntax subtree that was not fully translated yet.
   We get this representation automatically from ocaml-tree-sitter.
   This type is normally translated one-to-one from the Raw_tree.t
   type provided by the ocaml-tree-sitter runtime library.
*)
type ('tok, 'any) t =
  (* keyword, identifier, punctuation, int literal, ... *)
  | Token of 'tok
  (* sequence of variable length [repeat] *)
  | List of ('tok, 'any) t list
  (* sequence of fixed length (wrt type) [seq] *)
  | Tuple of ('tok, 'any) t list
  (* tagged value = variant [choice] *)
  | Case of string * ('tok, 'any) t
  (* optional value [optional] *)
  | Option of ('tok, 'any) t option
  (* return to the normal generic AST *)
  | Any of 'any
[@@deriving show { with_path = false }, eq, hash]

(*
   Return the first and the last token of the tree, if any.

   Note that it might be more efficient if the raw tree stored this
   location at each node but this would require changing the OCaml
   types generated by ocaml-tree-sitter (CST.ml files).
*)
val loc : ('tok, _) t -> ('tok * 'tok) option

(* Same as loc but return fake tokens in case the tree is empty *)
val unsafe_loc : (Parse_info.t, _) t -> Parse_info.t * Parse_info.t

(* Extract all the Any nodes, in left-to-right order.
   (without descending recursively into these nodes)
*)
val anys : (_, 'any) t -> 'any list
