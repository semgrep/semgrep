(* Yoann Padioleau
 *
 * Copyright (C) 2019-2021 r2c
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 *)

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* Semgrep engine configuration.
 *
 * The goal of this module is to gather in one place all the possible
 * ways to configure the semgrep matching engine. We now let
 * the user enable/disable certain features on a per-rule (could do even
 * per-pattern basis?). For example, constant propagation may be too powerful
 * sometimes and prevent people to find certain code.
 *
 * Note that each feature in this file will change the matching results;
 * for non-functinal settings such as optimizations (e.g., using a
 * cache) use instead Flag_semgrep.ml
 *)

(*****************************************************************************)
(* Types *)
(*****************************************************************************)

(* !!Do not rename the fields because they can be referenced in rules!! *)
type t = {
  ~constant_propagation <ocaml default="true"> : bool;
  (* requires constant_propagation to have effect *)
  ~symbolic_propagation <ocaml default="false"> : bool;
  (* associative-commutative matching *)
  ~ac_matching <ocaml default="true"> : bool;
  (* pretend && and || are commutative *)
  (* THINK: Should we merge ac_matching and commutative_boolop into a single setting? *)
  ~commutative_boolop <ocaml default="false"> : bool;

  (* assign-patterns (e.g. `$X = $E`) will match var-defs (e.g. `var x = 1;`) *)
  ~vardef_assign <ocaml default="true"> : bool;
  (* assign-patterns (e.g. `$X = function() { ... }`) will match fld-defs
   * (e.g. `class Foo {  x = function() { return; } }`).
   *)
  ~flddef_assign <ocaml default="false"> : bool;
  (* expression patterns (e.g. `f($X)`) will match attributes (e.g. `@f(a)`)  *)
  ~attr_expr <ocaml default="true"> : bool;

  (* treat arrows (a.k.a short lambdas) like other functions *)
  ~arrow_is_function <ocaml default="true">: bool;
  (* treat let/const as equivalent to var (JS-specific) *)
  ~let_is_var <ocaml default="true">: bool;

  (* !experimental: a bit hacky, and may introduce big perf regressions! *)
  (* should be used with DeepEllipsis; do it implicitely has issues *)
  ~go_deeper_expr <ocaml default="true"> : bool;
  (* this ultimately should go away once '...' works on the CFG *)
  ~go_deeper_stmt <ocaml default="true"> : bool;

  (* implicitly assume ellipsis in record patterns *)
  (* TODO: eventually the default should be 'false'. *)
  ~implicit_ellipsis <ocaml default="true"> : bool;

  (* TODO: equivalences:
   *   - require_to_import (but need pass config to Js_to_generic)
   *)
}
