(library
 (public_name semgrep_core)
 (wrapped false)
 (libraries
   str
   yaml
   atdgen-runtime

   commons
   pfff-h_program-lang
   pfff-lang_GENERIC_base
   pfff-lang_js ; TODO remove this, ugly dependency to Ast_js.default_entity in Pattern.ml
   ;note: we should not depend on pfff-lang_GENERIC-analyze in core
   ;note: we should also not depend on any other semgrep libs (except utils)
   semgrep_utils

   spacegrep ; Rule.ml references Spacegrep.Pattern_AST.t
 )
 (preprocess
   (pps
     ppx_profiling
     ppx_deriving.show
     ppx_deriving.eq
     ppx_hash
   )
 )
)

;TODO: factorize this
(rule
 (targets Config_semgrep_j.ml Config_semgrep_j.mli)
 (deps    Config_semgrep.atd)
 (action  (run atdgen -j -j-strict-fields -j-std %{deps})))

(rule
 (targets Config_semgrep_t.ml Config_semgrep_t.mli)
 (deps    Config_semgrep.atd)
 (action  (run atdgen -t %{deps})))

;(rule
; (targets Output_from_core_j.ml Output_from_core_j.mli)
; (deps    Output_from_core.atd)
; (action  (run atdgen -j -j-std %{deps})))
;
;(rule
; (targets Output_from_core_t.ml Output_from_core_t.mli)
; (deps    Output_from_core.atd)
; (action  (run atdgen -t %{deps})))

(rule
 (targets Input_to_core_j.ml Input_to_core_j.mli)
 (deps    Input_to_core.atd)
 (action  (run atdgen -j -j-std %{deps})))

(rule
 (targets Input_to_core_t.ml Input_to_core_t.mli)
 (deps    Input_to_core.atd)
 (action  (run atdgen -t %{deps})))

; this is just used in Unit_reporting.ml
(rule
 (targets semgrep_output_v0_j.ml semgrep_output_v0_j.mli)
 (deps    semgrep_output_v0.atd)
 (action  (run atdgen -j -j-std %{deps})))
(rule
 (targets semgrep_output_v0_t.ml semgrep_output_v0_t.mli)
 (deps    semgrep_output_v0.atd)
 (action  (run atdgen -t %{deps})))
