(executables
 (names Main)
 (libraries
    str
    dyp
    parmap
    ppx_deriving.runtime
    uucp uutf

    ; pfff deps
    commons commons_core commons_ocollection
    pfff-config
    pfff-h_program-lang
    pfff-lang_python pfff-lang_python-analyze
    pfff-lang_js pfff-lang_js-analyze
    pfff-lang_json
    pfff-lang_cpp pfff-lang_cpp-analyze
    pfff-lang_c pfff-lang_c-analyze
    pfff-lang_ml pfff-lang_ml-analyze
    pfff-lang_java pfff-lang_java-analyze
    pfff-lang_go pfff-lang_go-analyze
    pfff-lang_ruby pfff-lang_ruby-analyze
    pfff-lang_php
    pfff-lang_lisp
    pfff-lang_skip

    ; tree-sitter deps
    tree-sitter-lang.ruby
    tree-sitter-lang.java

    ; we now also depends on spacegrep with full-rule-in-ocaml
    spacegrep

    ; internal deps
    semgrep_core
    semgrep_metachecking
    semgrep_parsing
    semgrep_matching
    semgrep_analyzing
    semgrep_reporting
    semgrep_synthesizing
    semgrep_engine
    semgrep_testing
    semgrep_api
 )
 (preprocess (pps ppx_profiling))
 ; for ocamldebug
 (modes native byte)
 (flags (:include flags.sexp))
)


; use cli/flags.sh to generate the OS specific build flags
(rule
 (targets flags.sexp)
 (action (run %{workspace_root}/src/cli/flags.sh)))


(install
 (package semgrep)
 (section bin)
 (files (Main.exe as semgrep-core))
)
