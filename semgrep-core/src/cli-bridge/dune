; Semgrep as a shared library.
(executables
  (names semgrep_bridge_core)
  (libraries
     cli_lib
  )
  (foreign_stubs
    (language c)
    (include_dirs
      %{ocaml_where}
    )
    (names
      bridge_ml
    )
  )

  ; Generate a .so file.
  ;
  ; Unfortunately, ocamldebug cannot be used on a .so file even if it
  ; contains bytecode (which is possible with direct ocamlopt
  ; invocations, but not from dune), so there is no point in trying to
  ; generate bytecode for this target.
  (modes (native shared_object))

  ; Only build this if semgrep-core is built with dynamic linking, as
  ; otherwise the platform doesn't support shared libraries.
  ;
  ; Oof.  Dune does not allow 'read' to be used in an 'enabled_if'
  ; expression.
  ;(enabled_if
  ;  (= %{read:../cli/flags.sexp} "( :standard )\n")
  ;)
  ;
  ; This also does not work:
  ;(enabled_if %{ocaml-config:supports_shared_libraries})
)


; Write the output of "python3-config --cflags" to a file.  The result
; has one switch per line for use with %{read-lines:...}.
(rule
  (target python3-config-cflags.txt)
  (action
    (with-stdout-to %{target}
      (progn
        ; Split into separate lines (using "fmt -1", which I hope is
        ; sufficiently portable), and remove -O3 and -DNDEBUG since they
        ; make debugging more difficult (and execution speed within the
        ; C code of the bridge should be inconsequential).
        (bash "python3-config --cflags | fmt -1 | grep -E -v -- '-O3|-DNDEBUG'")

        ; Add flags that are needed to make objects compatible with
        ; Python modules, but for some reason are not in --cflags.
        (echo "-pthread\n-fPIC\n")
      )
    )
  )
)


; semgrep_bridge_python.so contains the Python bindings.  It is meant to
; be directly invoked from the Python CLI wrapper, cli.py.
(rule
  (target semgrep_bridge_python.so)
  (deps
    bridge_py.c
    semgrep_bridge_core.so
  )
  (action
    ; "$ORIGIN" is a special rpath that means to load from the directory
    ; where the referring object was loaded from.
    (run %{cc} -shared -o %{target} %{deps} -Wl,-rpath=$ORIGIN
           %{read-lines:python3-config-cflags.txt})
  )
)


; Install the shared objects alongside the semgrep-core executable.
(install
  (package semgrep)
  (section bin)
  (files
    semgrep_bridge_core.so
    semgrep_bridge_python.so
  )
)
