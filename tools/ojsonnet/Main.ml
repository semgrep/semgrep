(* Yoann Padioleau
 *
 * Copyright (C) 2023 Semgrep Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * LICENSE for more details.
 *)
open Common
module Arg = Cmdliner.Arg
module Cmd = Cmdliner.Cmd
module Term = Cmdliner.Term

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* Jsonnet interpreter written in OCaml.
 *
 * For more information see libs/ojsonnet/
 *)

(*****************************************************************************)
(* Types *)
(*****************************************************************************)

type conf = { target : Fpath.t; common : CLI_common.conf } [@@deriving show]

(*****************************************************************************)
(* CLI flags *)
(*****************************************************************************)
let o_target : string Term.t =
  let info = Arg.info [] ~docv:"TARGET" ~doc:"File to interpret" in
  Arg.value (Arg.pos 0 Arg.string "default.jsonnet" info)

(* this used to be autogenerated by ppx_deriving_cmdliner *)
let term : conf Term.t =
  let combine common target = { common; target = Fpath.v target } in
  Term.(const combine $ CLI_common.o_common $ o_target)

(*****************************************************************************)
(* Entry point *)
(*****************************************************************************)

let interpret file =
  let ast = Parse_jsonnet.parse_program file in
  let core = Desugar_jsonnet.desugar_program file ast in
  let value_ = Eval_jsonnet_subst.eval_expr core in
  let json = Eval_jsonnet_subst.manifest_value value_ in
  let str = JSON.string_of_json json in
  pr str

let run (conf : conf) =
  CLI_common.setup_logging ~force_color:true ~level:conf.common.logging_level;
  Logs.debug (fun m -> m "conf = %s" (show_conf conf));
  interpret conf.target

(*****************************************************************************)
(* Cmdliner boilerplate *)
(*****************************************************************************)

let main () =
  let info = Cmd.info Sys.argv.(0) in
  let term = Term.(const run $ term) in
  let cmd = Cmd.v info term in
  exit (Cmd.eval cmd)

let () = main ()
