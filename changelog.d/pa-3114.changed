[Breaking Change] Improved Matching of C++ Constructors

In this update, we've enhanced Semgrep's ability to match C++ constructors more
accurately. C++ introduces a syntactic ambiguity between function and variable
definitions, particularly with constructors. The C++ compiler determines how to
interpret an expression based on contextual information, such as whether the
immediate parent scope is a function or a class, and whether the identifiers
within the parentheses represent variables or types. Due to this complexity,
static analyzers face challenges in precisely parsing these expressions without
additional information.

This commit introduces several workarounds to provide a better solution for
handling this ambiguity:

- By default, when parsing a target file, Semgrep will consider an expression
  like `foo bar(x, y, z);` defined within the body of a function as a variable
  definition with a constructor. This is because variable initialization is a
  more common use case within the body of a function.

- Users can specify rule options that annotate, in patterns where the
  expression can be interpreted in both ways, which interpretation should take
  precedence.  For instance, `foo bar(x, y, z);` will be parsed as a function
  definition when the `as_fundef` option is used and as a variable definition
  with a constructor when the `as_vardef_with_ctor` option is applied. It's
  worth noting that an expression like `foo bar(1, y, z);` will be parsed as a
  variable definition without any additional annotation since `1` cannot be a
  type.

Here's an example rule and its corresponding target file to illustrate these
changes,

```
rules:
  - id: cpp-match-func-def
    message: Semgrep found a match
    options:
      cpp_parsing_pref: as_fundef
    languages:
      - cpp
    severity: WARNING
    pattern-either:
      - pattern: foo $X($Y);
      - pattern: foo $X($Y, $Z);

  - id: cpp-match-ctor
    message: Semgrep found a match
    options:
      cpp_parsing_pref: as_vardef_with_ctor
    languages:
      - cpp
    severity: WARNING
    patterns:
      - pattern: foo $X(...);
      - pattern-not: foo $X(3, ...);

  - id: cpp-match-ctor-3
    message: Semgrep found a match
    languages:
      - cpp
    severity: WARNING
    pattern: foo $X(3, ...);
```

```
class Test {

  // ruleid: cpp-match-func-def
  foo bar(x);
  // ruleid: cpp-match-func-def
  foo bar(x, y);

  void test() {
    // ruleid: cpp-match-ctor
    foo bar(1);
    // ruleid: cpp-match-ctor
    foo bar(1, 2);

    // ruleid: cpp-match-ctor
    foo bar(x);
    // ruleid: cpp-match-ctor
    foo bar(x, y);

    // ruleid: cpp-match-ctor
    foo bar(x, 2);
    // ruleid: cpp-match-ctor
    foo bar(1, y);

    // ruleid: cpp-match-ctor-3
    foo bar(3);
    // ruleid: cpp-match-ctor-3
    foo bar(3, 4);
    // ruleid: cpp-match-ctor-3
    foo bar(3, y);
  }
};
```
