The taint analysis can now track method invocations on variables of an
interface type, when there is a single implementation. For example, the tainted
input vulnerability can now be detected in the following code:

```java
public interface MovieService {
  String vulnerableInjection(String input);
}

@Service
public class MovieServiceImpl implements MovieService {
  @Override
  public String vulnerableInjection(String input) {
    return sink(input);
  }
}

@RestController("/")
public class SpringController {

  @Autowired
  private MovieService movieService;

  @GetMapping("/pwn")
  public String pwnTest(@RequestParam("input") String taintedInput) {
    return movieService.vulnerableInjection(taintedInput);
  }
}
```

When there are multiple implementations, the taint analysis will not follow any
of them. We will add handling of cases with multiple implementations in
upcoming updates.
