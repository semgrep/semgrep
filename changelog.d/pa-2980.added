taint-mode: The `by-side-effect` option for taint sources (only) now accepts a
third value `only` (besides `true` and `false`). Setting `by-side-effect: only`
will define a taint source that *only* propagates by side effect. This option
should allow (ab)using taint-mode for writing some typestate rules.

For example, this taint rule:

```yaml
pattern-sources:
  - by-side-effect: only
    patterns:
    - pattern: lock($L)
    - focus-metavariable: $L
pattern-sanitizers:
  - by-side-effect: true
    patterns:
    - pattern: unlock($L)
    - focus-metavariable: $L
pattern-sinks:
  - pattern: lock($L)
```

will match the second `lock(x)` in this code:

```python
lock(x) # no finding
lock(x) # finding
```

The first `lock(x)` will not result in any finding, because the occurrence of `x` in
itself will not be tainted. Only after the function call we will record that `x` is
tainted (as a side-effect of `lock`). The second `lock(x)` will result in a finding
because the `x` has been tainted by the previous `lock(x)`.
