=== command
CI="true" GITLAB_CI="true" CI_PROJECT_PATH="project_name/project_name" CI_PIPELINE_SOURCE="push" CI_JOB_TOKEN="some-token-test-placeholder" CI_COMMIT_REF_NAME="some/branch-name" CI_COMMIT_SHA="<MASKED>" CI_PROJECT_URL="https://example.com/gitlab-org/gitlab-foss" CI_JOB_URL="https://gitlab.com/gitlab-examples/ci-debug-trace/-/jobs/379424655" SEMGREP_APP_TOKEN="fake-key-from-tests" SEMGREP_USER_AGENT_APPEND="pytest" SEMGREP_SETTINGS_FILE="<MASKED>" SEMGREP_VERSION_CACHE_PATH="<MASKED>" SEMGREP_ENABLE_VERSION_CHECK="0" SEMGREP_SEND_METRICS="off" semgrep ci --no-suppress-errors
=== end of command

=== exit code
1
=== end of exit code

=== stdout - plain


┌──────────────────────────┐
│ 6 Blocking Code Findings │
└──────────────────────────┘

    foo.py
   ❯❯❱ eqeq-bad
          useless comparison

            4┆ a == a
            ⋮┆----------------------------------------
            5┆ a == a
            ⋮┆----------------------------------------
            7┆ a == a
            ⋮┆----------------------------------------
           11┆ y == y

   ❯❯❱ eqeq-four
          useless comparison to 4

           19┆ baz == 4

    ❯❱ taint-test
          unsafe use of danger

           27┆ sink(d2)


          Taint comes from:

           26┆ d2 = danger


          Taint flows through these intermediate variables:

           26┆ d2 = danger


                This is how taint reaches the sink:

           27┆ sink(d2)



┌──────────────────────────────────┐
│ 1 Reachable Supply Chain Finding │
└──────────────────────────────────┘

    poetry.lock
   ❯❯❱ supply-chain1
          found a dependency

            2┆ name = "badlib"


┌─────────────────────────────┐
│ 1 Non-blocking Code Finding │
└─────────────────────────────┘

    foo.py
   ❯❯❱ eqeq-five
          useless comparison to 5

           ▶▶┆ Autofix ▶ (x == 2)
           15┆ x == 5

  BLOCKING CODE RULES FIRED:
    eqeq-bad
    eqeq-four
    taint-test


=== end of stdout - plain

=== stderr - plain


┌────────────────┐
│ Debugging Info │
└────────────────┘

  SCAN ENVIRONMENT
  versions    - semgrep <MASKED> on python <MASKED>
  environment - running in environment gitlab-ci, triggering event is push

  CONNECTION
  Initializing scan (deployment=org_name, scan_id=12345)
  Enabled products: Code, Supply Chain

  ENGINE
  Using Semgrep Pro Version: <MASKED>
  Installed at <MASKED>


┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 4 files tracked by git with 4 Code rules, 3 Supply Chain rules:


  CODE RULES
  Scanning 1 file with 4 python rules.

  SUPPLY CHAIN RULES
  Scanning 1 file.


┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

CI scan completed successfully.
  Found 8 findings (6 blocking) from 7 rules.
  Uploading scan results
  Finalizing scan           View results in Semgrep Cloud Platform:
    https://semgrep.dev/orgs/org_name/findings?repo=project_name/project_name&ref=some/branch-name
    https://semgrep.dev/orgs/org_name/supply-chain
  Has findings for blocking rules so exiting with code 1
  semgrep.dev is suggesting a non-zero exit code (Test Reason)

=== end of stderr - plain

=== stdout - color
<same as above: stdout - plain>
=== end of stdout - color

=== stderr - color
<same as above: stderr - plain>
=== end of stderr - color