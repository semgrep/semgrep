{
  "errors": [
    {
      "code": 2,
      "level": "warn",
      "message": "Internal matching error when running rules.metavariable-pattern.yaml.github-actions.security.curl-eval.curl-eval on targets/metavariable-pattern/test1.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/returntocorp/semgrep\n\nrule rules.metavariable-pattern.yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: if ${{ steps.pss.outcome=='failure' }}; then FAILED=pss; fi\nif ${{ steps.soc.outcome=='failure' }}; then FAILED=soc; fi\nif ${{ steps.pushsync-chunks-1.outcome=='failure' }}; then FAILED=pushsync-chunks-1; fi\nif ${{ steps.pushsync-chunks-2.outcome=='failure' }}; then FAILED=pushsync-chunks-2; fi\nif ${{ steps.retrieval.outcome=='failure' }}; then FAILED=retrieval; fi\nif ${{ steps.manifest.outcome=='failure' }}; then FAILED=manifest; fi\nif ${{ steps.content-availability.outcome=='failure' }}; then FAILED=content-availability; fi\ncurl -sSf -X POST -H \"Content-Type: application/json\" -d \"{\\\"text\\\": \\\"**${RUN_TYPE}** Test Error\\nBranch: \\`${{ github.head_ref }}\\`\\nUser: @${{ github.event.pull_request.user.login }}\\nDebugging artifacts: [click](https://$BUCKET_NAME.$AWS_ENDPOINT/artifacts_$VERTAG.tar.gz)\\nStep failed: \\`${FAILED}\\`\\\"}\" https://foobar.test.org/hooks/${{ secrets.TUNSHELL_KEY }}\n",
      "path": "targets/metavariable-pattern/test1.yml",
      "rule_id": "rules.metavariable-pattern.yaml.github-actions.security.curl-eval.curl-eval",
      "type": "Internal matching error"
    }
  ],
  "paths": {
    "scanned": [
      "targets/metavariable-pattern/test1.yml"
    ]
  },
  "results": [
    {
      "check_id": "rules.metavariable-pattern.yaml.github-actions.security.run-shell-injection.run-shell-injection",
      "end": {
        "col": 378,
        "line": 15,
        "offset": 1093
      },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "0x42",
        "is_ignored": false,
        "lines": "        run: |\n          if ${{ steps.pss.outcome=='failure' }}; then FAILED=pss; fi\n          if ${{ steps.soc.outcome=='failure' }}; then FAILED=soc; fi\n          if ${{ steps.pushsync-chunks-1.outcome=='failure' }}; then FAILED=pushsync-chunks-1; fi\n          if ${{ steps.pushsync-chunks-2.outcome=='failure' }}; then FAILED=pushsync-chunks-2; fi\n          if ${{ steps.retrieval.outcome=='failure' }}; then FAILED=retrieval; fi\n          if ${{ steps.manifest.outcome=='failure' }}; then FAILED=manifest; fi\n          if ${{ steps.content-availability.outcome=='failure' }}; then FAILED=content-availability; fi\n          curl -sSf -X POST -H \"Content-Type: application/json\" -d \"{\\\"text\\\": \\\"**${RUN_TYPE}** Test Error\\nBranch: \\`${{ github.head_ref }}\\`\\nUser: @${{ github.event.pull_request.user.login }}\\nDebugging artifacts: [click](https://$BUCKET_NAME.$AWS_ENDPOINT/artifacts_$VERTAG.tar.gz)\\nStep failed: \\`${FAILED}\\`\\\"}\" https://foobar.test.org/hooks/${{ secrets.TUNSHELL_KEY }}",
        "message": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": [
            "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections",
            "https://securitylab.github.com/research/github-actions-untrusted-input/"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "rule_id": "v8UjQj",
              "url": "https://semgrep.dev/playground/r/K3TPZA/yaml.github-actions.security.run-shell-injection.run-shell-injection",
              "version_id": "K3TPZA"
            }
          },
          "shortlink": "https://sg.run/pkzk",
          "source": "https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection",
          "subcategory": [
            "vuln"
          ],
          "technology": [
            "github-actions"
          ]
        },
        "metavars": {
          "$SHELL": {
            "abstract_content": "\n          if ${{ steps.pss.outcome=='failure' }}; then FAILED=pss; fi\n          if ${{ steps.soc.outcome=='failure' }}; then FAILED=soc; fi\n          if ${{ steps.pushsync-chunks-1.outcome=='failure' }}; then FAILED=pushsync-chunks-1; fi\n          if ${{ steps.pushsync-chunks-2.outcome=='failure' }}; then FAILED=pushsync-chunks-2; fi\n          if ${{ steps.retrieval.outcome=='failure' }}; then FAILED=retrieval; fi\n          if ${{ steps.manifest.outcome=='failure' }}; then FAILED=manifest; fi\n          if ${{ steps.content-availability.outcome=='failure' }}; then FAILED=content-availability; fi\n          curl -sSf -X POST -H \"Content-Type: application/json\" -d \"{\\\"text\\\": \\\"**${RUN_TYPE}** Test Error\\nBranch: \\`${{ github.head_ref }}\\`\\nUser: @${{ github.event.pull_request.user.login }}\\nDebugging artifacts: [click](https://$BUCKET_NAME.$AWS_ENDPOINT/artifacts_$VERTAG.tar.gz)\\nStep failed: \\`${FAILED}\\`\\\"}\" https://foobar.test.org/hooks/${{ secrets.TUNSHELL_KEY }}\n",
            "end": {
              "col": 1,
              "line": 16,
              "offset": 1093
            },
            "start": {
              "col": 15,
              "line": 7,
              "offset": 113
            }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "targets/metavariable-pattern/test1.yml",
      "start": {
        "col": 9,
        "line": 7,
        "offset": 107
      }
    }
  ],
  "skipped_rules": [],
  "version": "0.42"
}