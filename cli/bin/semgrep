#!/usr/bin/env python3 -W ignore::DeprecationWarning

# This is the Semgrep CLI entry point for Semgrep packaged with pip,
# as well as with HomeBrew, and with Docker.
#
# In the futur we may have different entry points when packaged
# from Cargo, Npm, Opam, or even from Docker.
#
# The main purpose of this small wrapper is to dispatch
# either to the legacy pysemgrep or to the new osemgrep.
#
# It would be faster and cleaner to have a Bash script instead of a Python
# script here, but actually the overhead of Python here is just 0.015s.
# Moreover, it's hard from a Bash script to find where is installed semgrep-core
# so it is simpler to write a Python script that can call importlib.resources.
# An alternative would be to have semgrep-core (or osemgrep) in the PATH,
# but when trying to put those binaries in cli/bin, setuptools is yelling
# and does not know what to do with it. So simpler to use a Python
# script when installed via a Python package mananger (pip).

import os
import sys
import importlib.resources

if "--experimental" in sys.argv:
    #alt: we could  extend osemgrep (and pysemgrep) to accept a new --experimental
    # flag instead of removing the flag below. However, in osemgrep we do a few
    # pattern matching of Sys.argv and if we have 'osemgrep --experimental --help'
    # this would be interpreted as 'osemgrep scan --experimental --help' (because
    # scan is the default command), and we would not get the simple semgrep --help
    # message showing all the subcommands. So simpler to just remove --experimental.
    sys.argv.remove("--experimental")
    # We could have moved the code below in a separate 'osemgrep', like for 'pysemgrep',
    # but we don't want users to be exposed to another command, so better to hide it.
    # We expose 'pysemgrep' because osemgrep itself might need to fallback to pysemgrep
    # and it's better to avoid the possibility of an infinite loop by simply using
    # a different program name.
    try:
        # the use of .path causes a DeprecationWarning hence the -W ignore:Xxx above
        with importlib.resources.path("semgrep.bin", "semgrep-core") as path:
            if path.is_file():
                # If you call semgrep-core as osemgrep, then we get osemgrep behavior
                # see src/main/Main.ml
                sys.argv[0] = "osemgrep"
                os.execvp(str(path), sys.argv)
            else:
                print(f"semgrep-core is not a file")
                # fatal error, see src/osemgrep/core/Exit_code.ml
                sys.exit(2)
    #TODO? Maybe better to just fallback to pysemgrep?
    except FileNotFoundError as e:
        print(f"Failed to open resource semgrep-core: {e}.")
        # fatal error, see src/osemgrep/core/Exit_code.ml
        sys.exit(2)
else:
    os.execvp("pysemgrep", sys.argv)
