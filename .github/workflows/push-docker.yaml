name: push-docker

on:
  workflow_dispatch:
    inputs:
      artifact-name:
        required: true
        type: string
        description: Name (key) to use when uploading the docker image tarball as a artifact
      repository-name:
        required: true
        type: string
        description: The repository/name of the docker image to push, e.g., returntocorp/semgrep
      dry-run:
        required: true
        type: boolean
        description: Whether a dry-run (e.g., print tags to push) should be peformed. Actually push images if false.
        default: true
      multi-arch:
        required: true
        type: boolean
        description: Whether or not we intend to push a multi-arch docker image

  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
        description: Name (key) to use when uploading the docker image tarball as a artifact
      repository-name:
        required: true
        type: string
        description: The repository/name of the docker image to push, e.g., returntocorp/semgrep
      dry-run:
        required: true
        type: boolean
        description: Whether a dry-run (e.g., print tags to push) should be peformed. Actually push images if false.
        default: true
      multi-arch:
        required: true
        type: boolean

jobs:
  push-docker:
    name: Push Semgrep Docker Image
    runs-on: ubuntu-22.04
    if: ${{ ! inputs.multi-arch }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/image.tar
      - name: List Images
        if: ${{ inputs.dry-run }}
        run: |
          docker image list --digests
      - uses: docker/login-action@v2
        if: ${{ ! inputs.dry-run }}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Image
        if: ${{ ! inputs.dry-run }}
        run: |
          docker push --all-tags "${{ inputs.repository-name }}"
  push-docker-multi-arch:
    name: Push Semgrep Docker Image (multi-arch)
    runs-on: ubuntu-22.04
    if: ${{ inputs.multi-arch }}
    steps:
      - uses: iarekylew00t/regctl-installer@v1
      - uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts
      - name: Merge images
        env:
          MERGED_IMAGE_PATH: /tmp/merged-image
        run: |
          mkdir -p ${MERGED_IMAGE_PATH}/blobs/sha256

          # Find docker image artifacts
          image_filenames=(/tmp/artifacts/${{ inputs.artifact-name }}-arch-*/image.tar)
          if [[ ${#image_filenames[@]} == 0 ]]; then
            echo "No artifacts found matching ${{ inputs.artifact-name }}-arch-*"
            exit 1
          else
            echo "Found images: ${image_filenames[@]}"
          fi

          # Create an empty manifest list. This will ultimately be the union of all the arch-specific image manifests we intend to publish.
          cat << "EOF" > ${MERGED_IMAGE_PATH}/index.json
          {
            "schemaVersion": 2,
            "mediaType": "application/vnd.docker.distribution.manifest.list.v2+json",
            "manifests": []
          }
          EOF
          echo "Wrote empty manifest list to ${MERGED_IMAGE_PATH}/index.json"

          # Merge the contents (blobs and manifest) of each docker image into one big multi-arch image
          for image_filename in ${image_filenames[@]}; do
            echo "Merging contents of ${image_filename}"
            cd $(dirname $image_filename)
            tar xvf image.tar

            # Copy image's blobs into merged blobs folder (overwrite is fine since this is content-addressable storage)
            cp -rvf blobs/sha256/* ${MERGED_IMAGE_PATH}/blobs/sha256/

            # Merge image's manifest list into our merged manifest list
            echo "Adding image manifest(s) to manifest list:"
            jq ".manifests" index.json
            jq -s '.[0].manifests+=.[1].manifests|.[0]' ${MERGED_IMAGE_PATH}/index.json index.json > ${MERGED_IMAGE_PATH}/index.tmp
            mv ${MERGED_IMAGE_PATH}/index.tmp ${MERGED_IMAGE_PATH}/index.json
          done
      - uses: docker/login-action@v2
        if: ${{ ! inputs.dry-run }}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push merged image
        if: ${{ ! inputs.dry-run }}
        env:
          MERGED_IMAGE_PATH: /tmp/merged-image
        run: |
          echo "Uploading image blobs..."
          for blob_filename in ${MERGED_IMAGE_PATH}/blobs/sha256/*; do
            blob_digest="sha256:$(basename $blob_filename)"
            echo "-> ${blob_digest}"
            if ! regctl blob head ${{ inputs.repository-name }} ${blob_digest}; then
              cat $blob_filename | regctl blob put ${{ inputs.repository-name }} --digest ${blob_digest}
            fi
          done

          echo "Uploading image manifests..."
          for manifest_digest in $(cat ${MERGED_IMAGE_PATH}/index.json | jq -r '.manifests | unique_by(.digest) | .[].digest' | cut -d: -f2); do
            echo "-> ${manifest_digest}"
            cat ${MERGED_IMAGE_PATH}/blobs/sha256/${manifest_digest} | regctl manifest put ${{ inputs.repository-name }} --by-digest
          done

          echo "Pushing image tags..."
          tags=$(cat ${MERGED_IMAGE_PATH}/index.json | jq -r '.manifests | unique_by(.annotations."org.opencontainers.image.ref.name") | .[].annotations."org.opencontainers.image.ref.name"')
          tags+=( "latest" )
          for tag in $tags; do
            echo "-> ${{ inputs.repository-name }}:${tag}"
            index_digest=$(cat ${MERGED_IMAGE_PATH}/index.json | regctl manifest put ${{ inputs.repository-name }}:${tag} -t application/vnd.docker.distribution.manifest.list.v2+json)
          done

          echo "Done!"
