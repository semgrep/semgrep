name: test-build-outputs

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    branches:
      - develop
    paths-ignore:
      - "**.md"

jobs:
  # TODO(devops): extract this into a reusable workflow
  build-core-osx:
    name: Build the OSX binaries
    runs-on: ["self-hosted", "macOS", "X64"]
    steps:
      - name: Make checkout speedy
        run: git config --global fetch.parallel 50
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: sudo python3 -m pip install pipenv==2022.6.7
      - name: Run OSX release script
        run: ./scripts/osx-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
          path: artifacts.zip

  # TODO(devops): extract this into a reusable workflow
  build-wheels-osx:
    runs-on: macos-12
    needs: [build-core-osx]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
      - name: Install artifacts
        run: unzip artifacts.zip
      - uses: actions/setup-python@v4
        with:
          # This is just the Python version to build the wheels
          python-version: 3.7
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd cli'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: osx-wheel
          path: cli/dist.zip

  # TODO(devops): extract this into a reusable workflow
  test-wheels-osx:
    runs-on: macos-12
    needs: [build-wheels-osx]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: osx-wheel
      - name: unzip dist
        run: unzip ./osx-wheel/dist.zip
      - name: install package
        run: pip3 install dist/*.whl
      - name: test version
        run: semgrep --version
      - name: e2e semgrep-core test
        run: echo '1 == 1' | semgrep -l python -e '$X == $X' -
      - name: e2e spacegrep test
        run: echo '1 == 1' | semgrep -l generic -e '$X == $X' -
      - name: test dynamically linked libraries are in /usr/lib/
        shell: bash {0}
        run: |
          otool -L $(semgrep --dump-engine-path) > otool.txt
          if [ $? -ne 0 ]; then
            echo "Failed to list dynamically linked libraries.";
            cat otool.txt;
            exit 1;
          fi
          NON_USR_LIB_DYNAMIC_LIBRARIES=$(cat otool.txt | tail -n +2 | grep -v "^\s*/usr/lib/")
          if [ $? -eq 0 ]; then
            echo "Error: semgrep-core has been dynamically linked against libraries outside /usr/lib:"
            echo $NON_USR_LIB_DYNAMIC_LIBRARIES
            exit 1;
          fi;

  # TODO(devops): extract this into a reusable workflow to be shared with release.yml
  build-core-m1:
    name: Build the OSX M1 binaries
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Run OSX release script
        env:
          # M1 builds failing due to a permissions issue. this cleanup is an optimization,
          # and we can revisit re-enabling cleanup when we have more time/resources to debug.
          HOMEBREW_NO_INSTALL_CLEANUP: "true"
        run: ./scripts/osx-m1-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-m1-${{ github.sha }}
          path: artifacts.zip

  # TODO(devops): extract this into a reusable workflow
  build-wheels-m1:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [build-core-m1]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: semgrep-m1-${{ github.sha }}
      - name: Install artifacts
        run: unzip artifacts.zip
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd cli'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels-m1.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: m1-wheel
          path: cli/dist.zip

  # TODO(devops): extract this into a reusable workflow
  test-wheels-m1:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [build-wheels-m1]
    steps:
      - name: cleanup semgrep
        run: pip3 uninstall -y semgrep
      - uses: actions/download-artifact@v1
        with:
          name: m1-wheel
      - name: unzip dist
        run: unzip ./m1-wheel/dist.zip
      - name: install package
        run: pip3 install dist/*.whl
      - name: test version
        run: semgrep --version
      - name: e2e semgrep-core test
        run: echo '1 == 1' | semgrep -l python -e '$X == $X' -
      - name: e2e spacegrep test
        run: echo '1 == 1' | semgrep -l generic -e '$X == $X' -
      - name: test dynamically linked libraries are in /usr/lib/
        shell: bash {0}
        run: |
          otool -L $(semgrep --dump-engine-path)  > otool.txt
          if [ $? -ne 0 ]; then
            echo "Failed to list dynamically linked libraries.";
            cat otool.txt;
            exit 1;
          fi
          NON_USR_LIB_DYNAMIC_LIBRARIES=$(cat otool.txt | tail -n +2 | grep -v "^\s*/usr/lib/")
          if [ $? -eq 0 ]; then
            echo "Error: semgrep-core has been dynamically linked against libraries outside /usr/lib:"
            echo $NON_USR_LIB_DYNAMIC_LIBRARIES
            exit 1;
          fi;
      - name: cleanup semgrep
        run: pip3 uninstall -y semgrep
