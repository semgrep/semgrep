# The goal of this workflow is mostly to run pre-commit on every pull requests.

#TODO? we could rename to 'pre-commit' really. We used to run another "lint-style" command
# for the changelog, but we don't anymore, so all that remains is just pre-commit stuff
name: lint

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - develop

jobs:
  # Running pre-commit in CI. See semgrep/.pre-commit-config.yaml for
  # our pre-commit configuration.
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # We grab those submodules below because they are the one needed by 'mypy', which
      # runs as part of pre-commit to check our Python code.
      # alt: we could also use 'submodules: recursive' instead, but that would be slower
      - name: Fetch semgrep-cli submodules
        run: git submodule update --init --recursive --recommend-shallow cli/src/semgrep/lang cli/src/semgrep/semgrep_interfaces
      # pre-commit is a Python script, hence this action.
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          # This caches the pip installed dependencies that pre-commit uses.
          # Otherwise it will need to reinstall everytime.
          # TODO? who will need to reinstall everytime? github action? How much does this
          # cache directive speedup this workflow?
          cache: pip
          cache-dependency-path: .github/workflows/lint.yml
      - uses: pre-commit/action@v3.0.0

  # This is mostly a copy-paste of the pre-commit job above. The only difference
  # is the extra_args: directive, which runs semgrep/.pre-commit-config.yaml#L150,
  # which runs Semgrep Bandit and Semgrep Python, which we don't run on normal pre-commit
  # since they would slow down pre-commit on local development.
  # We could add the last step of this job in the pre-commit job above, but jobs can run
  # in parallel, hence the copy-paste.
  # The intention is a test that runs semgrep-pre-commit.
  # (TODO: actually it looks like we also run Semgrep Bandit/Python in normal pre-commit)
  # TODO? should we split this out to a different config?
  pre-commit-manual:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: .github/workflows/lint.yml
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --hook-stage manual

  pre-commit-ocaml:
    # Even if there's a container: below, we still need a runs-on:, to say which VM will
    # run the docker container. See https://github.com/orgs/community/discussions/25534
    runs-on: ubuntu-latest
    # Custom image provides 'ocamlformat' with a specific version needed to check
    # OCaml code (must be the same than the one in semgrep-core/dev/dev.opam)
    container: returntocorp/ocaml:ubuntu-2022-06-09
    steps:
      # Apparently GHA when running a container: does a bunch of
      # `docker create` on /github and /__w but with the wrong permissions
      # (all of this after it pulled the custom container), hence the chmod below.
      # I wish we could have a .github/pre-gha-checkout to factorize and document
      # this mess, but we're before the checkout@v3 so there is no .github yet :)
      - name: Pre-checkout GHA fixes
        run: sudo chmod -R 777 /github /__w
      - uses: actions/checkout@v3
      - name: Check OCaml code
        run: |
          #TODO? why do we need that?
          sudo -u user git config --global --add safe.directory "$GITHUB_WORKSPACE"
          # coupling: must be the same than in semgrep-core/dev/dev.opam
          sudo -u user opam install -y ocamlformat.0.21.0
          sudo -u user opam exec -- pre-commit run --verbose --all lint-ocaml
