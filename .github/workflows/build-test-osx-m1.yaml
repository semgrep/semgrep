# This workflow builds and tests the semgrep-core binary for macOS M1

# coupling: if you modify this file, modify also build-test-osx-x86.yaml
# This file is mostly a copy-paste of build-test-osx-x86.yaml
name: build-test-osx-m1

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-core-m1:
    name: Build the OSX M1 binaries
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      # Force hard cleanup of any old checkouts. This is needed because we run on
      # self-hosted CI runners here and when submodules move around they are no longer
      # removed by default.
      # This hack misses some files (like hidden files) but should take care of the
      # issues we've been seeing.
      - name: Clean Checkout
        run: |
          rm -rf ./*
          rm -f .gitmodules
          rm -rf .git
      - name: Make checkout speedy
        run: git config --global fetch.parallel 50
      - uses: actions/checkout@v3
        with:
          submodules: true
      - env:
          # M1 builds failing due to a permissions issue. this cleanup is an optimization,
          # and we can revisit re-enabling cleanup when we have more time/resources to debug.
          HOMEBREW_NO_INSTALL_CLEANUP: "true"
        run: ./scripts/osx-release.sh
      - uses: actions/upload-artifact@v3
        with:
          name: semgrep-m1-${{ github.sha }}
          path: artifacts.zip

  build-wheels-m1:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [build-core-m1]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/download-artifact@v3
        with:
          name: semgrep-m1-${{ github.sha }}
      - run: unzip artifacts.zip
      - env:
          # Relative because build-wheels does a 'cd cli'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels.sh
      - uses: actions/upload-artifact@v3
        with:
          name: m1-wheel
          path: cli/dist.zip

  test-wheels-m1:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [build-wheels-m1]
    steps:
      - name: cleanup semgrep
        run: |
          pip3 uninstall -y semgrep
          rm -rf dist/
      - uses: actions/download-artifact@v1
        with:
          name: m1-wheel
      - run: unzip ./m1-wheel/dist.zip
      - name: install package
        run: pip3 install dist/*.whl
      - run: semgrep --version
      - name: e2e semgrep-core test
        run: echo '1 == 1' | semgrep -l python -e '$X == $X' -
      - name: test dynamically linked libraries are in /usr/lib/
        shell: bash {0}
        run: |
          otool -L $(semgrep --dump-engine-path)  > otool.txt
          if [ $? -ne 0 ]; then
            echo "Failed to list dynamically linked libraries.";
            cat otool.txt;
            exit 1;
          fi
          NON_USR_LIB_DYNAMIC_LIBRARIES=$(cat otool.txt | tail -n +2 | grep -v "^\s*/usr/lib/")
          if [ $? -eq 0 ]; then
            echo "Error: semgrep-core has been dynamically linked against libraries outside /usr/lib:"
            echo $NON_USR_LIB_DYNAMIC_LIBRARIES
            exit 1;
          fi;
      - name: cleanup semgrep
        run: |
          pip3 uninstall -y semgrep
          rm -rf dist/
