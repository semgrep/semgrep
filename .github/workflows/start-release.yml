name: Trigger Release

on:
  workflow_dispatch:
    inputs:
      bumpVersionFragment:
        description: "Version fragment to bump"
        required: true
        default: "feature"
        type: "choice"
        options:
          - "feature"
          - "bug"

jobs:
  release-setup:
    name: Setup Release Branch
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.next-version.outputs.next-version }}
      pr-number: ${{ steps.open-pr.outputs.pr-number }}
      release-branch: ${{ steps.release-branch.outputs.release-branch }}
    steps:
      - name: Get JWT for semgrep-ci GitHub App
        id: jwt
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
        env:
          EXPIRATION: 600 # seconds
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }} # semgrep-ci GitHub App id
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
      - name: Get token for semgrep-ci GitHub App
        id: token
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"
      - name: Check out code
        uses: actions/checkout@v3
        id: checkout
        with:
          submodules: "recursive"
          ref: "${{ github.event.repository.default_branch }}"
          token: "${{ steps.token.outputs.token }}"
      - name: Pull Tags
        id: pull-tags
        # We don't want a full heavyweight checkout with full history
        # checkout action only can get tags + full history, so do this separately.
        # Don't need tags in submodules.
        run: git fetch --no-recurse-submodules origin 'refs/tags/*:refs/tags/*'
      - name: Get latest version
        id: latest-version
        run: |
          LATEST_TAG=$(git tag --list "v*.*.*" | sort -V | tail -n 1 | cut -c 2- )
          echo ::set-output name=latest-version::${LATEST_TAG}
      - name: Bump release version
        id: next-version
        uses: christian-draeger/increment-semantic-version@9d04121fb4825e033aeeaaf6d42b44b8b4e81ac5
        with:
          current-version: "${{ steps.latest-version.outputs.latest-version }}"
          version-fragment: "${{ github.event.inputs.bumpVersionFragment }}"
      - name: Create release branch
        id: release-branch
        run: |
          RELEASE_BRANCH="release-${{ steps.next-version.outputs.next-version }}"
          git checkout -b ${RELEASE_BRANCH}
          echo ::set-output name=release-branch::${RELEASE_BRANCH}
      - name: Run `make release`
        id: make-release
        env:
          SEMGREP_RELEASE_NEXT_VERSION: ${{ steps.next-version.outputs.next-version }}
        run: make release
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pipenv"
          cache-dependency-path: |
            scripts/release/Pipfile.lock
      - name: Create GitHub Release Body
        working-directory: scripts/release
        id: changelog_output
        run: |
          pip3 install pipenv==2022.6.7
          pipenv install --dev
          pipenv run towncrier build --draft --version ${{ steps.next-version.outputs.next-version }} > release_body.txt
      - name: Upload Changelog Body Artifact
        id: upload-changelog-artifact
        uses: actions/upload-artifact@v3
        with:
          name: release_body_${{ steps.next-version.outputs.next-version }}
          path: scripts/release/release_body.txt
      - name: Update Changelog
        working-directory: scripts/release
        run: |
          pip3 install pipenv==2022.6.7
          pipenv install --dev
          pipenv run towncrier build --yes --version ${{ steps.next-version.outputs.next-version }}
          # use || true since modifications mean exit code != 0
          pipenv run pre-commit run --files ../../CHANGELOG.md --config ../../.pre-commit-config.yaml || true
      - name: Push release branch
        id: push-release-branch
        env:
          SEMGREP_RELEASE_NEXT_VERSION: ${{ steps.next-version.outputs.next-version }}
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git add --all
          git commit -m "chore: Bump version to ${SEMGREP_RELEASE_NEXT_VERSION}"
          git push --set-upstream origin ${{ steps.release-branch.outputs.release-branch }}
      - name: Create PR
        id: open-pr
        env:
          SOURCE: "${{ steps.release-branch.outputs.release-branch }}"
          TARGET: "${{ github.event.repository.default_branch }}"
          TITLE: "Release Version ${{ steps.next-version.outputs.next-version }}"
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        run: |
          # check if the branch already has a pull request open

          if gh pr list --head ${SOURCE} | grep -vq "no pull requests"; then
              # pull request already open
              echo "pull request from SOURCE ${SOURCE} to TARGET ${TARGET} is already open";
              echo "cancelling release"
              exit 1
          fi

          # open new pull request with the body of from the local template.
          PR_URL=$(gh pr create --title "${TITLE}" --body-file ./.github/PULL_REQUEST_TEMPLATE/release_pr_template.md \
            --base "${TARGET}" --head "${SOURCE}")

          echo $PR_URL

          #GH actions doesn't provide an easy way to determine this, so we capture the number and go from there.
          PR_NUMBER=$(echo $PR_URL | sed 's|.*pull/\(.*\)|\1|')

          echo "::set-output name=pr-number::$PR_NUMBER"

  wait-for-pr-checks:
    name: Wait for PR Checks
    runs-on: ubuntu-20.04
    needs: release-setup
    outputs:
      num-checks: ${{ steps.num-checks.outputs.num-checks }}
    steps:
      - name: Wait for checks to register
        id: register-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');

          # Immediately after creation, the PR doesn't have any checks attached yet, wait until this is not the case
          # If you immediately start waiting for checks, then it just fails saying there's no checks.
          while [ ${LEN_CHECKS} = "0" ]; do
            echo "No checks available yet"
            sleep 1
            LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          done
          echo "checks are valid"

          echo ${LEN_CHECKS}

          gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup
      - name: Wait for checks to complete
        id: wait-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Wait for PR checks to finish
          gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number }}" --interval 90 --watch
      - name: Get Current Num Checks
        id: num-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Once all checks are complete on the PR, find the number of checks so that we can wait for the new checks to register.
          # We can't do this above because sometimes all checks aren't yet ready by the time the first one is, so we end up in a case where
          # we aren't getting waiting for all checks.
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          echo "::set-output name=num-checks::${LEN_CHECKS}"

  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-20.04
    needs: [release-setup, wait-for-pr-checks]
    steps:
      - name: Get JWT for semgrep-ci GitHub App
        id: jwt
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
        env:
          EXPIRATION: 600 # seconds
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }} # semgrep-ci GitHub App id
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
      - name: Get token for semgrep-ci GitHub App
        id: token
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"
      - name: Check out code
        uses: actions/checkout@v3
        id: checkout
        with:
          ref: "${{ needs.release-setup.outputs.release-branch }}"
          token: "${{ steps.token.outputs.token }}"
      - name: Create release version tag
        id: create-tag
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git tag -a -m "Release ${{ needs.release-setup.outputs.version }}" "v${{ needs.release-setup.outputs.version }}"
          git push origin "v${{ needs.release-setup.outputs.version }}"

  create-draft-release:
    name: Create Draft Release
    runs-on: ubuntu-20.04
    needs: [release-setup, create-tag]
    steps:
      - name: Download Release Body Artifact
        id: download_body
        uses: actions/download-artifact@v3
        with:
          name: "release_body_${{ needs.release-setup.outputs.version }}"
          path: scripts/release
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.release-setup.outputs.version }}"
          name: Release v${{ needs.release-setup.outputs.version }}
          body_path: scripts/release/release_body.txt
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: true

  wait-for-release-checks:
    name: Wait for Release Checks
    runs-on: ubuntu-20.04
    needs: [release-setup, wait-for-pr-checks, create-tag]
    steps:
      - name: Wait for release checks to register
        id: register-release-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');

          # We need to wait for the new checks to register when the release tag is pushed
          while [ ${LEN_CHECKS} = ${{ needs.wait-for-pr-checks.outputs.num-checks }} ]; do
            echo "No checks available yet"
            sleep 1
            LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          done
          echo "checks are valid"

          echo ${LEN_CHECKS}

          gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup
      - name: Wait for release checks
        id: wait-release-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Wait for PR checks to finish
          gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number }}" --interval 90 --watch

  validate-release-trigger:
    needs: [wait-for-release-checks, release-setup]
    name: Trigger Release Validation
    uses: ./.github/workflows/validate-release.yml
    secrets: inherit
    with:
      version: ${{needs.release-setup.outputs.version}}

  bump-semgrep-app:
    needs: [validate-release-trigger, release-setup]
    name: Bump Semgrep App Semgrep Version
    uses: ./.github/workflows/open-bump-pr.yml
    secrets: inherit
    with:
      version: ${{needs.release-setup.outputs.version}}
      repository: "returntocorp/semgrep-app"
      base_branch: "develop"
      bump_script_path: "scripts/bump-version"

  bump-semgrep-action:
    needs: [validate-release-trigger, release-setup]
    name: Bump Semgrep Action Semgrep Version
    uses: ./.github/workflows/open-bump-pr.yml
    secrets: inherit
    with:
      version: ${{needs.release-setup.outputs.version}}
      repository: "returntocorp/semgrep-action"
      base_branch: "develop"
      bump_script_path: "scripts/bump-version"

  bump-semgrep-rpc:
    needs: [validate-release-trigger, release-setup]
    name: Bump Semgrep RPC Semgrep Version
    uses: ./.github/workflows/open-bump-pr.yml
    secrets: inherit
    with:
      version: ${{needs.release-setup.outputs.version}}
      repository: "returntocorp/semgrep-rpc"
      base_branch: "main"
      bump_script_path: "scripts/bump-version.sh"

  notify-success:
    needs:
      [
        release-setup,
        validate-release-trigger,
        bump-semgrep-action,
        bump-semgrep-rpc,
        bump-semgrep-app,
      ]
    name: Notify of Success
    runs-on: ubuntu-20.04
    if: success()
    steps:
      - run: echo "${{needs.release-setup.outputs.version}}"
      - name: Notify Success
        run: |
          curl --request POST \
          --url  ${{ secrets.NOTIFICATIONS_URL }} \
          --header 'content-type: application/json' \
          --data '{
            "version": "${{needs.release-setup.outputs.version}}",
            "message": "Release Validation has succeeded! Please review the following PRs that bump versions in other repos: ${{ needs.bump-semgrep-action.outputs.pr-url }} , ${{ needs.bump-semgrep-rpc.outputs.pr-url }} , ${{ needs.bump-semgrep-app.outputs.pr-url }}"
          }'

  notify-failure:
    needs:
      [
        release-setup,
        validate-release-trigger,
        bump-semgrep-action,
        bump-semgrep-rpc,
        bump-semgrep-app,
      ]
    name: Notify of Failure
    runs-on: ubuntu-20.04
    if: failure()
    steps:
      - name: Notify Failure
        run: |
          curl --request POST \
          --url  ${{ secrets.NOTIFICATIONS_URL }} \
          --header 'content-type: application/json' \
          --data '{
            "version": "${{needs.release-setup.outputs.version}}",
            "message": "Release Validation has failed. Please see https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} for more details!"
          }'
