# AUTOGENERATED FROM start-release.jsonnet DO NOT MODIFY
jobs:
  bump-semgrep-action:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Bump semgrep version in semgrep/semgrep-action
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-action" --raw-field version="$VERSION"
  bump-semgrep-app:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Bump semgrep version in semgrep/semgrep-app
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-app" --raw-field version="$VERSION"
  bump-semgrep-intellij:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Bump semgrep version in semgrep/semgrep-intellij
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-intellij" --raw-field version="$VERSION"
  bump-semgrep-pre-commit:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Bump semgrep version in semgrep/pre-commit
        run: gh workflow run bump_version.yml --repo "semgrep/pre-commit" --raw-field version="$VERSION"
  bump-semgrep-rpc:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Bump semgrep version in semgrep/semgrep-rpc
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-rpc" --raw-field version="$VERSION"
  bump-semgrep-vscode:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Bump semgrep version in semgrep/semgrep-vscode
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-vscode" --raw-field version="$VERSION"
  check-semgrep-pro:
    name: Check Semgrep Pro Manifest
    needs:
      - check-version
    secrets: inherit
    uses: ./.github/workflows/check-semgrep-pro-version.yml
    with:
      bucket-name: deep-semgrep-artifacts
      dry-run: ${{ inputs.dry-run }}
      manifest-key: versions-manifest.json
      semgrep-version: ${{ github.event.inputs.semgrep-version }}
  check-version:
    env:
      VERSION: ${{ github.event.inputs.semgrep-version }}
    name: Check Semgrep Version
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src/core/Version.ml
      - run: |
          grep -F "let version = \"${VERSION}\"" src/core/Version.ml
  create-draft-release:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - release-setup
      - create-tag
      - wait-for-pr-checks
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: release-${{ github.event.inputs.semgrep-version }}
          token: ${{ steps.token.outputs.token }}
      - name: Create Draft Release Semgrep
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_changes.md
          draft: true
          name: Release v${{ github.event.inputs.semgrep-version }}
          prerelease: false
          tag_name: v${{ github.event.inputs.semgrep-version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Draft Release Semgrep Interfaces
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_changes.md
          draft: true
          name: Release v${{ github.event.inputs.semgrep-version }}
          prerelease: false
          repository: returntocorp/semgrep-interfaces
          tag_name: v${{ github.event.inputs.semgrep-version }}
          token: ${{ steps.token.outputs.token }}
  create-tag:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - check-semgrep-pro
      - release-setup
      - wait-for-pr-checks
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: release-${{ github.event.inputs.semgrep-version }}
          submodules: true
          token: ${{ steps.token.outputs.token }}
      - env:
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Create semgrep release version tag
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

          git tag -a -m "Release ${VERSION}" "v${VERSION}"
          git push origin "v${VERSION}"
      - env:
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Create semgrep-interfaces release version tag
        run: |
          cd cli/src/semgrep/semgrep_interfaces
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

          git tag -a -m "Release ${VERSION}" "v${VERSION}"
          git push origin "v${VERSION}"
  notify-failure:
    env:
      VERSION: ${{ github.event.inputs.semgrep-version }}
    if: ${{ failure() && ! inputs.dry-run }}
    needs:
      - check-version
      - release-setup
      - validate-release-trigger
      - bump-semgrep-action
      - bump-semgrep-pre-commit
      - bump-semgrep-rpc
      - bump-semgrep-app
      - bump-semgrep-vscode
      - bump-semgrep-intellij
    runs-on: ubuntu-20.04
    steps:
      - run: |
          curl --request POST \
           --url  ${{ secrets.NOTIFICATIONS_URL }} \
           --header 'content-type: application/json' \
           --data '{
             "text": "Release Validation has failed for version ${VERSION}. Please see https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} for more details!"
           }'
  notify-success:
    env:
      VERSION: ${{ github.event.inputs.semgrep-version }}
    if: ${{ success() && ! inputs.dry-run }}
    needs:
      - check-version
      - release-setup
      - validate-release-trigger
      - bump-semgrep-action
      - bump-semgrep-rpc
      - bump-semgrep-app
      - bump-semgrep-vscode
      - bump-semgrep-intellij
    runs-on: ubuntu-20.04
    steps:
      - run: echo "${VERSION}"
      - env:
          VERSION: ${{ github.event.inputs.semgrep-version }}
        name: Notify Success on Twitter
        run: |
          # POST a webhook to Zapier to allow for public notifications to our users via Twitter
          curl "${{ secrets.ZAPIER_WEBHOOK_URL }}" \
            -d '{"version":"${VERSION}","changelog_url":"https://github.com/returntocorp/semgrep/releases/tag/v${VERSION}"}'
      - name: Notify Success on Slack
        run: |
          curl --request POST \
           --url  ${{ secrets.NOTIFICATIONS_URL }} \
           --header 'content-type: application/json' \
           --data '{
             "text": "Release Validation for ${VERSION} has succeeded! Please review the PRs in semgrep-app, semgrep-rpc, and semgrep-action that were generated by this workflow."
           }'
  release-setup:
    env:
      BRANCH: release-${{ github.event.inputs.semgrep-version }}
      VERSION: ${{ github.event.inputs.semgrep-version }}
    needs:
      - check-version
      - check-semgrep-pro
    outputs:
      pr-number: ${{ steps.open-pr.outputs.pr-number }}
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          submodules: recursive
          token: ${{ steps.token.outputs.token }}
      - run: git checkout -b "${BRANCH}"
      - if: ${{ ! inputs.dry-run }}
        name: Push release branch
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

          git add --all
          git commit --allow-empty -m "chore: release version ${VERSION}"
          git push --set-upstream origin ${BRANCH}
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          SOURCE: release-${{ github.event.inputs.semgrep-version }}
          TARGET: ${{ github.event.repository.default_branch }}
          TITLE: Release Version ${{ github.event.inputs.semgrep-version }}
        id: open-pr
        if: ${{ ! inputs.dry-run }}
        name: Create PR
        run: |
          # check if the branch already has a pull request open

          if gh pr list --head ${SOURCE} | grep -vq "no pull requests"; then
              echo "pull request from SOURCE ${SOURCE} to TARGET ${TARGET} is already open";
              echo "cancelling release"
              exit 1
          fi

          # open new pull request with the body of from the local template.
          PR_URL=$(gh pr create --title "${TITLE}" --body-file ./.github/PULL_REQUEST_TEMPLATE/release_pr_template.md \
            --base "${TARGET}" --head "${SOURCE}")

          echo $PR_URL

          # GHA doesn't provide an easy way to determine this, so we
          # capture the number and go from there.
          PR_NUMBER=$(echo $PR_URL | sed 's|.*pull/\(.*\)|\1|')

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
  validate-release-trigger:
    env:
      VERSION: ${{ github.event.inputs.semgrep-version }}
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - wait-for-release-checks
      - release-setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: v${{ github.event.inputs.semgrep-version }}
      - run: ./scripts/validate-docker-release.sh $VERSION
  wait-for-pr-checks:
    if: ${{ ! inputs.dry-run }}
    needs:
      - check-version
      - check-semgrep-pro
      - release-setup
    outputs:
      num-checks: ${{ steps.num-checks.outputs.num-checks }}
    runs-on: ubuntu-20.04
    steps:
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Wait for checks to register
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          while [ ${LEN_CHECKS} = "0" ]; do
            echo "No checks available yet"
            sleep 1
            LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          done
          echo "checks are valid"
          echo ${LEN_CHECKS}
          gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: wait-checks
        name: Wait for checks to complete
        run: gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number }}" --interval 90 --watch
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: num-checks
        name: Get Current Num Checks
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          echo "num-checks=${LEN_CHECKS}" >> $GITHUB_OUTPUT
  wait-for-release-checks:
    if: ${{ ! inputs.dry-run }}
    needs:
      - release-setup
      - wait-for-pr-checks
      - create-tag
    runs-on: ubuntu-20.04
    steps:
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Wait for checks to register
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          while [ ${LEN_CHECKS} = "${{ needs.wait-for-pr-checks.outputs.num-checks }}" ]; do
            echo "No checks available yet"
            sleep 1
            LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          done
          echo "checks are valid"
          echo ${LEN_CHECKS}
          gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: wait-checks
        name: Wait for checks to complete
        run: gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number }}" --interval 90 --watch
name: start-release
on:
  workflow_dispatch:
    inputs:
      dry-run:
        default: false
        description: |
          Check the box for a dry-run - A dry-run will not push any external state
          (branches, tags, images, or PyPI packages).
        required: true
        type: boolean
      semgrep-version:
        description: This is the version that is about to be released and should be what the previous version bump step set the OSS version to in the previous step. This is only really required as a safety check, failing to get the version correct here will only cause this step to fail and should not break anything.
        required: true
        type: string
permissions:
  contents: write
  id-token: write
