# AUTOGENERATED FROM start-release.jsonnet DO NOT MODIFY
name: start-release
"on":
  workflow_dispatch:
    inputs:
      bumpVersionFragment:
        description: Version fragment to bump
        required: true
        type: choice
        options:
        - feature
        - bug
        default: feature
      dry-run:
        required: true
        type: boolean
        description: "\n        Check the box for a dry-run - A dry-run will not push
          any external state\n        (branches, tags, images, or PyPI packages).\n
          \     "
        default: false
jobs:
  get-version:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.next-version.outputs.next-version }}
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        ref: ${{ github.event.repository.default_branch }}
        token: ${{ steps.token.outputs.token }}
    - name: Pull Tags
      run: git fetch --no-recurse-submodules origin 'refs/tags/*:refs/tags/*'
    - name: Get latest version
      id: latest-version
      run: "\n        LATEST_TAG=$(git tag --list \"v*.*.*\" | sort -V | tail -n 1
        | cut -c 2- )\n        echo \"latest-version=${LATEST_TAG}\" >> $GITHUB_OUTPUT\n
        \     "
    - name: Bump release version
      id: next-version
      uses: christian-draeger/increment-semantic-version@68f14f806a9800fe17433287c35226fd8fd60201
      with:
        current-version: ${{ steps.latest-version.outputs.latest-version }}
        version-fragment: ${{ github.event.inputs.bumpVersionFragment }}
  check-semgrep-pro:
    needs:
    - get-version
    name: Check Semgrep Pro Manifest
    secrets: inherit
    uses: ./.github/workflows/check-semgrep-pro-version.yml
    with:
      bucket-name: deep-semgrep-artifacts
      manifest-key: versions-manifest.json
      semgrep-version: ${{ needs.get-version.outputs.version }}
      dry-run: ${{ inputs.dry-run }}
  release-setup:
    needs:
    - get-version
    - check-semgrep-pro
    runs-on: ubuntu-20.04
    outputs:
      pr-number: ${{ steps.open-pr.outputs.pr-number }}
      release-branch: ${{ steps.release-branch.outputs.release-branch }}
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        ref: ${{ github.event.repository.default_branch }}
        token: ${{ steps.token.outputs.token }}
    - name: Create release branch
      id: release-branch
      run: "\n        RELEASE_BRANCH=\"release-${{ needs.get-version.outputs.version
        }}\"\n        git checkout -b ${RELEASE_BRANCH}\n        echo \"release-branch=${RELEASE_BRANCH}\"
        >> $GITHUB_OUTPUT\n      "
    - env:
        SEMGREP_RELEASE_NEXT_VERSION: ${{ needs.get-version.outputs.version }}
      run: make release
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: pipenv
        cache-dependency-path: scripts/release/Pipfile.lock
    - name: Create GitHub Release Body
      working-directory: scripts/release
      run: "\n        \n  pip3 install pipenv==2022.6.7\n  pipenv install --dev\n\n
        \       pipenv run towncrier build --draft --version ${{ needs.get-version.outputs.version
        }} > release_body.txt\n      "
      if: ${{ ! inputs.dry-run }}
    - name: Upload Changelog Body Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release_body_${{ needs.get-version.outputs.version }}
        path: scripts/release/release_body.txt
      if: ${{ ! inputs.dry-run }}
    - name: Update Changelog
      working-directory: scripts/release
      run: "\n        \n  pip3 install pipenv==2022.6.7\n  pipenv install --dev\n\n
        \       pipenv run towncrier build --yes --version ${{ needs.get-version.outputs.version
        }}\n        pipenv run pre-commit run --files ../../CHANGELOG.md --config
        ../../.pre-commit-config.yaml || true\n      "
    - name: Push release branch
      env:
        SEMGREP_RELEASE_NEXT_VERSION: ${{ needs.get-version.outputs.version }}
      run: "\n        \n  git config user.name ${{ github.actor }}\n  git config user.email
        ${{ github.actor }}@users.noreply.github.com\n\n        git add --all\n        git
        commit -m \"chore: Bump version to ${SEMGREP_RELEASE_NEXT_VERSION}\"\n        git
        push --set-upstream origin ${{ steps.release-branch.outputs.release-branch
        }}\n      "
      if: ${{ ! inputs.dry-run }}
    - name: Create PR
      id: open-pr
      env:
        SOURCE: ${{ steps.release-branch.outputs.release-branch }}
        TARGET: ${{ github.event.repository.default_branch }}
        TITLE: Release Version ${{ needs.get-version.outputs.version }}
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: "\n        # check if the branch already has a pull request open\n\n        if
        gh pr list --head ${SOURCE} | grep -vq \"no pull requests\"; then\n            #
        pull request already open\n            echo \"pull request from SOURCE ${SOURCE}
        to TARGET ${TARGET} is already open\";\n            echo \"cancelling release\"\n
        \           exit 1\n        fi\n\n        # open new pull request with the
        body of from the local template.\n        PR_URL=$(gh pr create --title \"${TITLE}\"
        --body-file ./.github/PULL_REQUEST_TEMPLATE/release_pr_template.md \\\n          --base
        \"${TARGET}\" --head \"${SOURCE}\")\n\n        echo $PR_URL\n\n        # GHA
        doesn't provide an easy way to determine this, so we\n        # capture the
        number and go from there.\n        PR_NUMBER=$(echo $PR_URL | sed 's|.*pull/\\(.*\\)|\\1|')\n\n
        \       echo \"pr-number=$PR_NUMBER\" >> $GITHUB_OUTPUT\n      "
      if: ${{ ! inputs.dry-run }}
  wait-for-pr-checks:
    runs-on: ubuntu-20.04
    needs:
    - get-version
    - check-semgrep-pro
    - release-setup
    outputs:
      num-checks: ${{ steps.num-checks.outputs.num-checks }}
    steps:
    - name: Wait for checks to register
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: "\n  LEN_CHECKS=$(gh pr -R returntocorp/semgrep view \"${{ needs.release-setup.outputs.pr-number
        }}\" --json statusCheckRollup --jq '.statusCheckRollup | length');\n    while
        [ ${LEN_CHECKS} = \"0\" ]; do\n      echo \"No checks available yet\"\n      sleep
        1\n      LEN_CHECKS=$(gh pr -R returntocorp/semgrep view \"${{ needs.release-setup.outputs.pr-number
        }}\" --json statusCheckRollup --jq '.statusCheckRollup | length');\n    done\n
        \   echo \"checks are valid\"\n\n    echo ${LEN_CHECKS}\n\n    gh pr -R returntocorp/semgrep
        view \"${{ needs.release-setup.outputs.pr-number }}\" --json statusCheckRollup\n"
    - name: Wait for checks to complete
      id: wait-checks
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number
        }}" --interval 90 --watch
    - name: Get Current Num Checks
      id: num-checks
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: "\n    LEN_CHECKS=$(gh pr -R returntocorp/semgrep view \"${{ needs.release-setup.outputs.pr-number
        }}\" --json statusCheckRollup --jq '.statusCheckRollup | length');\n    echo
        \"num-checks=${LEN_CHECKS}\" >> $GITHUB_OUTPUT\n  "
    if: ${{ ! inputs.dry-run }}
  create-tag:
    runs-on: ubuntu-20.04
    needs:
    - get-version
    - check-semgrep-pro
    - release-setup
    - wait-for-pr-checks
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - uses: actions/checkout@v3
      with:
        submodules: true
        ref: ${{ needs.release-setup.outputs.release-branch }}
        token: ${{ steps.token.outputs.token }}
    - name: Create semgrep release version tag
      run: "\n        \n  git config user.name ${{ github.actor }}\n  git config user.email
        ${{ github.actor }}@users.noreply.github.com\n\n        git tag -a -m \"Release
        ${{ needs.get-version.outputs.version }}\" \"v${{ needs.get-version.outputs.version
        }}\"\n        git push origin \"v${{ needs.get-version.outputs.version }}\"\n
        \     "
    - name: Create semgrep-interfaces release version tag
      run: "\n        cd cli/src/semgrep/semgrep_interfaces\n        \n  git config
        user.name ${{ github.actor }}\n  git config user.email ${{ github.actor }}@users.noreply.github.com\n\n
        \       git tag -a -m \"Release ${{ needs.get-version.outputs.version }}\"
        \"v${{ needs.get-version.outputs.version }}\"\n        git push origin \"v${{
        needs.get-version.outputs.version }}\"\n      "
    if: ${{ ! inputs.dry-run }}
  create-draft-release:
    runs-on: ubuntu-20.04
    needs:
    - get-version
    - release-setup
    - create-tag
    - wait-for-pr-checks
    steps:
    - name: Download Release Body Artifact
      uses: actions/download-artifact@v3
      with:
        name: release_body_${{ needs.get-version.outputs.version }}
        path: scripts/release
    - name: Create Draft Release Semgrep
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.get-version.outputs.version }}
        name: Release v${{ needs.get-version.outputs.version }}
        body_path: scripts/release/release_body.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: false
        draft: true
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - name: Create Draft Release Semgrep Interfaces
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.get-version.outputs.version }}
        name: Release v${{ needs.get-version.outputs.version }}
        body_path: scripts/release/release_body.txt
        token: ${{ steps.token.outputs.token }}
        prerelease: false
        draft: true
        repository: returntocorp/semgrep-interfaces
    if: ${{ ! inputs.dry-run }}
  wait-for-release-checks:
    runs-on: ubuntu-20.04
    needs:
    - release-setup
    - wait-for-pr-checks
    - create-tag
    steps:
    - name: Wait for checks to register
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: "\n  LEN_CHECKS=$(gh pr -R returntocorp/semgrep view \"${{ needs.release-setup.outputs.pr-number
        }}\" --json statusCheckRollup --jq '.statusCheckRollup | length');\n    while
        [ ${LEN_CHECKS} = \"${{ needs.wait-for-pr-checks.outputs.num-checks }}\" ];
        do\n      echo \"No checks available yet\"\n      sleep 1\n      LEN_CHECKS=$(gh
        pr -R returntocorp/semgrep view \"${{ needs.release-setup.outputs.pr-number
        }}\" --json statusCheckRollup --jq '.statusCheckRollup | length');\n    done\n
        \   echo \"checks are valid\"\n\n    echo ${LEN_CHECKS}\n\n    gh pr -R returntocorp/semgrep
        view \"${{ needs.release-setup.outputs.pr-number }}\" --json statusCheckRollup\n"
    - name: Wait for checks to complete
      id: wait-checks
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number
        }}" --interval 90 --watch
    if: ${{ ! inputs.dry-run }}
  validate-release-trigger:
    needs:
    - get-version
    - wait-for-release-checks
    - release-setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: v${{ needs.get-version.outputs.version }}
    - run: ./scripts/validate-docker-release.sh ${{ needs.get-version.outputs.version
        }}
    if: ${{ ! inputs.dry-run }}
  bump-semgrep-app:
    runs-on: ubuntu-22.04
    needs:
    - get-version
    - validate-release-trigger
    - release-setup
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - name: Bump semgrep version in semgrep/semgrep-app
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh workflow run bump_version.yml --repo "semgrep/semgrep-app" --raw-field
        version="${{ needs.get-version.outputs.version }}"
    if: ${{ ! inputs.dry-run }}
  bump-semgrep-action:
    runs-on: ubuntu-22.04
    needs:
    - get-version
    - validate-release-trigger
    - release-setup
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - name: Bump semgrep version in semgrep/semgrep-action
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh workflow run bump_version.yml --repo "semgrep/semgrep-action" --raw-field
        version="${{ needs.get-version.outputs.version }}"
    if: ${{ ! inputs.dry-run }}
  bump-semgrep-rpc:
    runs-on: ubuntu-22.04
    needs:
    - get-version
    - validate-release-trigger
    - release-setup
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - name: Bump semgrep version in semgrep/semgrep-rpc
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh workflow run bump_version.yml --repo "semgrep/semgrep-rpc" --raw-field
        version="${{ needs.get-version.outputs.version }}"
    if: ${{ ! inputs.dry-run }}
  notify-success:
    if: ${{ success() && ! inputs.dry-run }}
    needs:
    - get-version
    - release-setup
    - validate-release-trigger
    - bump-semgrep-action
    - bump-semgrep-rpc
    - bump-semgrep-app
    runs-on: ubuntu-20.04
    steps:
    - run: echo "${{ needs.get-version.outputs.version }}"
    - name: Notify Success on Twitter
      run: "\n        # POST a webhook to Zapier to allow for public notifications
        to our users via Twitter\n        curl \"${{ secrets.ZAPIER_WEBHOOK_URL }}\"
        \\\n          -d '{\"version\":\"${{ needs.get-version.outputs.version }}\",\"changelog_url\":\"https://github.com/returntocorp/semgrep/releases/tag/v${{
        needs.get-version.outputs.version }}\"}'\n      "
    - name: Notify Success on Slack
      run: "\n  curl --request POST \\\n  --url  ${{ secrets.NOTIFICATIONS_URL }}
        \\\n  --header 'content-type: application/json' \\\n  --data '{\n    \"version\":
        \"${{ needs.get-version.outputs.version }}\",\n    \"message\": \"Release
        Validation has succeeded! Please review the PRs in semgrep-app, semgrep-rpc,
        and semgrep-action that were generated by this workflow.\"\n  }'\n"
  notify-failure:
    if: ${{ failure() && ! inputs.dry-run }}
    needs:
    - get-version
    - release-setup
    - validate-release-trigger
    - bump-semgrep-action
    - bump-semgrep-rpc
    - bump-semgrep-app
    runs-on: ubuntu-20.04
    steps:
    - name: Notify Failure
      run: "\n  curl --request POST \\\n  --url  ${{ secrets.NOTIFICATIONS_URL }}
        \\\n  --header 'content-type: application/json' \\\n  --data '{\n    \"version\":
        \"${{ needs.get-version.outputs.version }}\",\n    \"message\": \"Release
        Validation has failed. Please see https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
        for more details!\"\n  }'\n"
