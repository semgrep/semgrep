# AUTOGENERATED FROM start-release.jsonnet DO NOT MODIFY
jobs:
  bump-semgrep-action:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        name: Bump semgrep version in semgrep/semgrep-action
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-action" --raw-field version="${{ needs.get-version.outputs.version }}"
  bump-semgrep-app:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        name: Bump semgrep version in semgrep/semgrep-app
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-app" --raw-field version="${{ needs.get-version.outputs.version }}"
  bump-semgrep-rpc:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        name: Bump semgrep version in semgrep/semgrep-rpc
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-rpc" --raw-field version="${{ needs.get-version.outputs.version }}"
  bump-semgrep-vscode:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - validate-release-trigger
      - release-setup
    runs-on: ubuntu-22.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        name: Bump semgrep version in semgrep/semgrep-vscode
        run: gh workflow run bump_version.yml --repo "semgrep/semgrep-vscode" --raw-field version="${{ needs.get-version.outputs.version }}"
  check-semgrep-pro:
    name: Check Semgrep Pro Manifest
    needs:
      - get-version
    secrets: inherit
    uses: ./.github/workflows/check-semgrep-pro-version.yml
    with:
      bucket-name: deep-semgrep-artifacts
      dry-run: ${{ inputs.dry-run }}
      manifest-key: versions-manifest.json
      semgrep-version: ${{ needs.get-version.outputs.version }}
  create-draft-release:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - release-setup
      - create-tag
      - wait-for-pr-checks
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - name: Download Release Body Artifact
        uses: actions/download-artifact@v3
        with:
          name: release_body_${{ needs.get-version.outputs.version }}
          path: scripts/release
      - name: Create Draft Release Semgrep
        uses: softprops/action-gh-release@v1
        with:
          body_path: scripts/release/release_body.txt
          draft: true
          name: Release v${{ needs.get-version.outputs.version }}
          prerelease: false
          tag_name: v${{ needs.get-version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Draft Release Semgrep Interfaces
        uses: softprops/action-gh-release@v1
        with:
          body_path: scripts/release/release_body.txt
          draft: true
          name: Release v${{ needs.get-version.outputs.version }}
          prerelease: false
          repository: returntocorp/semgrep-interfaces
          tag_name: v${{ needs.get-version.outputs.version }}
          token: ${{ steps.token.outputs.token }}
  create-tag:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - check-semgrep-pro
      - release-setup
      - wait-for-pr-checks
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: release-${{ needs.get-version.outputs.version }}
          submodules: true
          token: ${{ steps.token.outputs.token }}
      - name: Create semgrep release version tag
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

          git tag -a -m "Release ${{ needs.get-version.outputs.version }}" "v${{ needs.get-version.outputs.version }}"
          git push origin "v${{ needs.get-version.outputs.version }}"
      - name: Create semgrep-interfaces release version tag
        run: |
          cd cli/src/semgrep/semgrep_interfaces
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

          git tag -a -m "Release ${{ needs.get-version.outputs.version }}" "v${{ needs.get-version.outputs.version }}"
          git push origin "v${{ needs.get-version.outputs.version }}"
  get-version:
    outputs:
      version: ${{ steps.next-version.outputs.next-version }}
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          submodules: recursive
          token: ${{ steps.token.outputs.token }}
      - name: Pull Tags
        run: git fetch --no-recurse-submodules origin 'refs/tags/*:refs/tags/*'
      - id: latest-version
        name: Get latest version
        run: |
          LATEST_TAG=$(git tag --list "v*.*.*" | sort -V | tail -n 1 | cut -c 2- )
          echo "latest-version=${LATEST_TAG}" >> $GITHUB_OUTPUT
      - id: next-version
        name: Bump release version
        uses: christian-draeger/increment-semantic-version@68f14f806a9800fe17433287c35226fd8fd60201
        with:
          current-version: ${{ steps.latest-version.outputs.latest-version }}
          version-fragment: ${{ github.event.inputs.bumpVersionFragment }}
  notify-failure:
    if: ${{ failure() && ! inputs.dry-run }}
    needs:
      - get-version
      - release-setup
      - validate-release-trigger
      - bump-semgrep-action
      - bump-semgrep-rpc
      - bump-semgrep-app
      - bump-semgrep-vscode
    runs-on: ubuntu-20.04
    steps:
      - name: Notify Failure
        run: |
          curl --request POST \
          --url  ${{ secrets.NOTIFICATIONS_URL }} \
          --header 'content-type: application/json' \
          --data '{
            "version": "${{ needs.get-version.outputs.version }}",
            "message": "Release Validation has failed. Please see https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} for more details!"
          }'
  notify-success:
    if: ${{ success() && ! inputs.dry-run }}
    needs:
      - get-version
      - release-setup
      - validate-release-trigger
      - bump-semgrep-action
      - bump-semgrep-rpc
      - bump-semgrep-app
      - bump-semgrep-vscode
    runs-on: ubuntu-20.04
    steps:
      - run: echo "${{ needs.get-version.outputs.version }}"
      - name: Notify Success on Twitter
        run: |
          # POST a webhook to Zapier to allow for public notifications to our users via Twitter
          curl "${{ secrets.ZAPIER_WEBHOOK_URL }}" \
            -d '{"version":"${{ needs.get-version.outputs.version }}","changelog_url":"https://github.com/returntocorp/semgrep/releases/tag/v${{ needs.get-version.outputs.version }}"}'
      - name: Notify Success on Slack
        run: |
          curl --request POST \
          --url  ${{ secrets.NOTIFICATIONS_URL }} \
          --header 'content-type: application/json' \
          --data '{
            "version": "${{ needs.get-version.outputs.version }}",
            "message": "Release Validation has succeeded! Please review the PRs in semgrep-app, semgrep-rpc, and semgrep-action that were generated by this workflow."
          }'
  release-setup:
    needs:
      - get-version
      - check-semgrep-pro
    outputs:
      pr-number: ${{ steps.open-pr.outputs.pr-number }}
    runs-on: ubuntu-20.04
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          submodules: recursive
          token: ${{ steps.token.outputs.token }}
      - run: git checkout -b "release-${{ needs.get-version.outputs.version }}"
      - env:
          SEMGREP_RELEASE_NEXT_VERSION: ${{ needs.get-version.outputs.version }}
        run: make release
      - uses: actions/setup-python@v4
        with:
          cache: pipenv
          cache-dependency-path: scripts/release/Pipfile.lock
          python-version: "3.10"
      - if: ${{ ! inputs.dry-run }}
        name: Create GitHub Release Body
        run: |
          pip3 install pipenv==2022.6.7
          pipenv install --dev

          pipenv run towncrier build --draft --version ${{ needs.get-version.outputs.version }} > release_body.txt
        working-directory: scripts/release
      - if: ${{ ! inputs.dry-run }}
        name: Upload Changelog Body Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release_body_${{ needs.get-version.outputs.version }}
          path: scripts/release/release_body.txt
      - name: Update Changelog
        run: |
          pip3 install pipenv==2022.6.7
          pipenv install --dev

          pipenv run towncrier build --yes --version ${{ needs.get-version.outputs.version }}
          pipenv run pre-commit run --files ../../CHANGELOG.md --config ../../.pre-commit-config.yaml || true
        working-directory: scripts/release
      - env:
          SEMGREP_RELEASE_NEXT_VERSION: ${{ needs.get-version.outputs.version }}
        if: ${{ ! inputs.dry-run }}
        name: Push release branch
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

          git add --all
          git commit -m "chore: Bump version to ${SEMGREP_RELEASE_NEXT_VERSION}"
          git push --set-upstream origin release-${{ needs.get-version.outputs.version }}
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
          SOURCE: release-${{ needs.get-version.outputs.version }}
          TARGET: ${{ github.event.repository.default_branch }}
          TITLE: Release Version ${{ needs.get-version.outputs.version }}
        id: open-pr
        if: ${{ ! inputs.dry-run }}
        name: Create PR
        run: |
          # check if the branch already has a pull request open

          if gh pr list --head ${SOURCE} | grep -vq "no pull requests"; then
              echo "pull request from SOURCE ${SOURCE} to TARGET ${TARGET} is already open";
              echo "cancelling release"
              exit 1
          fi

          # open new pull request with the body of from the local template.
          PR_URL=$(gh pr create --title "${TITLE}" --body-file ./.github/PULL_REQUEST_TEMPLATE/release_pr_template.md \
            --base "${TARGET}" --head "${SOURCE}")

          echo $PR_URL

          # GHA doesn't provide an easy way to determine this, so we
          # capture the number and go from there.
          PR_NUMBER=$(echo $PR_URL | sed 's|.*pull/\(.*\)|\1|')

          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
  validate-release-trigger:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - wait-for-release-checks
      - release-setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: v${{ needs.get-version.outputs.version }}
      - run: ./scripts/validate-docker-release.sh ${{ needs.get-version.outputs.version }}
  wait-for-pr-checks:
    if: ${{ ! inputs.dry-run }}
    needs:
      - get-version
      - check-semgrep-pro
      - release-setup
    outputs:
      num-checks: ${{ steps.num-checks.outputs.num-checks }}
    runs-on: ubuntu-20.04
    steps:
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Wait for checks to register
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          while [ ${LEN_CHECKS} = "0" ]; do
            echo "No checks available yet"
            sleep 1
            LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          done
          echo "checks are valid"
          echo ${LEN_CHECKS}
          gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: wait-checks
        name: Wait for checks to complete
        run: gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number }}" --interval 90 --watch
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: num-checks
        name: Get Current Num Checks
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          echo "num-checks=${LEN_CHECKS}" >> $GITHUB_OUTPUT
  wait-for-release-checks:
    if: ${{ ! inputs.dry-run }}
    needs:
      - release-setup
      - wait-for-pr-checks
      - create-tag
    runs-on: ubuntu-20.04
    steps:
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Wait for checks to register
        run: |
          LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          while [ ${LEN_CHECKS} = "${{ needs.wait-for-pr-checks.outputs.num-checks }}" ]; do
            echo "No checks available yet"
            sleep 1
            LEN_CHECKS=$(gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup --jq '.statusCheckRollup | length');
          done
          echo "checks are valid"
          echo ${LEN_CHECKS}
          gh pr -R returntocorp/semgrep view "${{ needs.release-setup.outputs.pr-number }}" --json statusCheckRollup
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: wait-checks
        name: Wait for checks to complete
        run: gh pr -R returntocorp/semgrep checks "${{ needs.release-setup.outputs.pr-number }}" --interval 90 --watch
name: start-release
on:
  workflow_dispatch:
    inputs:
      bumpVersionFragment:
        default: feature
        description: Version fragment to bump
        options:
          - feature
          - bug
        required: true
        type: choice
      dry-run:
        default: false
        description: |
          Check the box for a dry-run - A dry-run will not push any external state
          (branches, tags, images, or PyPI packages).
        required: true
        type: boolean
permissions:
  contents: write
  id-token: write
