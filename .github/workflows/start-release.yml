name: Trigger Release

on:
  workflow_dispatch:
    inputs:
      bumpVersionFragment:
        description: "Version fragment to bump"
        required: true
        default: "feature"
        type: "choice"
        options:
          - "feature"
          - "bug"

jobs:
  release-setup:
    name: Setup Release Branch
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        id: checkout
        with:
          submodules: "recursive"
          ref: "${{ github.event.repository.default_branch }}"
      - name: Pull Tags
        id: pull-tags
        # We don't want a full heavyweight checkout with full history
        # checkout action only can get tags + full history, so do this separately.
        # Don't need tags in submodules.
        run: git fetch --no-recurse-submodules origin 'refs/tags/*:refs/tags/*'
      - name: Get latest version
        id: latest-version
        run: |
          LATEST_TAG=$(git tag --list "v*.*.*" | sort -V | tail -n 1 | cut -c 2- )
          echo ::set-output name=latest-version::${LATEST_TAG}
      - name: Bump release version
        id: next-version
        uses: christian-draeger/increment-semantic-version@9d04121fb4825e033aeeaaf6d42b44b8b4e81ac5
        with:
          current-version: "${{ steps.latest-version.outputs.latest-version }}"
          version-fragment: "${{ github.event.inputs.bumpVersionFragment }}"
      - name: Create release branch
        id: release-branch
        run: |
          RELEASE_BRANCH="release-${{ steps.next-version.outputs.next-version }}"
          git checkout -b ${RELEASE_BRANCH}
          echo ::set-output name=release-branch::${RELEASE_BRANCH}
      - name: Run `make release`
        id: make-release
        env:
          SEMGREP_RELEASE_NEXT_VERSION: ${{ steps.next-version.outputs.next-version }}
        run: make release
      - name: Push release branch
        id: push-release-branch
        env:
          SEMGREP_RELEASE_NEXT_VERSION: ${{ steps.next-version.outputs.next-version }}
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git add --all
          git commit -m "chore: Bump version to ${SEMGREP_RELEASE_NEXT_VERSION}"
          git push --set-upstream origin ${{ steps.release-branch.outputs.release-branch }}
      - name: Get JWT for r2c-argo GitHub App
        id: jwt
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
        env:
          EXPIRATION: 600 # seconds
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }} # semgrep-ci GitHub App id
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
      - name: Get token for semgrep-ci GitHub App
        id: token
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"
      - name: Create PR
        id: open-pr
        env:
          AUTH_HEADER: "Authorization: Bearer ${{ steps.token.outputs.token }}"
          HEADER: "Accept: application/vnd.github.v3+json"
          URL: "${{ github.event.repository.url }}/pulls"
          SOURCE: "${{ steps.release-branch.outputs.release-branch }}"
          TARGET: "${{ github.event.repository.default_branch }}"
          TITLE: "Release Version ${{ steps.next-version.outputs.next-version }}"
        run: |
          # check if the branch already has a pull request open
          DATA="{\"base\":\"${TARGET}\", \"head\":\"${SOURCE}\"}";
          RESPONSE=$(curl -sSL -H "${AUTH_HEADER}" -H "${HEADER}" -X GET --data "${DATA}" $URL);
          PR=$(echo "${RESPONSE}" | jq --raw-output '.[] | .head.ref');

          # GitHub REST API doesn't allow you to pass a template, so here we go
          BODY=$(cat ./.github/PULL_REQUEST_TEMPLATE/release_pr_template.md)

          if [[ "${PR}" == "${SOURCE}" ]]; then
              # pull request already open
              echo "pull request from SOURCE ${SOURCE} to TARGET ${TARGET} is already open";
              echo "cancelling release"
              exit 1
          else
              # open new pull request with the body of from the local template.
              # Use a bash parameter expansion with replacement on BODY since it contains newlines.
              DATA="{\"title\":\"${TITLE}\", \"body\":\"${BODY//$'\n'/'\n'}\", \"base\":\"${TARGET}\", \"head\":\"${SOURCE}\"}";
              curl -sSL -H "${AUTH_HEADER}" -H "${HEADER}" -X POST --data "${DATA}" $URL;
          fi
