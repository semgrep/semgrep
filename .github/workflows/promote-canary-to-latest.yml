# Workflow to manually promote the returntocorp/semgrep:canary docker image
# to returntocorp/semgrep:latest that most customers are using

name: Promote :canary to :latest

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: "Semgrep docker image to update"
        type: choice
        required: true
        options:
          - returntocorp/semgrep-test # testing image, we will eventually remove the option and hardcode to returntocorp/semgrep
          - returntocorp/semgrep
      debug:
        description: "Check to enable verbose logging of bash commands"
        type: boolean
        required: true
        default: false
      confirmed:
        description: "Are you sure you want to do this? This is a sensitive operation"
        type: boolean
        required: true
        default: false

jobs:
  promote:
    name: promote :canary to :latest
    runs-on: ubuntu-22.04
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: promote-canary-to-latest
        env:
          docker_image: ${{ inputs.docker_image }}
          confirmed: ${{ inputs.confirmed }}
          debug: ${{ inputs.debug }}
        run: |
          #
          # Promoting an image via Docker tags is typically done via:
          # docker pull source-image
          # docker tag source-image target-image
          # docker push target-image
          #
          # Sadly, this falls apart when dealing with multi-arch docker images. This is
          # because a multi-arch image (e.g. returntocorp/semgrep:latest) doesn't actually
          # point to a specific docker image manifest, but rather, a "manifest list" which
          # is effectively a mapping of OS architectures to actual docker image manifests.
          #
          # When `docker pull` encounters a manifest list, it implicitly grabs the
          # arch-specific image for the machine that's docker is running on, which means
          # that the subsequent tag and push will never push the multi-arch image.
          #
          # Instead, we use `docker buildx imagetools create` which only operates on
          # manifest lists. This allows us to point to a manifest list successfully
          #
          # For more info:
          # - manifest lists: https://docs.docker.com/registry/spec/manifest-v2-2/
          # - imagetools create: https://docs.docker.com/engine/reference/commandline/buildx_imagetools_create/

          if [[ "${debug}" == "true" ]]; then
            echo "Enabling debug logging..."
            set -x
          fi

          canary_digest=$(docker buildx imagetools inspect --format '{{printf "%s" .Manifest.Digest}}' ${docker_image}:canary || echo "")
          latest_digest=$(docker buildx imagetools inspect --format '{{printf "%s" .Manifest.Digest}}' ${docker_image}:latest || echo "(not set)")

          if [[ "${canary_digest}" == "" ]]; then
            echo "Error: ${docker_image}:canary did not resolve to a manifest list"
            echo "If this is urgent, you can manually login to our Docker Hub account and then run these commands to promote an arch-specific image:"
            echo "docker pull ${docker_image}:canary"
            echo "docker tag ${docker_image}:canary ${docker_image}:latest"
            echo "docker push ${docker_image}:latest"
            exit 1
          fi

          echo "Promoting ${docker_image}:canary (${canary_digest}) to ${docker_image}:latest (was ${latest_digest})"
          echo ""

          if [[ "${confirmed}" == "true" ]]; then
            docker buildx imagetools create -t ${docker_image}:latest ${docker_image}:canary
          else
            echo "(dry run)"
            docker buildx imagetools create --dry-run -t ${docker_image}:latest ${docker_image}:canary
            echo "(dry run)"
          fi
