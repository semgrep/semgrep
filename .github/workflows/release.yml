# AUTOGENERATED FROM release.jsonnet DO NOT MODIFY
name: release
"on":
  workflow_dispatch:
    inputs:
      dry-run:
        type: boolean
        description: "\n        Run the release in dry-run mode, e.g., without changing
          external\n        state (like pushing to PyPI/Docker/Homebrew)\n      "
        required: true
        default: false
  workflow_call:
    inputs:
      dry-run:
        type: boolean
        description: "\n        Run the release in dry-run mode, e.g., without changing
          external\n        state (like pushing to PyPI/Docker/Homebrew)\n      "
        required: true
        default: false
  push:
    tags:
    - v*
jobs:
  park-pypi-packages:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cli/
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: pipenv
    - run: sudo python3 -m pip install pipenv==2022.6.7
    - run: pipenv install --dev
    - name: Build parked packages
      run: pipenv run python setup.py park
    - name: Publish to Pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_upload_token }}
        skip_existing: true
        packages_dir: cli/dist/
    - name: Publish to test Pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository_url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.test_pypi_upload_token }}
        skip_existing: true
        packages_dir: cli/dist/
    if: ${{ ! inputs.dry-run }}
  build-test-docker:
    uses: ./.github/workflows/build-test-docker.yaml
    secrets: inherit
    with:
      docker-flavor: latest=false
      docker-tags: "\n      type=raw,value=canary\n      type=semver,pattern={{version}}\n
        \     type=semver,pattern={{major}}.{{minor}}\n    "
      repository-name: returntocorp/semgrep
      artifact-name: image-release
      file: Dockerfile
      target: semgrep-cli
      enable-tests: true
  build-test-docker-nonroot:
    uses: ./.github/workflows/build-test-docker.yaml
    secrets: inherit
    needs:
    - build-test-docker
    with:
      docker-flavor: "\n      suffix=-nonroot\n      latest=false\n    "
      docker-tags: "\n      type=raw,value=canary\n      type=semver,pattern={{version}}\n
        \     type=semver,pattern={{major}}.{{minor}}\n    "
      repository-name: returntocorp/semgrep
      artifact-name: image-release-nonroot
      file: Dockerfile
      target: nonroot
      enable-tests: false
  build-test-core-x86:
    uses: ./.github/workflows/build-test-core-x86.yml
    secrets: inherit
  build-test-osx-x86:
    uses: ./.github/workflows/build-test-osx-x86.yml
    secrets: inherit
  build-test-osx-arm64:
    uses: ./.github/workflows/build-test-osx-arm64.yml
    secrets: inherit
  build-test-manylinux-x86:
    needs:
    - build-test-core-x86
    uses: ./.github/workflows/build-test-manylinux-x86.yml
    secrets: inherit
  build-test-manylinux-aarch64:
    needs:
    - build-test-docker
    uses: ./.github/workflows/build-test-manylinux-aarch64.yml
    secrets: inherit
  wait-for-build-test:
    name: Wait for Build/Test All Platforms
    runs-on: ubuntu-22.04
    needs:
    - build-test-docker
    - build-test-docker-nonroot
    - build-test-manylinux-x86
    - build-test-manylinux-aarch64
    - build-test-osx-x86
    - build-test-osx-arm64
    steps:
    - name: Continue
      run: echo "All Platforms have been built and tested - proceeding!"
  push-docker-returntocorp:
    needs:
    - wait-for-build-test
    uses: ./.github/workflows/push-docker.yaml
    secrets: inherit
    with:
      artifact-name: image-release
      repository-name: returntocorp/semgrep
      dry-run: ${{ inputs.dry-run }}
  push-docker-returntocorp-nonroot:
    needs:
    - wait-for-build-test
    uses: ./.github/workflows/push-docker.yaml
    secrets: inherit
    with:
      artifact-name: image-release-nonroot
      repository-name: returntocorp/semgrep
      dry-run: ${{ inputs.dry-run }}
  push-docker-semgrep:
    needs:
    - wait-for-build-test
    uses: ./.github/workflows/push-docker.yaml
    secrets: inherit
    with:
      artifact-name: image-release
      repository-name: semgrep/semgrep
      dry-run: ${{ inputs.dry-run }}
  push-docker-semgrep-nonroot:
    needs:
    - wait-for-build-test
    uses: ./.github/workflows/push-docker.yaml
    secrets: inherit
    with:
      artifact-name: image-release-nonroot
      repository-name: semgrep/semgrep
      dry-run: ${{ inputs.dry-run }}
  upload-wheels:
    name: Upload Wheels to PyPI
    runs-on: ubuntu-latest
    needs:
    - wait-for-build-test
    steps:
    - name: Download manylinux-x86-wheel
      uses: actions/download-artifact@v3
      with:
        name: manylinux-x86-wheel
        path: manylinux-x86-wheel
    - name: Download manylinux-aarch64-wheel
      uses: actions/download-artifact@v3
      with:
        name: manylinux-aarch64-wheel
        path: manylinux-aarch64-wheel
    - name: Download osx-x86-wheel
      uses: actions/download-artifact@v3
      with:
        name: osx-x86-wheel
        path: osx-x86-wheel
    - name: Download osx-arm64-wheel
      uses: actions/download-artifact@v3
      with:
        name: osx-arm64-wheel
        path: osx-arm64-wheel
    - run: "\n       unzip ./manylinux-x86-wheel/dist.zip\n       unzip ./manylinux-aarch64-wheel/dist.zip
        \"*.whl\"\n       unzip ./osx-x86-wheel/dist.zip \"*.whl\"\n       unzip ./osx-arm64-wheel/dist.zip
        \"*.whl\"\n     "
    - name: Publish to Pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_upload_token }}
        skip_existing: true
      if: ${{ ! inputs.dry-run }}
  create-release:
    runs-on: ubuntu-latest
    needs:
    - wait-for-build-test
    steps:
    - name: Get the version
      id: get-version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - name: Wait for Draft Release if not Ready
      id: wait-draft-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: "\n        while ! gh release --repo returntocorp/semgrep list -L 5 | grep
        -q \"${{ steps.get-version.outputs.VERSION }}\"; do\n          echo \"release
        not yet ready, sleeping for 5 seconds\"\n          sleep 5\n        done\n
        \     "
    - name: Publish Release
      id: publish_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release --repo returntocorp/semgrep edit ${{ steps.get-version.outputs.VERSION
        }} --draft=false
    if: ${{ ! inputs.dry-run }}
  create-release-interfaces:
    runs-on: ubuntu-latest
    needs:
    - wait-for-build-test
    steps:
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - name: Get the version
      id: get-version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
    - uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ steps.token.outputs.token }}
    - name: Upload Schema Files
      id: upload-semgrep-schema-files
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh release --repo returntocorp/semgrep-interfaces upload ${{ steps.get-version.outputs.VERSION
        }} cli/src/semgrep/semgrep_interfaces/rule_schema_v1.yaml
    - name: Publish Release Semgrep Interfaces
      id: publish_release_semgrep_interfaces
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh release --repo returntocorp/semgrep-interfaces edit ${{ steps.get-version.outputs.VERSION
        }} --draft=false
    if: ${{ ! inputs.dry-run }}
