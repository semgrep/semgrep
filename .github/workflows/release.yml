# Create Draft Release
name: release

on:
  push:
    branches:
      # Sequence of patterns matched against refs/tags
      - "**-test-release"
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_release:
    name: Create the Github Release
    runs-on: ubuntu-latest
    needs: [upload-wheels, release-ubuntu-16-04]
    if: ${{ !contains(github.ref, '-test-release') }}
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      # wait for the draft release since these may not be ready after the refactor of the start-release.
      - name: Wait for Draft Release if not Ready
        id: wait-draft-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while ! gh release --repo returntocorp/semgrep list -L 5 | grep -q "${{ steps.get_version.outputs.VERSION }}"; do
            echo "release not yet ready, sleeping for 5 seconds"
            sleep 5
          done
      # OSX
      - uses: actions/download-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
          path: semgrep-osx
      - name: Compute checksum
        run: cat ./semgrep-osx/artifacts.zip | sha256sum > ./semgrep-osx/artifacts.zip.sha256
      - name: Upload Release Asset
        id: upload-release-asset-osx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp ./semgrep-osx/artifacts.zip semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip
          gh release upload ${{ steps.get_version.outputs.VERSION }} semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip
          rm semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip
      - name: Upload Release Checksum
        id: upload-checksum-asset-osx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp ./semgrep-osx/artifacts.zip.sha256 semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip.sha256
          gh release upload ${{ steps.get_version.outputs.VERSION }} semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip.sha256
          rm semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip.sha256

          ## UBUNTU
      - uses: actions/download-artifact@v3
        with:
          name: semgrep-ubuntu-16.04-${{ github.sha }}
          path: semgrep-ubuntu
      - name: Compute checksum
        run: cat ./semgrep-ubuntu/artifacts.tar.gz | sha256sum > ./semgrep-ubuntu/artifacts.tar.gz.sha256
      - name: Upload Release Asset
        id: upload-release-asset-ubuntu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp ./semgrep-ubuntu/artifacts.tar.gz semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz
          gh release upload ${{ steps.get_version.outputs.VERSION }} semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz
          rm semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz
      - name: Upload Release Checksum
        id: upload-release-checksum-ubuntu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp ./semgrep-ubuntu/artifacts.tar.gz.sha256 semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz.sha256
          gh release upload ${{ steps.get_version.outputs.VERSION }} semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz.sha256
          rm semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz.sha256
      - name: Publish Release
        id: publish_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit ${{ steps.get_version.outputs.VERSION }} --draft=false

  release-docker:
    name: Build and push Semgrep Docker image
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref,'-test-release') }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          load: true
          tags: candidate-image
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,dest=/tmp/.buildx-cache,mode=max

      - name: Checkout
        uses: actions/checkout@v3

      - name: Check the semgrep Docker image
        run: ./scripts/validate-docker-build.sh candidate-image

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - id: meta
        name: Set tags and labels
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          # :latest is also added automatically
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Push image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,src=/tmp/.buildx-cache
          cache-to: type=gha,dest=/tmp/.buildx-cache,mode=max

  build-core:
    name: semgrep-core make test and semgrep make test/qa-test
    runs-on: ubuntu-latest
    container: returntocorp/ocaml:alpine-2022-06-09
    steps:
      - name: Install pipenv
        run: sudo pip install pipenv==2022.6.7
      - name: Pre-checkout fixes
        run: |
          sudo chmod -R 777 /github
          github_cache_dir="/__w"
          sudo mkdir -p "$github_cache_dir"
          sudo chmod -R 777 "$github_cache_dir"
      - name: Make checkout speedy
        run: git config --global fetch.parallel 50
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Post-checkout fixes
        run: ./.github/post-checkout
      - name: Build semgrep-core
        run: ./scripts/install-alpine-semgrep-core
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ocaml-build-artifacts
          path: ocaml-build-artifacts.tgz
      - name: Test semgrep-core
        run: opam exec -- make -C semgrep-core test

  build-core-osx:
    name: Build the OSX binaries
    runs-on: macos-10.15
    steps:
      - name: Make checkout speedy
        run: git config --global fetch.parallel 50
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install pipenv
        run: sudo python3 -m pip install pipenv==2022.6.7
      - name: Run OSX release script
        run: ./scripts/osx-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
          path: artifacts.zip

  check-m1-build:
    name: Check build status for M1
    runs-on: ubuntu-latest
    outputs:
      m1_support: ${{ steps.my-key.outputs.defined }}
    steps:
      - id: my-key
        run: |
          if [[ "${{ secrets.M1_SUPPORT }}" == "1" ]]; \
          then
            echo "::set-output name=defined::true"
          else
            echo "::set-output name=defined::false"
          fi

  build-core-m1:
    name: Build the OSX M1 binaries
    needs: [check-m1-build]
    runs-on: [self-hosted, macOS, ARM64]
    if: ${{needs.check-m1-build.outputs.m1_support == 'true'}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Run OSX release script
        run: ./scripts/osx-m1-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-m1-${{ github.sha }}
          path: artifacts.zip

  release-ubuntu-16-04:
    runs-on: ubuntu-latest
    container: returntocorp/sgrep-build:ubuntu-16.04
    needs: [build-core]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts.tgz
          mkdir -p semgrep-files
          cp ocaml-build-artifacts/bin/* semgrep-files
      - name: Run Ubuntu build script
        run: ./scripts/ubuntu-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-ubuntu-16.04-${{ github.sha }}
          path: artifacts.tar.gz

  build-wheels-osx:
    runs-on: macos-10.15
    needs: [build-core-osx]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
      - name: Install artifacts
        run: unzip artifacts.zip
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          # This is just the Python version to build the wheels
          python-version: 3.7
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd cli'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: osx-wheel
          path: cli/dist.zip

  build-wheels-m1:
    runs-on: [self-hosted, macOS, ARM64]
    needs: [build-core-m1]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: semgrep-m1-${{ github.sha }}
      - name: Install artifacts
        run: unzip artifacts.zip
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd cli'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: m1-wheel
          path: cli/dist.zip

  build-wheels-manylinux:
    runs-on: ubuntu-latest
    container: returntocorp/sgrep-build:ubuntu-16.04
    needs: [build-core]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: tar xf ocaml-build-artifacts.tgz
      - name: Setup Python
        run: |
          rm /usr/bin/python
          ln `which python3.7` /usr/bin/python
      - name: Install zip & musl-tools
        run: apt-get update && apt install -y zip musl-tools
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd semgrep'
          SEMGREP_CORE_BIN: ../ocaml-build-artifacts/bin/semgrep-core
        run: ./scripts/build-wheels.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: manylinux-wheel
          path: cli/dist.zip

  test-wheels-manylinux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux1_x86_64
    needs: [build-wheels-manylinux]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: manylinux-wheel
      - name: unzip dist
        run: unzip ./manylinux-wheel/dist.zip
      - name: install package
        run: /opt/python/cp37-cp37m/bin/pip install dist/*.whl
      - name: test package
        working-directory: /opt/python/cp37-cp37m/bin/
        run: ./semgrep --version
      - name: e2e semgrep-core test
        working-directory: /opt/python/cp37-cp37m/bin/
        run: echo '1 == 1' | ./semgrep -l python -e '$X == $X' -
      - name: e2e spacegrep test
        working-directory: /opt/python/cp37-cp37m/bin/
        run: echo '1 == 1' | ./semgrep -l generic -e '$X == $X' -

  upload-wheels:
    runs-on: ubuntu-latest
    needs:
      [test-wheels-manylinux, build-wheels-osx, build-wheels-m1, check-m1-build]
    if: |
      always() &&
      (needs.build-wheels-m1.result == 'success' || needs.builds-wheels-m1.result == 'skipped')
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: manylinux-wheel
          path: manylinux-wheel
      - name: Download Osx Artifact
        uses: actions/download-artifact@v3
        with:
          name: osx-wheel
          path: osx-wheel
      - name: Download Artifact
        uses: actions/download-artifact@v3
        if: needs.check-m1-build.outputs.m1_support != ''
        with:
          name: m1-wheel
          path: m1-wheel
      - name: Unzip
        run: unzip ./manylinux-wheel/dist.zip
      - name: Unzip OSX Wheel
        # Don't unzip tar.gz because it already exists from ./manylinux-wheel/dist.zip.
        run: unzip ./osx-wheel/dist.zip "*.whl"
      - name: Unzip M1 Wheel
        if: needs.check-m1-build.outputs.m1_support != ''
        # Don't unzip tar.gz because it already exists from ./manylinux-wheel/dist.zip.
        run: unzip ./m1-wheel/dist.zip "*.whl"
      - name: Publish to Pypi
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ !contains(github.ref,'-test-release') }}
        with:
          user: __token__
          password: ${{ secrets.pypi_upload_token }}
          skip_existing: true
      - name: Publish to test Pypi
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ contains(github.ref,'-test-release') }}
        with:
          repository_url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.test_pypi_upload_token }}
          skip_existing: true

  park-pypi-packages:
    name: Park PyPI package names
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cli/
    env:
      SEMGREP_SKIP_BIN: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pipenv
      - name: Install pipenv
        run: sudo python3 -m pip install pipenv==2022.6.7
      - name: Install dependencies
        run: pipenv install --dev
      - name: Build parked packages
        run: pipenv run python setup.py park
      - name: Publish to Pypi
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ !contains(github.ref,'-test-release') }}
        with:
          user: __token__
          password: ${{ secrets.pypi_upload_token }}
          skip_existing: true
          packages_dir: cli/dist/
      - name: Publish to test Pypi
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ contains(github.ref,'-test-release') }}
        with:
          repository_url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.test_pypi_upload_token }}
          skip_existing: true
          packages_dir: cli/dist/

  sleep-before-homebrew:
    name: Sleep 10 min before releasing to homebrew
    # Need to wait for pypi to propagate ssince pipgrip relies on it being published on pypi
    needs: [upload-wheels]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref,'-test-release') }}
    steps:
      - name: Sleep 10 min
        run: sleep 10m

  homebrew-core-pr:
    name: Update on Homebrew-Core
    needs: [sleep-before-homebrew] # Needs to run after pypi released so brew can update pypi dependency hashes

    runs-on: macos-10.15
    if: ${{ !contains(github.ref,'-test-release') }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        id: python-setup
        with:
          # Pin to python 3.9 for pipgrip issues: see https://github.com/returntocorp/semgrep/issues/4213
          python-version: "3.9.x"
      - name: Brew update
        run: brew update
      - name: Install brew pipgrip
        run: brew install pipgrip
      - name: Install pip pipgrip
        run: pip install pipgrip
      - name: Point homebrew pipgrip to pip pipgrip
        # Homebrew brew calls brew pipgrip internally but brew pipgrip is pinned to python3.10
        # this tricks it into using our 3.9 pipgrip
        run: rm /usr/local/opt/pipgrip/bin/pipgrip && ln "/Users/runner/hostedtoolcache/Python/${{ steps.python-setup.outputs.python-version }}/x64/bin/pipgrip" /usr/local/opt/pipgrip/bin/pipgrip
      - uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_PR_TOKEN }}
          formula: semgrep
          org: returntocorp
          force: true
