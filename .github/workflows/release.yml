# AUTOGENERATED FROM release.jsonnet DO NOT MODIFY
name: release
"on":
  workflow_dispatch:
    inputs:
      dry-run:
        description: "\n        Run the release in dry-run mode, e.g., without changing
          external\n        state (like pushing to PyPI/Docker)\n      "
        required: true
        type: boolean
  workflow_call:
    inputs:
      dry-run:
        description: "\n        Run the release in dry-run mode, e.g., without changing
          external\n        state (like pushing to PyPI/Docker)\n      "
        required: true
        type: boolean
  push:
    branches:
    - '**-test-release'
    tags:
    - v*
jobs:
  inputs:
    runs-on: ubuntu-22.04
    outputs:
      dry-run: ${{steps.dry-run.outputs.dry-run}}
    steps:
    - name: Evaluate Dry Run
      id: dry-run
      run: "\n        if [[ \"${{ inputs.dry-run }}\" == \"true\" ]] || [[ \"${{ github.ref_name
        }}\" == *test* ]]; then\n          echo \"dry-run=true\" >> $GITHUB_OUTPUT\n
        \         echo \"Setting dry-run to TRUE\"\n        else\n          echo \"dry-run=false\"
        >> $GITHUB_OUTPUT\n          echo \"Setting dry-run to FALSE\"\n        fi\n
        \     "
  park-pypi-packages:
    name: Park PyPI package names
    runs-on: ubuntu-latest
    needs:
    - inputs
    defaults:
      run:
        working-directory: cli/
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: pipenv
    - run: sudo python3 -m pip install pipenv==2022.6.7
    - name: Install dependencies
      run: pipenv install --dev
    - name: Build parked packages
      run: pipenv run python setup.py park
    - name: Publish to Pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      if: ${{ !contains(github.ref,'-test-release') }}
      with:
        user: __token__
        password: ${{ secrets.pypi_upload_token }}
        skip_existing: true
        packages_dir: cli/dist/
    - name: Publish to test Pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      if: ${{ contains(github.ref,'-test-release') }}
      with:
        repository_url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.test_pypi_upload_token }}
        skip_existing: true
        packages_dir: cli/dist/
    if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
      != 'true' }}
  build-test-docker:
    uses: ./.github/workflows/build-test-docker.yaml
    secrets: inherit
    needs:
    - inputs
    with:
      docker-flavor: latest=false
      docker-tags: "\n      type=raw,value=canary\n      type=semver,pattern={{version}}\n
        \     type=semver,pattern={{major}}.{{minor}}\n    "
      repository-name: returntocorp/semgrep
      artifact-name: image-release
      file: Dockerfile
      target: semgrep-cli
      enable-tests: true
  build-test-docker-nonroot:
    uses: ./.github/workflows/build-test-docker.yaml
    secrets: inherit
    needs:
    - inputs
    - build-test-docker
    with:
      docker-flavor: "\n      suffix=-nonroot\n      latest=false\n    "
      docker-tags: "\n      type=raw,value=canary\n      type=semver,pattern={{version}}\n
        \     type=semver,pattern={{major}}.{{minor}}\n    "
      repository-name: returntocorp/semgrep
      artifact-name: image-release-nonroot
      file: Dockerfile
      target: nonroot
      enable-tests: false
  build-test-core-x86:
    uses: ./.github/workflows/build-test-core-x86.yml
    secrets: inherit
  build-test-osx-x86:
    uses: ./.github/workflows/build-test-osx-x86.yml
    secrets: inherit
  build-test-osx-arm64:
    uses: ./.github/workflows/build-test-osx-arm64.yml
    secrets: inherit
  build-test-manylinux-x86:
    needs:
    - build-test-core-x86
    uses: ./.github/workflows/build-test-manylinux-x86.yml
    secrets: inherit
  build-test-manylinux-aarch64:
    needs:
    - build-test-docker
    uses: ./.github/workflows/build-test-manylinux-aarch64.yml
    secrets: inherit
  wait-for-build-test:
    name: Wait for Build/Test All Platforms
    runs-on: ubuntu-22.04
    needs:
    - build-test-docker
    - build-test-docker-nonroot
    - build-test-manylinux-x86
    - build-test-manylinux-aarch64
    - build-test-osx-x86
    - build-test-osx-arm64
    steps:
    - name: Continue
      run: echo "All Platforms have been built and tested - proceeding!"
  push-docker:
    needs:
    - wait-for-build-test
    - inputs
    uses: ./.github/workflows/push-docker.yaml
    secrets: inherit
    with:
      artifact-name: image-release
      repository-name: returntocorp/semgrep
      dry-run: ${{ needs.inputs.outputs.dry-run == 'true' }}
  push-docker-nonroot:
    needs:
    - wait-for-build-test
    - inputs
    uses: ./.github/workflows/push-docker.yaml
    secrets: inherit
    with:
      artifact-name: image-release-nonroot
      repository-name: returntocorp/semgrep
      dry-run: ${{ needs.inputs.outputs.dry-run == 'true' }}
  upload-wheels:
    name: Upload Wheels to PyPI
    runs-on: ubuntu-latest
    needs:
    - wait-for-build-test
    - inputs
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: manylinux-x86-wheel
        path: manylinux-x86-wheel
    - name: Download aarch64 Artifact
      uses: actions/download-artifact@v3
      with:
        name: manylinux-aarch64-wheel
        path: manylinux-aarch64-wheel
    - name: Download OSX x86 Artifact
      uses: actions/download-artifact@v3
      with:
        name: osx-x86-wheel
        path: osx-x86-wheel
    - name: Download OSX ARM64 Artifact
      uses: actions/download-artifact@v3
      with:
        name: osx-arm64-wheel
        path: osx-arm64-wheel
    - name: Unzip x86_64 Wheel
      run: unzip ./manylinux-x86-wheel/dist.zip
    - name: Unzip aarch64 Wheel
      run: unzip ./manylinux-aarch64-wheel/dist.zip "*.whl"
    - name: Unzip OSX x86 Wheel
      run: unzip ./osx-x86-wheel/dist.zip "*.whl"
    - name: Unzip OSX ARM64 Wheel
      run: unzip ./osx-arm64-wheel/dist.zip "*.whl"
    - name: Publish to Pypi
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_upload_token }}
        skip_existing: true
      if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
        != 'true' }}
  create-release:
    name: Create the Github Release
    runs-on: ubuntu-latest
    needs:
    - wait-for-build-test
    - inputs
    steps:
    - name: Get the version
      id: get-version
      run: echo "VERSION=${GITHUB_REF/refs\\/tags\\//}" >> $GITHUB_OUTPUT
    - name: Wait for Draft Release if not Ready
      id: wait-draft-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: "\n        while ! gh release --repo returntocorp/semgrep list -L 5 | grep
        -q \"${{ steps.get-version.outputs.VERSION }}\"; do\n          echo \"release
        not yet ready, sleeping for 5 seconds\"\n          sleep 5\n        done\n
        \     "
    - name: Publish Release
      id: publish_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release --repo returntocorp/semgrep edit ${{ steps.get-version.outputs.VERSION
        }} --draft=false
    if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
      != 'true' }}
  create-release-interfaces:
    name: Create the Github Release on Semgrep Interfaces
    runs-on: ubuntu-latest
    needs:
    - wait-for-build-test
    - inputs
    steps:
    - name: Get the version
      id: get-version
      run: echo "VERSION=${GITHUB_REF/refs\\/tags\\//}" >> $GITHUB_OUTPUT
    - name: Get JWT for semgrep-ci GitHub App
      id: jwt
      uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      env:
        EXPIRATION: 600
        ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
        PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
    - name: Get token for semgrep-ci GitHub App
      id: token
      run: "\n      TOKEN=\"$(curl -X POST \\\n      -H \"Authorization: Bearer ${{
        steps.jwt.outputs.jwt }}\" \\\n      -H \"Accept: application/vnd.github.v3+json\"
        \\\n      \"https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID
        }}/access_tokens\" | \\\n      jq -r .token)\"\n      echo \"::add-mask::$TOKEN\"\n
        \     echo \"token=$TOKEN\" >> $GITHUB_OUTPUT\n    "
    - uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ steps.token.outputs.token }}
    - name: Upload Schema Files
      id: upload-semgrep-schema-files
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh release --repo returntocorp/semgrep-interfaces upload ${{ steps.get-version.outputs.VERSION
        }} cli/src/semgrep/semgrep_interfaces/rule_schema_v1.yaml
    - name: Publish Release Semgrep Interfaces
      id: publish_release_semgrep_interfaces
      env:
        GITHUB_TOKEN: ${{ steps.token.outputs.token }}
      run: gh release --repo returntocorp/semgrep-interfaces edit ${{ steps.get-version.outputs.VERSION
        }} --draft=false
    if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
      != 'true' }}
  sleep-before-homebrew:
    name: Sleep 10 min before releasing to homebrew
    needs:
    - inputs
    - upload-wheels
    runs-on: ubuntu-latest
    steps:
    - name: Sleep 10 min
      run: sleep 10m
      if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
        != 'true' }}
  homebrew-core-pr:
    name: Update on Homebrew-Core
    needs:
    - inputs
    - sleep-before-homebrew
    runs-on: macos-12
    steps:
    - name: Get the version
      id: get-version
      run: "\n        TAG=${GITHUB_REF/refs\\/tags\\//}\n        if [ \"${{ needs.inputs.outputs.dry-run
        }}\" = \"true\" ]; then\n          TAG=v99.99.99\n        fi\n        echo
        \"Using TAG=${TAG}\"\n        echo \"TAG=${TAG}\" >> $GITHUB_OUTPUT\n        echo
        \"Using VERSION=${TAG#v}\"\n        echo \"VERSION=${TAG#v}\" >> $GITHUB_OUTPUT\n
        \     "
    - uses: actions/setup-python@v4
      id: python-setup
      with:
        python-version: "3.10"
    - run: brew update
    - name: Dry Run Brew PR
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.SEMGREP_HOMEBREW_RELEASE_PAT }}
      run: "\n        brew bump-formula-pr --force --no-audit --no-browse --write-only
        \\\n          --message=\"semgrep 99.99.99\" \\\n          --tag=\"v99.99.99\"
        --revision=\"${GITHUB_SHA}\" semgrep --python-exclude-packages semgrep\n      "
      if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
        != 'true' }}
    - name: Open Brew PR
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.SEMGREP_HOMEBREW_RELEASE_PAT }}
      run: "\n        brew bump-formula-pr --force --no-audit --no-browse --write-only
        \\\n          --message=\"semgrep ${{ steps.get-version.outputs.VERSION }}\"
        \\\n          --tag=\"${{ steps.get-version.outputs.TAG }}\" semgrep\n      "
      if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
        != 'true' }}
    - name: Prepare Branch
      env:
        GITHUB_TOKEN: ${{ secrets.SEMGREP_HOMEBREW_RELEASE_PAT }}
        R2C_HOMEBREW_CORE_FORK_HTTPS_URL: https://github.com/semgrep-release/homebrew-core.git
      run: "\n        cd \"$(brew --repository)/Library/Taps/homebrew/homebrew-core\"\n
        \       git status\n        git diff\n        git config user.name ${{ github.actor
        }}\n        git config user.email ${{ github.actor }}@users.noreply.github.com\n
        \       gh auth setup-git\n        git remote add r2c \"${R2C_HOMEBREW_CORE_FORK_HTTPS_URL}\"\n
        \       git checkout -b bump-semgrep-${{ steps.get-version.outputs.VERSION
        }}\n        git add Formula/s/semgrep.rb\n        git commit -m \"semgrep
        ${{ steps.get-version.outputs.VERSION }}\"\n      "
    - name: Push Branch to Fork
      env:
        GITHUB_TOKEN: ${{ secrets.SEMGREP_HOMEBREW_RELEASE_PAT }}
      run: "\n        cd \"$(brew --repository)/Library/Taps/homebrew/homebrew-core\"\n
        \       git push --set-upstream r2c --force \"bump-semgrep-${{ steps.get-version.outputs.VERSION
        }}\"\n      "
      if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
        != 'true' }}
    - name: Push to Fork
      env:
        GITHUB_TOKEN: ${{ secrets.SEMGREP_HOMEBREW_RELEASE_PAT }}
        R2C_HOMEBREW_CORE_OWNER: semgrep-release
      run: "\n        gh pr create --repo homebrew/homebrew-core \\\n          --base
        master --head \"${R2C_HOMEBREW_CORE_OWNER}:bump-semgrep-${{ steps.get-version.outputs.VERSION
        }}\" \\\n          --title=\"semgrep ${{ steps.get-version.outputs.VERSION
        }}\" \\\n          --body \"Bump semgrep to version ${{ steps.get-version.outputs.VERSION
        }}\"\n      "
      if: ${{ !contains(github.ref, '-test-release') && needs.inputs.outputs.dry-run
        != 'true' }}
