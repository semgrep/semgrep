# Create Draft Release
name: release

on:
  push:
    branches:
      # Sequence of patterns matched against refs/tags
      - "**-test-release"
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_release:
    name: Create the Github Release
    runs-on: ubuntu-latest
    needs: [upload-wheels, release-ubuntu-16-04]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

          # OSX
      - uses: actions/download-artifact@v1
        with:
          name: semgrep-osx-${{ github.sha }}
          path: semgrep-osx
      - name: Compute checksum
        run: cat ./semgrep-osx/artifacts.zip | sha256sum > ./semgrep-osx/artifacts.zip.sha256
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Upload Release Asset
        id: upload-release-asset-osx
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./semgrep-osx/artifacts.zip
          asset_name: semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip
          asset_content_type: application/zip
      - name: Upload Release Checksum
        id: upload-checksum-asset-osx
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./semgrep-osx/artifacts.zip.sha256
          asset_name: semgrep-${{ steps.get_version.outputs.VERSION }}-osx.zip.sha256
          asset_content_type: application/zip

          ## UBUNTU
      - uses: actions/download-artifact@v1
        with:
          name: semgrep-ubuntu-16.04-${{ github.sha }}
          path: semgrep-ubuntu
      - name: Compute checksum
        run: cat ./semgrep-ubuntu/artifacts.tar.gz | sha256sum > ./semgrep-ubuntu/artifacts.tar.gz.sha256
      - name: Upload Release Asset
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./semgrep-ubuntu/artifacts.tar.gz
          asset_name: semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz
          asset_content_type: application/gzip
      - name: Upload Release Checksum
        id: upload-release-checksum-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./semgrep-ubuntu/artifacts.tar.gz.sha256
          asset_name: semgrep-${{ steps.get_version.outputs.VERSION }}-ubuntu-16.04.tgz.sha256
          asset_content_type: application/gzip

  release-docker:
    name: Build and Push Semgrep Docker Container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Get the version without leading v
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      - name: build-and-push
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: returntocorp/semgrep
          tags: ${{ steps.get_version.outputs.VERSION }}, latest

  build-core:
    name: semgrep-core make test and semgrep make test/qa-test
    runs-on: ubuntu-latest
    container: returntocorp/ocaml:alpine
    steps:
      - name: Install pipenv
        run: sudo pip install pipenv
      - name: Pre-checkout fixes
        run: |
          sudo chmod -R 777 /github
          github_cache_dir="/__w"
          sudo mkdir -p "$github_cache_dir"
          sudo chmod -R 777 "$github_cache_dir"
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Post-checkout fixes
        run: ./.github/post-checkout
      - name: Build semgrep-core
        run: ./scripts/install-alpine-semgrep-core
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ocaml-build-artifacts
          path: ocaml-build-artifacts.tgz
      - name: Test semgrep-core
        run: opam exec -- make -C semgrep-core test

  build-core-osx:
    name: Build the OSX binaries
    runs-on: macos-10.15
    steps:
      - name: Install pipenv
        run: sudo python3 -m pip install pipenv
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v1
      - name: Run OSX release script
        run: ./scripts/osx-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: semgrep-osx-${{ github.sha }}
          path: artifacts.zip

  release-ubuntu-16-04:
    runs-on: ubuntu-latest
    container: returntocorp/sgrep-build:ubuntu-16.04
    needs: [build-core]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts/ocaml-build-artifacts.tgz
          mkdir -p semgrep-files
          cp ocaml-build-artifacts/bin/* semgrep-files
      - name: Run Ubuntu build script
        run: ./scripts/ubuntu-release.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: semgrep-ubuntu-16.04-${{ github.sha }}
          path: artifacts.tar.gz

  build-wheels-osx:
    runs-on: macos-10.15
    needs: [build-core-osx]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: semgrep-osx-${{ github.sha }}
      - name: Install artifacts
        run: unzip semgrep-osx-${{ github.sha }}/artifacts.zip
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          # This is just the Python version to build the wheels
          python-version: 3.7
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd semgrep'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: osx-wheel
          path: semgrep/dist.zip

  build-wheels-manylinux:
    runs-on: ubuntu-latest
    container: returntocorp/sgrep-build:ubuntu-16.04
    needs: [build-core]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: tar xf ocaml-build-artifacts/ocaml-build-artifacts.tgz
      - name: Setup Python
        run: |
          rm /usr/bin/python
          ln `which python3.7` /usr/bin/python
      - name: Install zip & musl-tools
        run: apt-get update && apt install -y zip musl-tools
      - name: Build the wheels
        env:
          # Relative because build-wheels does a 'cd semgrep'
          SEMGREP_CORE_BIN: ../ocaml-build-artifacts/bin/semgrep-core
        run: ./scripts/build-wheels.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: manylinux-wheel
          path: semgrep/dist.zip

  test-wheels-manylinux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux1_x86_64
    needs: [build-wheels-manylinux]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: manylinux-wheel
          path: manylinux-wheel
      - name: unzip dist
        run: unzip ./manylinux-wheel/dist.zip
      - name: install package
        run: /opt/python/cp36-cp36m/bin/pip install dist/*.whl
      - name: test package
        working-directory: /opt/python/cp36-cp36m/bin/
        run: ./semgrep --version
      - name: e2e semgrep-core test
        working-directory: /opt/python/cp36-cp36m/bin/
        run: echo '1 == 1' | ./semgrep -l python -e '$X == $X' -
      - name: e2e spacegrep test
        working-directory: /opt/python/cp36-cp36m/bin/
        run: echo '1 == 1' | ./semgrep -l generic -e '$X == $X' -

  upload-wheels:
    runs-on: ubuntu-latest
    needs: [test-wheels-manylinux, build-wheels-osx]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: manylinux-wheel
          path: manylinux-wheel
      - name: Download Osx Artifact
        uses: actions/download-artifact@v1
        with:
          name: osx-wheel
          path: osx-wheel
      - name: Unzip
        run: unzip ./manylinux-wheel/dist.zip
      - name: Unzip OSX Wheel
        # Don't unzip tar.gz because it already exists from ./manylinux-wheel/dist.zip.
        run: unzip ./osx-wheel/dist.zip "*.whl"
      - name: Publish to Pypi
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_upload_token }}
          skip_existing: true

  sleep-before-homebrew:
    name: Sleep 10 min before releasing to homebrew
    # Need to wait for pypi to propagate ssince pipgrip relies on it being published on pypi
    needs: [upload-wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Sleep 10 min
        run: sleep 10m

  homebrew-core-pr:
    name: Update on Homebrew-Core
    needs: [sleep-before-homebrew] # Needs to run after pypi released so brew can update pypi dependency hashes
    runs-on: macos-10.15
    steps:
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          # Needs to be < 3.10 see https://github.com/returntocorp/semgrep/issues/4213
          python-version: 3.9.10
      - name: Brew update
        run: brew update
      - name: Install brew pipgrip
        run: brew install pipgrip
      - name: Install pip pipgrip
        run: pip install pipgrip
      - name: Point homebrew pipgrip to pip pipgrip
        # Homebrew brew calls brew pipgrip internally but brew pipgrip is pinned to python3.10
        # this tricks it into using our 3.9 pipgrip
        run: rm /usr/local/opt/pipgrip/bin/pipgrip && ln /Users/runner/hostedtoolcache/Python/3.9.10/x64/bin/pipgrip /usr/local/opt/pipgrip/bin/pipgrip
      - uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_PR_TOKEN }}
          formula: semgrep
          org: returntocorp
          force: true
