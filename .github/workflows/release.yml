# AUTOGENERATED FROM release.jsonnet DO NOT MODIFY
jobs:
  build-test-core-x86:
    secrets: inherit
    uses: ./.github/workflows/build-test-core-x86.yml
  build-test-docker:
    secrets: inherit
    uses: ./.github/workflows/build-test-docker.yaml
    with:
      artifact-name: image-release
      docker-flavor: latest=false
      docker-tags: |
        type=raw,value=canary
        type=semver,pattern={{version}}
        type=semver,pattern={{major}}.{{minor}}
      enable-tests: true
      file: Dockerfile
      repository-name: returntocorp/semgrep
      target: semgrep-cli
  build-test-docker-nonroot:
    needs:
      - build-test-docker
    secrets: inherit
    uses: ./.github/workflows/build-test-docker.yaml
    with:
      artifact-name: image-release-nonroot
      docker-flavor: |
        suffix=-nonroot
        latest=false
      docker-tags: |
        type=raw,value=canary
        type=semver,pattern={{version}}
        type=semver,pattern={{major}}.{{minor}}
      enable-tests: false
      file: Dockerfile
      repository-name: returntocorp/semgrep
      target: nonroot
  build-test-manylinux-aarch64:
    needs:
      - build-test-docker
    secrets: inherit
    uses: ./.github/workflows/build-test-manylinux-aarch64.yml
  build-test-manylinux-x86:
    needs:
      - build-test-core-x86
    secrets: inherit
    uses: ./.github/workflows/build-test-manylinux-x86.yml
  build-test-osx-arm64:
    secrets: inherit
    uses: ./.github/workflows/build-test-osx-arm64.yml
  build-test-osx-x86:
    secrets: inherit
    uses: ./.github/workflows/build-test-osx-x86.yml
  create-release:
    if: ${{ ! inputs.dry-run }}
    needs:
      - wait-for-build-test
    runs-on: ubuntu-latest
    steps:
      - id: get-version
        name: Get the version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: wait-draft-release
        name: Wait for Draft Release if not Ready
        run: |
          while ! gh release --repo returntocorp/semgrep list -L 5 | grep -q "${{ steps.get-version.outputs.VERSION }}"; do
            echo "release not yet ready, sleeping for 5 seconds"
            sleep 5
          done
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: publish_release
        name: Publish Release
        run: gh release --repo returntocorp/semgrep edit ${{ steps.get-version.outputs.VERSION }} --draft=false
  create-release-interfaces:
    if: ${{ ! inputs.dry-run }}
    needs:
      - wait-for-build-test
    runs-on: ubuntu-latest
    steps:
      - env:
          EXPIRATION: 600
          ISSUER: ${{ secrets.SEMGREP_CI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.SEMGREP_CI_APP_KEY }}
        id: jwt
        name: Get JWT for semgrep-ci GitHub App
        uses: docker://public.ecr.aws/y9k7q4m1/devops/cicd:latest
      - id: token
        name: Get token for semgrep-ci GitHub App
        run: |
          TOKEN="$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.jwt.outputs.jwt }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/app/installations/${{ secrets.SEMGREP_CI_APP_INSTALLATION_ID }}/access_tokens" | \
          jq -r .token)"
          echo "::add-mask::$TOKEN"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
      - id: get-version
        name: Get the version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ steps.token.outputs.token }}
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        id: upload-semgrep-schema-files
        name: Upload Schema Files
        run: gh release --repo returntocorp/semgrep-interfaces upload ${{ steps.get-version.outputs.VERSION }} cli/src/semgrep/semgrep_interfaces/rule_schema_v1.yaml
      - env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        id: publish_release_semgrep_interfaces
        name: Publish Release Semgrep Interfaces
        run: gh release --repo returntocorp/semgrep-interfaces edit ${{ steps.get-version.outputs.VERSION }} --draft=false
  park-pypi-packages:
    defaults:
      run:
        working-directory: cli/
    if: ${{ ! inputs.dry-run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pipenv
          python-version: "3.10"
      - run: sudo python3 -m pip install pipenv==2022.6.7
      - run: pipenv install --dev
      - name: Build parked packages
        run: pipenv run python setup.py park
      - name: Publish to Pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: cli/dist/
          password: ${{ secrets.pypi_upload_token }}
          skip_existing: true
          user: __token__
      - name: Publish to test Pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: cli/dist/
          password: ${{ secrets.test_pypi_upload_token }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          user: __token__
  push-docker-returntocorp:
    needs:
      - wait-for-build-test
    secrets: inherit
    uses: ./.github/workflows/push-docker.yaml
    with:
      artifact-name: image-release
      dry-run: ${{ inputs.dry-run || false }}
      repository-name: returntocorp/semgrep
  push-docker-returntocorp-nonroot:
    needs:
      - wait-for-build-test
    secrets: inherit
    uses: ./.github/workflows/push-docker.yaml
    with:
      artifact-name: image-release-nonroot
      dry-run: ${{ inputs.dry-run || false }}
      repository-name: returntocorp/semgrep
  push-docker-semgrep:
    needs:
      - wait-for-build-test
    secrets: inherit
    uses: ./.github/workflows/push-docker.yaml
    with:
      artifact-name: image-release
      dry-run: ${{ inputs.dry-run || false }}
      repository-name: semgrep/semgrep
  push-docker-semgrep-nonroot:
    needs:
      - wait-for-build-test
    secrets: inherit
    uses: ./.github/workflows/push-docker.yaml
    with:
      artifact-name: image-release-nonroot
      dry-run: ${{ inputs.dry-run || false }}
      repository-name: semgrep/semgrep
  upload-wheels:
    name: Upload Wheels to PyPI
    needs:
      - wait-for-build-test
    runs-on: ubuntu-latest
    steps:
      - name: Download manylinux-x86-wheel
        uses: actions/download-artifact@v3
        with:
          name: manylinux-x86-wheel
          path: manylinux-x86-wheel
      - name: Download manylinux-aarch64-wheel
        uses: actions/download-artifact@v3
        with:
          name: manylinux-aarch64-wheel
          path: manylinux-aarch64-wheel
      - name: Download osx-x86-wheel
        uses: actions/download-artifact@v3
        with:
          name: osx-x86-wheel
          path: osx-x86-wheel
      - name: Download osx-arm64-wheel
        uses: actions/download-artifact@v3
        with:
          name: osx-arm64-wheel
          path: osx-arm64-wheel
      - run: |
          unzip ./manylinux-x86-wheel/dist.zip
          unzip ./manylinux-aarch64-wheel/dist.zip "*.whl"
          unzip ./osx-x86-wheel/dist.zip "*.whl"
          unzip ./osx-arm64-wheel/dist.zip "*.whl"
      - if: ${{ ! inputs.dry-run }}
        name: Publish to Pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_upload_token }}
          skip_existing: true
          user: __token__
  wait-for-build-test:
    name: Wait for Build/Test All Platforms
    needs:
      - build-test-docker
      - build-test-docker-nonroot
      - build-test-manylinux-x86
      - build-test-manylinux-aarch64
      - build-test-osx-x86
      - build-test-osx-arm64
    runs-on: ubuntu-22.04
    steps:
      - name: Continue
        run: echo "All Platforms have been built and tested - proceeding!"
name: release
"on":
  push:
    tags:
      - v*
  workflow_call:
    inputs:
      dry-run:
        description: |
          Run the release in dry-run mode, e.g., without changing external
          state (like pushing to PyPI/Docker/Homebrew)
        required: true
        type: boolean
  workflow_dispatch:
    inputs:
      dry-run:
        description: |
          Run the release in dry-run mode, e.g., without changing external
          state (like pushing to PyPI/Docker/Homebrew)
        required: true
        type: boolean
