# This workflow builds and tests the semgrep-core binary for macOS X86
# and generates osx-wheel for pypi.

# coupling: if you modify this file, modify also build-test-osx-m1.yaml
name: build-test-osx-x86

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-core-osx:
    name: Build the OSX binaries
    runs-on: [self-hosted, macOS, X64]
    steps:
      # see the comment in build-test-osx-m1.yaml why we need this step
      - name: Clean Checkout
        run: |
          rm -rf ./*
          rm -f .gitmodules
          rm -rf .git
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: |
          ./scripts/osx-setup-for-release.sh
          opam exec -- make core
          mkdir -p artifacts
          cp ./bin/semgrep-core artifacts
          zip -r artifacts.zip artifacts
      - uses: actions/upload-artifact@v3
        with:
          path: artifacts.zip
          name: semgrep-osx-${{ github.sha }}

  build-wheels-osx:
    runs-on: macos-12
    needs: [build-core-osx]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/download-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
      - run: unzip artifacts.zip
      - env:
          # Relative because build-wheels does a 'cd cli'
          SEMGREP_CORE_BIN: ../artifacts/semgrep-core
        run: ./scripts/build-wheels.sh
      - uses: actions/upload-artifact@v3
        with:
          path: cli/dist.zip
          name: osx-wheel

  test-wheels-osx:
    runs-on: macos-12
    needs: [build-wheels-osx]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: osx-wheel
      - run: unzip ./osx-wheel/dist.zip
      - name: install package
        run: pip3 install dist/*.whl
      - run: semgrep --version
      - name: e2e semgrep-core test
        run: echo '1 == 1' | semgrep --debug -l python -e '$X == $X' -
      - name: test dynamically linked libraries are in /usr/lib/
        shell: bash {0}
        run: |
          otool -L $(semgrep --dump-engine-path) > otool.txt
          if [ $? -ne 0 ]; then
            echo "Failed to list dynamically linked libraries.";
            cat otool.txt;
            exit 1;
          fi
          NON_USR_LIB_DYNAMIC_LIBRARIES=$(cat otool.txt | tail -n +2 | grep -v "^\s*/usr/lib/")
          if [ $? -eq 0 ]; then
            echo "Error: semgrep-core has been dynamically linked against libraries outside /usr/lib:"
            echo $NON_USR_LIB_DYNAMIC_LIBRARIES
            exit 1;
          fi;
