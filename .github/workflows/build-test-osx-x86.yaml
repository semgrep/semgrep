# This workflow builds and tests the semgrep-core binary for macOS X86
# and generates osx-wheel for pypi.

# This workflow will cache the ~/.opam directory, which is different from what we
# do for our other architecture's build processes.
# This workflow runs on GHA-hosted runners and without caching it would run
# very slowly (like 35min instead of 10min). The Linux build process uses a special
# container (returntocorp/ocaml:alpine-xxx) to bring in the required dependencies,
# and the M1 build runs on a self-hosted machine where caching isn't necessary.
#
# TODO? If this experiment goes well, we might want to use this ~/.opam caching
# technique also for M1, and maybe even get rid of our returntocorp/ocaml:alpine-xxx
# container.
# TODO? we might want to use opam.lock as a key so any update to our dependencies
# would automatically trigger a cache miss and generating a fresh ~/.opam.
#
# To update to a new version of OCaml, we can switch out `OPAM_SWITCH_NAME` var
# which will update the cache key, and lead to a cache miss on the new builds.

# coupling: if you modify this file, modify also build-test-osx-m1.yaml
name: build-test-osx-x86

on:
  workflow_dispatch:
    inputs:
      use-cache:
        description: "Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build."
        required: true
        type: boolean
        default: true
  workflow_call:
    inputs:
      use-cache:
        description: "Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build."
        required: false
        type: boolean
        default: true

jobs:
  build-core-osx:
    name: Build the OSX binaries
    runs-on: macos-12
    env:
      # This name is used in the cache key. If we update to a newer version of
      # ocaml, we'll want to change the OPAM_SWITCH_NAME as well to avoid issues
      # with caching.
      OPAM_SWITCH_NAME: "4.14.0"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      # Note that this action handles both cache read and cache write.
      # TODO? When are things cached? this will save ~/.opam after the
      # next step or at the end of the full job?
      # TODO? Should we use instead the actions/cache/save@v3 and
      # actions/cache/restore@v3 instead like in build-test-javascript.yaml?
      - name: Cache Opam
        id: cache-opam
        uses: actions/cache@v3
        if: ${{ inputs.use-cache }}
        with:
          path: ~/.opam
          #TODO: we should add the md5sum of opam.lock as part of the key
          key: "${{ runner.os }}-${{ runner.arch }}-${{ env.OPAM_SWITCH_NAME }}-opam-deps"
      - name: Install dependencies
        run: |
          ./scripts/osx-setup-for-release.sh "${{ env.OPAM_SWITCH_NAME }}"
      - name: Compile semgrep
        run: |
          opam exec -- make core
          mkdir -p artifacts
          cp ./bin/semgrep-core artifacts
          zip -r artifacts.zip artifacts
      - uses: actions/upload-artifact@v3
        with:
          path: artifacts.zip
          name: semgrep-osx-${{ github.sha }}

  build-wheels-osx:
    runs-on: macos-12
    needs: [build-core-osx]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/download-artifact@v3
        with:
          name: semgrep-osx-${{ github.sha }}
      - run: |
          unzip artifacts.zip
          cp artifacts/semgrep-core cli/src/semgrep/bin
          ./scripts/build-wheels.sh
      - uses: actions/upload-artifact@v3
        with:
          path: cli/dist.zip
          name: osx-wheel

  test-wheels-osx:
    runs-on: macos-12
    needs: [build-wheels-osx]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: osx-wheel
      - run: unzip ./osx-wheel/dist.zip
      - name: install package
        run: pip3 install dist/*.whl
      - run: semgrep --version
      - name: e2e semgrep-core test
        run: echo '1 == 1' | semgrep --debug -l python -e '$X == $X' -
      - name: test dynamically linked libraries are in /usr/lib/
        shell: bash {0}
        run: |
          otool -L $(semgrep --dump-engine-path) > otool.txt
          if [ $? -ne 0 ]; then
            echo "Failed to list dynamically linked libraries.";
            cat otool.txt;
            exit 1;
          fi
          NON_USR_LIB_DYNAMIC_LIBRARIES=$(cat otool.txt | tail -n +2 | grep -v "^\s*/usr/lib/")
          if [ $? -eq 0 ]; then
            echo "Error: semgrep-core has been dynamically linked against libraries outside /usr/lib:"
            echo $NON_USR_LIB_DYNAMIC_LIBRARIES
            exit 1;
          fi;
