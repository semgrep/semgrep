name: build-test-manylinux-aarch64

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-wheel:
    name: Build and test Semgrep python wheel
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v3
      - uses: depot/setup-action@v1
      - name: Build and test python wheel
        id: build-semgrep-wheel
        uses: depot/build-push-action@v1.8.0
        with:
          project: fhmxj6w9z8
          platforms: linux/arm64
          outputs: type=docker,dest=/tmp/image.tar
          target: semgrep-wheel
          buildx-fallback: true
      - name: Extract wheel from docker image
        run: |
          # load the docker image containing the semgrep python wheel
          docker load --input /tmp/image.tar

          # create a new docker container using the image we just loaded
          # note: `docker create` simply prepares the container filesystem -- nothing is executed!
          CONTAINER_ID=$(docker create ${{ steps.build-semgrep-wheel.outputs.imageid }})

          # use `docker export` to extract the python wheel zipfile out of the container
          docker export $CONTAINER_ID | tar xv semgrep/cli/dist.zip

          # clean up after ourselves
          docker rm $CONTAINER_ID

          # note: this was originally accomplished by running `cat` from within the container and redirecting stdout to a file:
          #
          # docker run --platform linux/arm64 --rm ${{ steps.build-semgrep-wheel.outputs.imageid }} cat cli/dist.zip > /tmp/dist.zip
          #
          # we ended up hitting an edge case where the final ~100kb doesn't always get written to disk, which results in a corrupted zip file.
          # our theory is that the pipe between the container and the host is being closed prematurely.
      - uses: actions/upload-artifact@v3
        with:
          name: manylinux-aarch64-wheel
          path: semgrep/cli/dist.zip
