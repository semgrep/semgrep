name: tests

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    branches:
      - develop
    paths-ignore:
      - "**.md"

jobs:
  build-core:
    name: Build and Test semgrep-core
    runs-on: ubuntu-latest
    container: returntocorp/ocaml:alpine
    steps:
      - name: Install pipenv
        run: sudo pip install pipenv
      - name: Pre-checkout fixes
        run: |
          sudo chmod -R 777 /github
          github_cache_dir="/__w"
          sudo mkdir -p "$github_cache_dir"
          sudo chmod -R 777 "$github_cache_dir"
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Post-checkout fixes
        run: ./.github/post-checkout
      - name: Build semgrep-core
        run: ./scripts/install-alpine-semgrep-core
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ocaml-build-artifacts
          path: ocaml-build-artifacts.tgz
      - name: Test semgrep-core
        run: |
          eval $(opam env)
          cd semgrep-core
          START=`date +%s`
          make test
          make e2etest
          END=`date +%s`
          TEST_RUN_TIME=$((END-START))
          curl --fail -L -X POST "https://dashboard.semgrep.dev/api/metric/semgrep.core.test-run-time-seconds.num" -d "$TEST_RUN_TIME"
      - name: Report Number of Tests Stats
        if: github.ref == 'refs/heads/develop'
        run: |
          ./semgrep-core/tests/report_test_metrics.sh

      # TODO: move this to a stable host for more reliable results.
      #
      # It's not clear how to push the stats only when "on the main
      # branch". The GitHub Actions documentation is unhelpful. So we
      # keep things simple and publish the results every time.
      #
      - name: Publish match performance
        run: |
          # This runs a short test suite to track the match performance
          # of semgrep-core over time. The results are pushed to the
          # dashboard at https://dashboard.semgrep.dev/
          #
          opam exec -- make -C semgrep-core report-perf

  tox-tests:
    name: semgrep tests with different python envs
    runs-on: ubuntu-latest
    needs: [build-core]
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9"]
    steps:
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts.tgz
          sudo cp ocaml-build-artifacts/bin/* /usr/bin
      - name: Test semgrep-core
        run: semgrep-core -version
      - name: Install Tox and any other packages
        run: pip install pipenv==2018.11.26 tox==3.15.0
      - name: Run Tox
        env:
          SEMGREP_SKIP_BIN: true
        run: |
          cd semgrep

          # See tox.ini for pytest command being run
          tox -e py  # Run tox using the version of Python in `PATH`

  build-test:
    name: semgrep unit and e2e tests
    runs-on: ubuntu-latest
    needs: [build-core]
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        python: [3.7]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts.tgz
          sudo cp ocaml-build-artifacts/bin/* /usr/bin
      - name: Install semgrep
        run: |
          cd semgrep
          pip install pipenv==2021.5.29
          pipenv install --dev
      - name: Test semgrep
        run: |
          cd semgrep

          # tests should simulate CI environment iff they need one
          unset CI
          unset "${!GITHUB_@}"

          make check-markers
          pipenv run pytest --ignore=tests/qa/test_public_repos.py -n auto -vv --tb=short --durations=0 --snapshot-update tests/
      - name: Generate cheatsheets for semgrep.dev
        run: ./scripts/generate-cheatsheet
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cheatsheet
          path: cheatsheet.json
      - name: Prepare repo for snapshot commit
        if: ${{ failure() }}
        run: |
          # the commit step that follows will fail to fetch the pfff submodule
          # (perhaps because of the github token's permissions)
          # so we disable recursive fetching
          git config fetch.recurseSubmodules false
      - name: Commit snapshot updates
        id: snapshot-commit
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: EndBug/add-and-commit@v8
        with:
          add: semgrep/tests/e2e/snapshots
          default_author: github_actions
          message: "Update pytest snapshots"
          new_branch: snapshot-updates-${{ github.run_id }}-${{ github.run_attempt }}
      - name: Comment about any snapshot updates
        if: ${{ failure() && steps.snapshot-commit.outputs.pushed == 'true' }}
        run: |
          echo ":camera_flash: The pytest shapshots changed in your PR." >> /tmp/message.txt
          echo "Please carefully review these changes and make sure they are intended:" >> /tmp/message.txt
          echo >> /tmp/message.txt
          echo "1. Review the changes at https://github.com/returntocorp/semgrep/commit/${{ steps.snapshot-commit.outputs.commit_long_sha }}" >> /tmp/message.txt
          echo "2. Accept the new snapshots with" >> /tmp/message.txt
          echo >> /tmp/message.txt
          echo "       git fetch origin && git cherry-pick ${{ steps.snapshot-commit.outputs.commit_sha }} && git push" >> /tmp/message.txt

          gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/message.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  public-repos-test:
    name: run semgrep on public repos
    runs-on: ubuntu-latest
    needs: [build-core]
    strategy:
      matrix:
        python: [3.7]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts.tgz
          sudo cp ocaml-build-artifacts/bin/* /usr/bin
      - name: Install semgrep
        run: |
          cd semgrep
          export PATH=/github/home/.local/bin:$PATH
          pip3 install pipenv==2021.5.29
          pipenv install --dev
      - uses: actions/cache@v2
        with:
          path: ~/.cache/semgrep-cache
          key: semgrep-repo-cache-test
      - name: create cache dir if not exists
        run: mkdir -p ~/.cache/semgrep-cache
      - run: touch ~/.cache/semgrep-cache/ok
      - name: Test semgrep
        run: |
          cd semgrep
          export PATH=/github/home/.local/bin:$PATH
          pipenv run pytest -n auto -vv --tb=short --durations=0 tests/qa/test_public_repos.py
        env:
          GITHUB_REPO_CACHE: ~/.cache/semgrep-cache

  # Run abbreviated version of benchmarks to check that they work
  dummy-benchmarks:
    name: semgrep dummy benchmarks
    runs-on: ubuntu-latest
    needs: [build-core]
    strategy:
      matrix:
        python: [3.7]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts.tgz
          sudo cp ocaml-build-artifacts/bin/* /usr/bin
      - name: Install semgrep
        run: |
          cd semgrep
          pip3 install pipenv==2021.5.29
          pipenv install --dev
      - name: Test dummy benchmarks on latest
        working-directory: ./semgrep
        run: |
          pipenv run semgrep --version
          pipenv run python -m semgrep --version
          pipenv run semgrep-core -version
          pipenv run python3 ../perf/run-benchmarks --dummy

  # Run each benchmark twice to decrease effect of natural variance
  benchmark-test:
    name: semgrep benchmark tests
    runs-on: ubuntu-latest
    needs: [build-core]
    strategy:
      matrix:
        python: [3.7]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Run timing benchmark
        run: |
          pip3 install semgrep==0.94.0
          semgrep --version
          python3 -m semgrep --version
          export PATH=/github/home/.local/bin:$PATH

          python3 perf/run-benchmarks --small-only --std-only --save-to semgrep/baseline_timing1.json --no-time
          jq . semgrep/baseline_timing1.json
          python3 perf/run-benchmarks --small-only --std-only --save-to semgrep/baseline_timing2.json --no-time
          jq . semgrep/baseline_timing2.json
          pip3 uninstall -y semgrep
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ocaml-build-artifacts
      - name: Install artifacts
        run: |
          tar xf ocaml-build-artifacts.tgz
          sudo cp ocaml-build-artifacts/bin/* /usr/bin
      - name: Install semgrep
        run: |
          cd semgrep
          pip3 install pipenv==2021.5.29
          pipenv install --dev
      - name: Get timing for latest semgrep
        run: |
          cd semgrep
          pipenv run semgrep --version
          pipenv run python -m semgrep --version
          pipenv run semgrep-core -version
          pipenv run python3 ../perf/run-benchmarks --small-only --std-only --save-to timing1.json
          jq . timing1.json
          pipenv run python3 ../perf/run-benchmarks --small-only --std-only --save-to timing2.json --save-findings-to findings.json
          jq . timing2.json
          jq . findings.json
      - name: Compare timing infos
        run: |
          perf/compare-perf semgrep/baseline_timing1.json semgrep/baseline_timing2.json semgrep/timing1.json semgrep/timing2.json ${{ secrets.GITHUB_TOKEN }} ${{ github.event.number }}
          perf/compare-bench-findings semgrep/findings.json
