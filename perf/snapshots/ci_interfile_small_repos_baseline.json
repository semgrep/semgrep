[
  {
    "name": "semgrep.bench.TSW_PROJECT",
    "findings": {
      "errors": [],
      "results": [
        {
          "check_id": "semgrep.perf.bench.rules_cache.TSW_PROJECT.formatted-sql-string",
          "end": { "col": 93, "line": 48, "offset": 1130 },
          "extra": {
            "dataflow_trace": {
              "intermediate_vars": [
                {
                  "content": "uName",
                  "location": {
                    "end": { "col": 15, "line": 39, "offset": 1129 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/LoginServlet.java",
                    "start": { "col": 10, "line": 39, "offset": 1124 }
                  }
                }
              ],
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 28, "line": 41, "offset": 1294 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/LoginServlet.java",
                      "start": { "col": 15, "line": 41, "offset": 1281 }
                    },
                    "ui.searchUser"
                  ],
                  [
                    {
                      "content": "username",
                      "location": {
                        "end": { "col": 44, "line": 46, "offset": 994 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/UserImpl.java",
                        "start": { "col": 36, "line": 46, "offset": 986 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 93, "line": 48, "offset": 1130 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/UserImpl.java",
                        "start": { "col": 17, "line": 48, "offset": 1054 }
                      },
                      "s.executeQuery(\"select * from Utente where Utente.id_utente='\"+username+\"'\")"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 23, "line": 39, "offset": 1137 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/LoginServlet.java",
                    "start": { "col": 16, "line": 39, "offset": 1130 }
                  },
                  "request"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/UserImpl.java",
          "start": { "col": 17, "line": 48, "offset": 1054 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.TSW_PROJECT.formatted-sql-string",
          "end": { "col": 135, "line": 70, "offset": 1747 },
          "extra": {
            "dataflow_trace": {
              "intermediate_vars": [
                {
                  "content": "uName",
                  "location": {
                    "end": { "col": 15, "line": 51, "offset": 1580 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                    "start": { "col": 10, "line": 51, "offset": 1575 }
                  }
                },
                {
                  "content": "ub",
                  "location": {
                    "end": { "col": 15, "line": 72, "offset": 2630 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                    "start": { "col": 13, "line": 72, "offset": 2628 }
                  }
                }
              ],
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 14, "line": 75, "offset": 2734 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                      "start": { "col": 4, "line": 75, "offset": 2724 }
                    },
                    "ui.addUser"
                  ],
                  [
                    {
                      "content": "ub",
                      "location": {
                        "end": { "col": 33, "line": 66, "offset": 1528 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/UserImpl.java",
                        "start": { "col": 31, "line": 66, "offset": 1526 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 135, "line": 70, "offset": 1747 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/UserImpl.java",
                        "start": { "col": 4, "line": 70, "offset": 1616 }
                      },
                      "s.executeUpdate(\"insert into Utente values('\"+ub.getUsername()+\"','\"+ub.getRuolo()+\"','\"+ub.getEmail()+\"','\"+ub.getPassword()+\"')\")"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 23, "line": 51, "offset": 1588 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                    "start": { "col": 16, "line": 51, "offset": 1581 }
                  },
                  "request"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/UserImpl.java",
          "start": { "col": 4, "line": 70, "offset": 1616 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.TSW_PROJECT.formatted-sql-string",
          "end": { "col": 123, "line": 56, "offset": 1600 },
          "extra": {
            "dataflow_trace": {
              "intermediate_vars": [
                {
                  "content": "uName",
                  "location": {
                    "end": { "col": 15, "line": 51, "offset": 1580 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                    "start": { "col": 10, "line": 51, "offset": 1575 }
                  }
                },
                {
                  "content": "dab",
                  "location": {
                    "end": { "col": 26, "line": 71, "offset": 2548 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                    "start": { "col": 23, "line": 71, "offset": 2545 }
                  }
                }
              ],
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 25, "line": 78, "offset": 2792 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                      "start": { "col": 4, "line": 78, "offset": 2771 }
                    },
                    "dai.addDatiAnagrafici"
                  ],
                  [
                    {
                      "content": "dab",
                      "location": {
                        "end": { "col": 54, "line": 52, "offset": 1290 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/DatiAnagrificiImpl.java",
                        "start": { "col": 51, "line": 52, "offset": 1287 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 123, "line": 56, "offset": 1600 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/DatiAnagrificiImpl.java",
                        "start": { "col": 4, "line": 55, "offset": 1376 }
                      },
                      "s.executeUpdate(\"insert into Dati_anagrafici values('\"+dab.getIdUtente()+\"','\"+dab.getTelefono()+\"',\"\n\t\t\t\t\t\t\t+ \"'\"+dab.getDataNascita()+\"','\"+dab.getNome()+\"','\"+dab.getCognome()+\"','\"+dab.getCitta()+\"','\"+dab.getcap()+\"')\")"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 23, "line": 51, "offset": 1588 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/control/RegisterServlet.java",
                    "start": { "col": 16, "line": 51, "offset": 1581 }
                  },
                  "request"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/TSW_PROJECT/input/TSW_PROJECT.git/eclipse-workspace/games_basement/src/main/java/implementation/DatiAnagrificiImpl.java",
          "start": { "col": 4, "line": 55, "offset": 1376 }
        }
      ]
    }
  },
  {
    "name": "semgrep.bench.IUTRS-TP-Bot",
    "findings": { "errors": [], "results": [] }
  },
  {
    "name": "semgrep.bench.simple-mvc-app",
    "findings": {
      "errors": [],
      "results": [
        {
          "check_id": "semgrep.perf.bench.rules_cache.simple-mvc-app.tainted-sql-string",
          "end": { "col": 77, "line": 66, "offset": 2071 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 23, "line": 45, "offset": 1260 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/controllers/PeopleController.java",
                      "start": { "col": 9, "line": 45, "offset": 1246 }
                    },
                    "personDAO.save"
                  ],
                  [
                    {
                      "content": "person",
                      "location": {
                        "end": { "col": 35, "line": 62, "offset": 1826 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
                        "start": { "col": 29, "line": 62, "offset": 1820 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 77, "line": 66, "offset": 2071 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
                        "start": { "col": 26, "line": 65, "offset": 1933 }
                      },
                      "\"INSERT INTO PERSON VALUES (\" + 1 + \",'\" + person.getName() +\n                    \"',\" + person.getAge() + \",'\" + person.getEmail() + \"')\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 30, "line": 45, "offset": 1267 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/controllers/PeopleController.java",
                    "start": { "col": 24, "line": 45, "offset": 1261 }
                  },
                  "person"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
          "start": { "col": 26, "line": 65, "offset": 1933 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.simple-mvc-app.formatted-sql-string",
          "end": { "col": 41, "line": 67, "offset": 2113 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 23, "line": 45, "offset": 1260 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/controllers/PeopleController.java",
                      "start": { "col": 9, "line": 45, "offset": 1246 }
                    },
                    "personDAO.save"
                  ],
                  [
                    {
                      "content": "person",
                      "location": {
                        "end": { "col": 35, "line": 62, "offset": 1826 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
                        "start": { "col": 29, "line": 62, "offset": 1820 }
                      }
                    },
                    {
                      "content": "sql",
                      "location": {
                        "end": { "col": 23, "line": 65, "offset": 1930 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
                        "start": { "col": 20, "line": 65, "offset": 1927 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 41, "line": 67, "offset": 2113 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
                        "start": { "col": 13, "line": 67, "offset": 2085 }
                      },
                      "statement.executeUpdate(sql)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 30, "line": 45, "offset": 1267 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/controllers/PeopleController.java",
                    "start": { "col": 24, "line": 45, "offset": 1261 }
                  },
                  "person"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/simple-mvc-app/input/simple-mvc-app.git/src/main/java/ru/mcs/mvc/app/dao/PersonDAO.java",
          "start": { "col": 13, "line": 67, "offset": 2085 }
        }
      ]
    }
  },
  {
    "name": "semgrep.bench.Hospital-System",
    "findings": { "errors": [], "results": [] }
  },
  {
    "name": "semgrep.bench.aws-doc-sdk-examples",
    "findings": {
      "errors": [
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/cloudtrail/cloudtrail.java.log-and-digest-file-validation.java:81:\n `)` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/cloudtrail/cloudtrail.java.log-and-digest-file-validation.java",
          "spans": [
            {
              "end": { "col": 100, "line": 81 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/cloudtrail/cloudtrail.java.log-and-digest-file-validation.java",
              "start": { "col": 99, "line": 81 }
            }
          ],
          "type": "Syntax error"
        },
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/FifoTopics.java:89:\n `(\n    new PublishRequest()\n        .withTopicArn(topicArn)\n        .withSubject(subject)\n        .withMessage(payload)\n        .withMessageGroupId(groupId);` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/FifoTopics.java",
          "spans": [
            {
              "end": { "col": 38, "line": 94 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/FifoTopics.java",
              "start": { "col": 12, "line": 89 }
            }
          ],
          "type": "Syntax error"
        },
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java:6:\n `(String[] args)` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java",
          "spans": [
            {
              "end": { "col": 39, "line": 6 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java",
              "start": { "col": 24, "line": 6 }
            },
            {
              "end": { "col": 63, "line": 23 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java",
              "start": { "col": 36, "line": 23 }
            },
            {
              "end": { "col": 42, "line": 35 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java",
              "start": { "col": 36, "line": 34 }
            },
            {
              "end": { "col": 90, "line": 45 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java",
              "start": { "col": 40, "line": 45 }
            },
            {
              "end": { "col": 74, "line": 60 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/java/example_code/sns/PublishSmsToTopic.java",
              "start": { "col": 41, "line": 59 }
            }
          ],
          "type": "Syntax error"
        },
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/Creating_Spring_RDS_ Rest/src/main/java/com/aws/rest/InjectWorkService.java:23:\n `private String resourceArn = \"<Enter value> ;\r` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/Creating_Spring_RDS_ Rest/src/main/java/com/aws/rest/InjectWorkService.java",
          "spans": [
            {
              "end": { "col": 51, "line": 23 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/Creating_Spring_RDS_ Rest/src/main/java/com/aws/rest/InjectWorkService.java",
              "start": { "col": 5, "line": 23 }
            }
          ],
          "type": "Syntax error"
        },
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/creating_first_project/src/main/java/com/example/handlingformsubmission/PublishTextSMS.java:25:\n `String phoneNumber=\"<Enter mobile number> //Replace with a mobile phone number\r` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/creating_first_project/src/main/java/com/example/handlingformsubmission/PublishTextSMS.java",
          "spans": [
            {
              "end": { "col": 88, "line": 25 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/creating_first_project/src/main/java/com/example/handlingformsubmission/PublishTextSMS.java",
              "start": { "col": 9, "line": 25 }
            }
          ],
          "type": "Syntax error"
        }
      ],
      "results": [
        {
          "check_id": "semgrep.perf.bench.rules_cache.aws-doc-sdk-examples.tainted-sql-string",
          "end": { "col": 77, "line": 25, "offset": 704 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 27, "line": 49, "offset": 1458 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/CreatingSpringRedshiftRest/src/main/java/com/aws/rest/MainController.java",
                      "start": { "col": 9, "line": 49, "offset": 1440 }
                    },
                    "ri.flipItemArchive"
                  ],
                  [
                    {
                      "content": "id",
                      "location": {
                        "end": { "col": 42, "line": 20, "offset": 504 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/Creating_rds_item_tracker/src/main/java/com/aws/rest/RetrieveItems.java",
                        "start": { "col": 40, "line": 20, "offset": 502 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 77, "line": 25, "offset": 704 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/Creating_rds_item_tracker/src/main/java/com/aws/rest/RetrieveItems.java",
                        "start": { "col": 21, "line": 25, "offset": 648 }
                      },
                      "\"update work set archive = ? where idwork ='\" +id + \"' \""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 30, "line": 49, "offset": 1461 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/CreatingSpringRedshiftRest/src/main/java/com/aws/rest/MainController.java",
                    "start": { "col": 28, "line": 49, "offset": 1459 }
                  },
                  "id"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/aws-doc-sdk-examples/input/aws-doc-sdk-examples.git/javav2/usecases/Creating_rds_item_tracker/src/main/java/com/aws/rest/RetrieveItems.java",
          "start": { "col": 21, "line": 25, "offset": 648 }
        }
      ]
    }
  },
  {
    "name": "semgrep.bench.javaspringvulny",
    "findings": {
      "errors": [],
      "results": [
        {
          "check_id": "semgrep.perf.bench.rules_cache.javaspringvulny.tainted-sql-string",
          "end": { "col": 50, "line": 31, "offset": 981 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 52, "line": 47, "offset": 1408 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/javaspringvulny/input/javaspringvulny.git/src/main/java/hawk/controller/AdminController.java",
                      "start": { "col": 28, "line": 47, "offset": 1384 }
                    },
                    "userSearchService.search"
                  ],
                  [
                    {
                      "content": "search",
                      "location": {
                        "end": { "col": 43, "line": 25, "offset": 611 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/javaspringvulny/input/javaspringvulny.git/src/main/java/hawk/service/UserSearchService.java",
                        "start": { "col": 37, "line": 25, "offset": 605 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 50, "line": 31, "offset": 981 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/javaspringvulny/input/javaspringvulny.git/src/main/java/hawk/service/UserSearchService.java",
                        "start": { "col": 28, "line": 30, "offset": 852 }
                      },
                      "\"select id, name, description, tenant_id from public.user where name like '%\" +\n                    search.getSearchText() + \"%'\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 59, "line": 47, "offset": 1415 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/javaspringvulny/input/javaspringvulny.git/src/main/java/hawk/controller/AdminController.java",
                    "start": { "col": 53, "line": 47, "offset": 1409 }
                  },
                  "search"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/javaspringvulny/input/javaspringvulny.git/src/main/java/hawk/service/UserSearchService.java",
          "start": { "col": 28, "line": 30, "offset": 852 }
        }
      ]
    }
  },
  {
    "name": "semgrep.bench.vulnado",
    "findings": {
      "errors": [],
      "results": [
        {
          "check_id": "semgrep.perf.bench.rules_cache.vulnado.tainted-sql-string",
          "end": { "col": 81, "line": 47, "offset": 1365 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 27, "line": 20, "offset": 699 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/LoginController.java",
                      "start": { "col": 17, "line": 20, "offset": 689 }
                    },
                    "User.fetch"
                  ],
                  [
                    {
                      "content": "un",
                      "location": {
                        "end": { "col": 37, "line": 39, "offset": 1081 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
                        "start": { "col": 35, "line": 39, "offset": 1079 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 81, "line": 47, "offset": 1365 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
                        "start": { "col": 22, "line": 47, "offset": 1306 }
                      },
                      "\"select * from users where username = '\" + un + \"' limit 1\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 33, "line": 20, "offset": 705 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/LoginController.java",
                    "start": { "col": 28, "line": 20, "offset": 700 }
                  },
                  "input"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
          "start": { "col": 22, "line": 47, "offset": 1306 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.vulnado.formatted-sql-string",
          "end": { "col": 46, "line": 49, "offset": 1445 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 27, "line": 20, "offset": 699 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/LoginController.java",
                      "start": { "col": 17, "line": 20, "offset": 689 }
                    },
                    "User.fetch"
                  ],
                  [
                    {
                      "content": "un",
                      "location": {
                        "end": { "col": 37, "line": 39, "offset": 1081 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
                        "start": { "col": 35, "line": 39, "offset": 1079 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 19, "line": 47, "offset": 1303 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
                        "start": { "col": 14, "line": 47, "offset": 1298 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 46, "line": 49, "offset": 1445 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
                        "start": { "col": 22, "line": 49, "offset": 1421 }
                      },
                      "stmt.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 33, "line": 20, "offset": 705 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/LoginController.java",
                    "start": { "col": 28, "line": 20, "offset": 700 }
                  },
                  "input"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/vulnado/input/vulnado.git/src/main/java/com/scalesec/vulnado/User.java",
          "start": { "col": 22, "line": 49, "offset": 1421 }
        }
      ]
    }
  },
  {
    "name": "semgrep.bench.WebGoat",
    "findings": {
      "errors": [
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java:14:\n `\"` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
          "spans": [
            {
              "end": { "col": 43, "line": 14 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 42, "line": 14 }
            },
            {
              "end": { "col": 18, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 14, "line": 15 }
            },
            {
              "end": { "col": 32, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 27, "line": 15 }
            },
            {
              "end": { "col": 72, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 54, "line": 15 }
            },
            {
              "end": { "col": 91, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 74, "line": 15 }
            },
            {
              "end": { "col": 106, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 103, "line": 15 }
            },
            {
              "end": { "col": 115, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 114, "line": 15 }
            },
            {
              "end": { "col": 121, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 120, "line": 15 }
            },
            {
              "end": { "col": 150, "line": 15 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 125, "line": 15 }
            },
            {
              "end": { "col": 43, "line": 16 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 42, "line": 16 }
            },
            {
              "end": { "col": 18, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 14, "line": 17 }
            },
            {
              "end": { "col": 32, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 27, "line": 17 }
            },
            {
              "end": { "col": 72, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 54, "line": 17 }
            },
            {
              "end": { "col": 91, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 74, "line": 17 }
            },
            {
              "end": { "col": 106, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 103, "line": 17 }
            },
            {
              "end": { "col": 115, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 114, "line": 17 }
            },
            {
              "end": { "col": 121, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 120, "line": 17 }
            },
            {
              "end": { "col": 150, "line": 17 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 125, "line": 17 }
            },
            {
              "end": { "col": 43, "line": 18 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 42, "line": 18 }
            },
            {
              "end": { "col": 18, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 14, "line": 19 }
            },
            {
              "end": { "col": 32, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 27, "line": 19 }
            },
            {
              "end": { "col": 51, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 49, "line": 19 }
            },
            {
              "end": { "col": 73, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 62, "line": 19 }
            },
            {
              "end": { "col": 89, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 88, "line": 19 }
            },
            {
              "end": { "col": 102, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 99, "line": 19 }
            },
            {
              "end": { "col": 152, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 151, "line": 19 }
            },
            {
              "end": { "col": 161, "line": 19 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 157, "line": 19 }
            },
            {
              "end": { "col": 43, "line": 20 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 42, "line": 20 }
            },
            {
              "end": { "col": 18, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 14, "line": 21 }
            },
            {
              "end": { "col": 32, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 27, "line": 21 }
            },
            {
              "end": { "col": 51, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 49, "line": 21 }
            },
            {
              "end": { "col": 60, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 53, "line": 21 }
            },
            {
              "end": { "col": 70, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 69, "line": 21 }
            },
            {
              "end": { "col": 94, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 81, "line": 21 }
            },
            {
              "end": { "col": 127, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 126, "line": 21 }
            },
            {
              "end": { "col": 161, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 135, "line": 21 }
            },
            {
              "end": { "col": 183, "line": 21 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/XXEIntegrationTest.java",
              "start": { "col": 162, "line": 21 }
            }
          ],
          "type": "Syntax error"
        },
        {
          "code": 3,
          "level": "warn",
          "message": "Syntax error at line /Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java:35:\n `\"\"\"` was unexpected",
          "path": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
          "spans": [
            {
              "end": { "col": 31, "line": 35 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
              "start": { "col": 28, "line": 35 }
            },
            {
              "end": { "col": 33, "line": 36 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
              "start": { "col": 28, "line": 36 }
            },
            {
              "end": { "col": 49, "line": 36 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
              "start": { "col": 44, "line": 36 }
            },
            {
              "end": { "col": 65, "line": 36 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
              "start": { "col": 57, "line": 36 }
            },
            {
              "end": { "col": 37, "line": 41 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
              "start": { "col": 17, "line": 37 }
            },
            {
              "end": { "col": 18, "line": 42 },
              "file": "/Users/emma/workspace/semgrep-proprietary/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/it/java/org/owasp/webgoat/AccessControlIntegrationTest.java",
              "start": { "col": 55, "line": 41 }
            }
          ],
          "type": "Syntax error"
        }
      ],
      "results": [
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 87, "line": 58, "offset": 2581 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 43, "line": 53, "offset": 2347 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                      "start": { "col": 16, "line": 53, "offset": 2320 }
                    },
                    "injectableQueryAvailability"
                  ],
                  [
                    {
                      "content": "action",
                      "location": {
                        "end": { "col": 69, "line": 56, "offset": 2439 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                        "start": { "col": 63, "line": 56, "offset": 2433 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 87, "line": 58, "offset": 2581 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                        "start": { "col": 24, "line": 58, "offset": 2518 }
                      },
                      "\"SELECT * FROM access_log WHERE action LIKE '%\" + action + \"%'\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 57, "line": 53, "offset": 2361 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                    "start": { "col": 44, "line": 53, "offset": 2348 }
                  },
                  "action_string"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
          "start": { "col": 24, "line": 58, "offset": 2518 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 86, "line": 60, "offset": 2855 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 61, "line": 52, "offset": 2340 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidation.java",
                      "start": { "col": 37, "line": 52, "offset": 2316 }
                    },
                    "lesson6a.injectableQuery"
                  ],
                  [
                    {
                      "content": "accountName",
                      "location": {
                        "end": { "col": 59, "line": 56, "offset": 2634 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
                        "start": { "col": 48, "line": 56, "offset": 2623 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 86, "line": 60, "offset": 2855 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
                        "start": { "col": 21, "line": 60, "offset": 2790 }
                      },
                      "\"SELECT * FROM user_data WHERE last_name = '\" + accountName + \"'\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 68, "line": 52, "offset": 2347 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidation.java",
                    "start": { "col": 62, "line": 52, "offset": 2341 }
                  },
                  "userId"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
          "start": { "col": 21, "line": 60, "offset": 2790 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 189, "line": 59, "offset": 2699 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliLoc",
                [
                  {
                    "end": { "col": 189, "line": 59, "offset": 2699 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/challenges/challenge5/Assignment5.java",
                    "start": { "col": 71, "line": 59, "offset": 2581 }
                  },
                  "\"select password from challenge_users where userid = '\" + username_login + \"' and password = '\" + password_login + \"'\""
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 143, "line": 59, "offset": 2653 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/challenges/challenge5/Assignment5.java",
                    "start": { "col": 129, "line": 59, "offset": 2639 }
                  },
                  "username_login"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/challenges/challenge5/Assignment5.java",
          "start": { "col": 71, "line": 59, "offset": 2581 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 176, "line": 72, "offset": 2643 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliLoc",
                [
                  {
                    "end": { "col": 176, "line": 72, "offset": 2643 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/Servers.java",
                    "start": { "col": 62, "line": 72, "offset": 2529 }
                  },
                  "\"select id, hostname, ip, mac, status, description from SERVERS where status <> 'out of order' order by \" + column"
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 176, "line": 72, "offset": 2643 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/Servers.java",
                    "start": { "col": 170, "line": 72, "offset": 2637 }
                  },
                  "column"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/Servers.java",
          "start": { "col": 62, "line": 72, "offset": 2529 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 119, "line": 63, "offset": 2724 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliLoc",
                [
                  {
                    "end": { "col": 119, "line": 63, "offset": 2724 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
                    "start": { "col": 41, "line": 63, "offset": 2646 }
                  },
                  "\"select userid from sql_challenge_users where userid = '\" + username_reg + \"'\""
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 113, "line": 63, "offset": 2718 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
                    "start": { "col": 101, "line": 63, "offset": 2706 }
                  },
                  "username_reg"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
          "start": { "col": 41, "line": 63, "offset": 2646 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 116, "line": 61, "offset": 2733 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 40, "line": 56, "offset": 2457 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                      "start": { "col": 16, "line": 56, "offset": 2433 }
                    },
                    "injectableQueryIntegrity"
                  ],
                  [
                    {
                      "content": "name",
                      "location": {
                        "end": { "col": 64, "line": 59, "offset": 2545 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                        "start": { "col": 60, "line": 59, "offset": 2541 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 116, "line": 61, "offset": 2733 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                        "start": { "col": 24, "line": 61, "offset": 2641 }
                      },
                      "\"SELECT * FROM employees WHERE last_name = '\" + name + \"' AND auth_tan = '\" + auth_tan + \"'\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 45, "line": 56, "offset": 2462 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                    "start": { "col": 41, "line": 56, "offset": 2458 }
                  },
                  "name"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
          "start": { "col": 24, "line": 61, "offset": 2641 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 116, "line": 60, "offset": 2692 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 46, "line": 55, "offset": 2410 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                      "start": { "col": 16, "line": 55, "offset": 2380 }
                    },
                    "injectableQueryConfidentiality"
                  ],
                  [
                    {
                      "content": "name",
                      "location": {
                        "end": { "col": 70, "line": 58, "offset": 2504 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 66, "line": 58, "offset": 2500 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 116, "line": 60, "offset": 2692 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 24, "line": 60, "offset": 2600 }
                      },
                      "\"SELECT * FROM employees WHERE last_name = '\" + name + \"' AND auth_tan = '\" + auth_tan + \"'\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 51, "line": 55, "offset": 2415 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                    "start": { "col": 47, "line": 55, "offset": 2411 }
                  },
                  "name"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
          "start": { "col": 24, "line": 60, "offset": 2600 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 110, "line": 60, "offset": 3026 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 31, "line": 54, "offset": 2705 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                      "start": { "col": 16, "line": 54, "offset": 2690 }
                    },
                    "injectableQuery"
                  ],
                  [
                    {
                      "content": "accountName",
                      "location": {
                        "end": { "col": 62, "line": 57, "offset": 2819 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                        "start": { "col": 51, "line": 57, "offset": 2808 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 110, "line": 60, "offset": 3026 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                        "start": { "col": 21, "line": 60, "offset": 2937 }
                      },
                      "\"SELECT * FROM user_data WHERE first_name = 'John' and last_name = '\" + accountName + \"'\""
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 39, "line": 54, "offset": 2713 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                    "start": { "col": 32, "line": 54, "offset": 2706 }
                  },
                  "account"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
          "start": { "col": 21, "line": 60, "offset": 2937 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 108, "line": 134, "offset": 5780 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 46, "line": 55, "offset": 2410 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                      "start": { "col": 16, "line": 55, "offset": 2380 }
                    },
                    "injectableQueryConfidentiality"
                  ],
                  [
                    {
                      "content": "name",
                      "location": {
                        "end": { "col": 70, "line": 58, "offset": 2504 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 66, "line": 58, "offset": 2500 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 21, "line": 60, "offset": 2597 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 16, "line": 60, "offset": 2592 }
                      }
                    }
                  ],
                  [
                    "CliCall",
                    [
                      [
                        {
                          "end": { "col": 20, "line": 65, "offset": 2928 },
                          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                          "start": { "col": 17, "line": 65, "offset": 2925 }
                        },
                        "log"
                      ],
                      [
                        {
                          "content": "action",
                          "location": {
                            "end": { "col": 64, "line": 128, "offset": 5452 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                            "start": { "col": 58, "line": 128, "offset": 5446 }
                          }
                        }
                      ],
                      [
                        "CliLoc",
                        [
                          {
                            "end": { "col": 108, "line": 134, "offset": 5780 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                            "start": { "col": 27, "line": 134, "offset": 5699 }
                          },
                          "\"INSERT INTO access_log (time, action) VALUES ('\" + time + \"', '\" + action + \"')\""
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 51, "line": 55, "offset": 2415 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                    "start": { "col": 47, "line": 55, "offset": 2411 }
                  },
                  "name"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
          "start": { "col": 27, "line": 134, "offset": 5699 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 104, "line": 56, "offset": 2542 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 31, "line": 52, "offset": 2324 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java",
                      "start": { "col": 16, "line": 52, "offset": 2309 }
                    },
                    "injectableQuery"
                  ],
                  [
                    {
                      "content": "accountName",
                      "location": {
                        "end": { "col": 82, "line": 55, "offset": 2435 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java",
                        "start": { "col": 71, "line": 55, "offset": 2424 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 104, "line": 56, "offset": 2542 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java",
                        "start": { "col": 30, "line": 56, "offset": 2468 }
                      },
                      "\"SELECT * From user_data WHERE Login_Count = ? and userid= \" + accountName"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 51, "line": 52, "offset": 2344 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java",
                    "start": { "col": 45, "line": 52, "offset": 2338 }
                  },
                  "userid"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java",
          "start": { "col": 30, "line": 56, "offset": 2468 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.tainted-sql-string",
          "end": { "col": 101, "line": 52, "offset": 2012 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 28, "line": 41, "offset": 1340 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/RegistrationController.java",
                      "start": { "col": 9, "line": 41, "offset": 1321 }
                    },
                    "userService.addUser"
                  ],
                  [
                    {
                      "content": "username",
                      "location": {
                        "end": { "col": 40, "line": 40, "offset": 1389 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                        "start": { "col": 32, "line": 40, "offset": 1381 }
                      }
                    },
                    {
                      "content": "webGoatUser",
                      "location": {
                        "end": { "col": 24, "line": 43, "offset": 1559 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                        "start": { "col": 13, "line": 43, "offset": 1548 }
                      }
                    }
                  ],
                  [
                    "CliCall",
                    [
                      [
                        {
                          "end": { "col": 33, "line": 47, "offset": 1815 },
                          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                          "start": { "col": 13, "line": 47, "offset": 1795 }
                        },
                        "createLessonsForUser"
                      ],
                      [
                        {
                          "content": "webGoatUser",
                          "location": {
                            "end": { "col": 62, "line": 51, "offset": 1908 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                            "start": { "col": 51, "line": 51, "offset": 1897 }
                          }
                        }
                      ],
                      [
                        "CliLoc",
                        [
                          {
                            "end": { "col": 101, "line": 52, "offset": 2012 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                            "start": { "col": 30, "line": 52, "offset": 1941 }
                          },
                          "\"CREATE SCHEMA \\\"\" + webGoatUser.getUsername() + \"\\\" authorization dba\""
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 37, "line": 41, "offset": 1349 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/RegistrationController.java",
                    "start": { "col": 29, "line": 41, "offset": 1341 }
                  },
                  "userForm"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
          "start": { "col": 30, "line": 52, "offset": 1941 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.jdbctemplate-sqli",
          "end": { "col": 101, "line": 52, "offset": 2012 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 28, "line": 41, "offset": 1340 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/RegistrationController.java",
                      "start": { "col": 9, "line": 41, "offset": 1321 }
                    },
                    "userService.addUser"
                  ],
                  [
                    {
                      "content": "username",
                      "location": {
                        "end": { "col": 40, "line": 40, "offset": 1389 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                        "start": { "col": 32, "line": 40, "offset": 1381 }
                      }
                    },
                    {
                      "content": "webGoatUser",
                      "location": {
                        "end": { "col": 24, "line": 43, "offset": 1559 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                        "start": { "col": 13, "line": 43, "offset": 1548 }
                      }
                    }
                  ],
                  [
                    "CliCall",
                    [
                      [
                        {
                          "end": { "col": 33, "line": 47, "offset": 1815 },
                          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                          "start": { "col": 13, "line": 47, "offset": 1795 }
                        },
                        "createLessonsForUser"
                      ],
                      [
                        {
                          "content": "webGoatUser",
                          "location": {
                            "end": { "col": 62, "line": 51, "offset": 1908 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                            "start": { "col": 51, "line": 51, "offset": 1897 }
                          }
                        }
                      ],
                      [
                        "CliLoc",
                        [
                          {
                            "end": { "col": 101, "line": 52, "offset": 2012 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
                            "start": { "col": 30, "line": 52, "offset": 1941 }
                          },
                          "\"CREATE SCHEMA \\\"\" + webGoatUser.getUsername() + \"\\\" authorization dba\""
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 37, "line": 41, "offset": 1349 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/RegistrationController.java",
                    "start": { "col": 29, "line": 41, "offset": 1341 }
                  },
                  "userForm"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/container/users/UserService.java",
          "start": { "col": 30, "line": 52, "offset": 1941 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 77, "line": 65, "offset": 2870 },
          "extra": {
            "dataflow_trace": {
              "intermediate_vars": [
                {
                  "content": "checkUserQuery",
                  "location": {
                    "end": { "col": 38, "line": 63, "offset": 2643 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
                    "start": { "col": 24, "line": 63, "offset": 2629 }
                  }
                }
              ],
              "taint_sink": [
                "CliLoc",
                [
                  {
                    "end": { "col": 77, "line": 65, "offset": 2870 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
                    "start": { "col": 39, "line": 65, "offset": 2832 }
                  },
                  "statement.executeQuery(checkUserQuery)"
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 113, "line": 63, "offset": 2718 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
                    "start": { "col": 101, "line": 63, "offset": 2706 }
                  },
                  "username_reg"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java",
          "start": { "col": 39, "line": 65, "offset": 2832 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 66, "line": 67, "offset": 3236 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 61, "line": 52, "offset": 2340 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidation.java",
                      "start": { "col": 37, "line": 52, "offset": 2316 }
                    },
                    "lesson6a.injectableQuery"
                  ],
                  [
                    {
                      "content": "accountName",
                      "location": {
                        "end": { "col": 59, "line": 56, "offset": 2634 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
                        "start": { "col": 48, "line": 56, "offset": 2623 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 18, "line": 60, "offset": 2787 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
                        "start": { "col": 13, "line": 60, "offset": 2782 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 66, "line": 67, "offset": 3236 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
                        "start": { "col": 37, "line": 67, "offset": 3207 }
                      },
                      "statement.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 68, "line": 52, "offset": 2347 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidation.java",
                    "start": { "col": 62, "line": 52, "offset": 2341 }
                  },
                  "userId"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java",
          "start": { "col": 37, "line": 67, "offset": 3207 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 66, "line": 66, "offset": 3052 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 40, "line": 56, "offset": 2457 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                      "start": { "col": 16, "line": 56, "offset": 2433 }
                    },
                    "injectableQueryIntegrity"
                  ],
                  [
                    {
                      "content": "name",
                      "location": {
                        "end": { "col": 64, "line": 59, "offset": 2545 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                        "start": { "col": 60, "line": 59, "offset": 2541 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 21, "line": 61, "offset": 2638 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                        "start": { "col": 16, "line": 61, "offset": 2633 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 66, "line": 66, "offset": 3052 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                        "start": { "col": 37, "line": 66, "offset": 3023 }
                      },
                      "statement.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 45, "line": 56, "offset": 2462 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
                    "start": { "col": 41, "line": 56, "offset": 2458 }
                  },
                  "name"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java",
          "start": { "col": 37, "line": 66, "offset": 3023 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 66, "line": 66, "offset": 3014 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 46, "line": 55, "offset": 2410 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                      "start": { "col": 16, "line": 55, "offset": 2380 }
                    },
                    "injectableQueryConfidentiality"
                  ],
                  [
                    {
                      "content": "name",
                      "location": {
                        "end": { "col": 70, "line": 58, "offset": 2504 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 66, "line": 58, "offset": 2500 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 21, "line": 60, "offset": 2597 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 16, "line": 60, "offset": 2592 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 66, "line": 66, "offset": 3014 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 37, "line": 66, "offset": 2985 }
                      },
                      "statement.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 51, "line": 55, "offset": 2415 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                    "start": { "col": 47, "line": 55, "offset": 2411 }
                  },
                  "name"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
          "start": { "col": 37, "line": 66, "offset": 2985 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 66, "line": 63, "offset": 2863 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 43, "line": 53, "offset": 2347 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                      "start": { "col": 16, "line": 53, "offset": 2320 }
                    },
                    "injectableQueryAvailability"
                  ],
                  [
                    {
                      "content": "action",
                      "location": {
                        "end": { "col": 69, "line": 56, "offset": 2439 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                        "start": { "col": 63, "line": 56, "offset": 2433 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 21, "line": 58, "offset": 2515 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                        "start": { "col": 16, "line": 58, "offset": 2510 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 66, "line": 63, "offset": 2863 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                        "start": { "col": 37, "line": 63, "offset": 2834 }
                      },
                      "statement.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 57, "line": 53, "offset": 2361 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
                    "start": { "col": 44, "line": 53, "offset": 2348 }
                  },
                  "action_string"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java",
          "start": { "col": 37, "line": 63, "offset": 2834 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 66, "line": 62, "offset": 3225 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 31, "line": 54, "offset": 2705 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                      "start": { "col": 16, "line": 54, "offset": 2690 }
                    },
                    "injectableQuery"
                  ],
                  [
                    {
                      "content": "accountName",
                      "location": {
                        "end": { "col": 62, "line": 57, "offset": 2819 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                        "start": { "col": 51, "line": 57, "offset": 2808 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 18, "line": 60, "offset": 2934 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                        "start": { "col": 13, "line": 60, "offset": 2929 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 66, "line": 62, "offset": 3225 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                        "start": { "col": 37, "line": 62, "offset": 3196 }
                      },
                      "statement.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 39, "line": 54, "offset": 2713 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
                    "start": { "col": 32, "line": 54, "offset": 2706 }
                  },
                  "account"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java",
          "start": { "col": 37, "line": 62, "offset": 3196 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 62, "line": 62, "offset": 2638 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 31, "line": 56, "offset": 2337 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java",
                      "start": { "col": 16, "line": 56, "offset": 2322 }
                    },
                    "injectableQuery"
                  ],
                  [
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 56, "line": 59, "offset": 2408 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java",
                        "start": { "col": 51, "line": 59, "offset": 2403 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 62, "line": 62, "offset": 2638 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java",
                        "start": { "col": 33, "line": 62, "offset": 2609 }
                      },
                      "statement.executeQuery(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 37, "line": 56, "offset": 2343 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java",
                    "start": { "col": 32, "line": 56, "offset": 2338 }
                  },
                  "query"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java",
          "start": { "col": 33, "line": 62, "offset": 2609 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 47, "line": 65, "offset": 2745 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 31, "line": 57, "offset": 2307 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java",
                      "start": { "col": 16, "line": 57, "offset": 2292 }
                    },
                    "injectableQuery"
                  ],
                  [
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 56, "line": 60, "offset": 2378 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java",
                        "start": { "col": 51, "line": 60, "offset": 2373 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 47, "line": 65, "offset": 2745 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java",
                        "start": { "col": 17, "line": 65, "offset": 2715 }
                      },
                      "statement.executeUpdate(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 37, "line": 57, "offset": 2313 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java",
                    "start": { "col": 32, "line": 57, "offset": 2308 }
                  },
                  "query"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java",
          "start": { "col": 17, "line": 65, "offset": 2715 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 47, "line": 63, "offset": 2636 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 31, "line": 57, "offset": 2336 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java",
                      "start": { "col": 16, "line": 57, "offset": 2321 }
                    },
                    "injectableQuery"
                  ],
                  [
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 56, "line": 60, "offset": 2407 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java",
                        "start": { "col": 51, "line": 60, "offset": 2402 }
                      }
                    }
                  ],
                  [
                    "CliLoc",
                    [
                      {
                        "end": { "col": 47, "line": 63, "offset": 2636 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java",
                        "start": { "col": 17, "line": 63, "offset": 2606 }
                      },
                      "statement.executeUpdate(query)"
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 37, "line": 57, "offset": 2342 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java",
                    "start": { "col": 32, "line": 57, "offset": 2337 }
                  },
                  "query"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java",
          "start": { "col": 17, "line": 63, "offset": 2606 }
        },
        {
          "check_id": "semgrep.perf.bench.rules_cache.WebGoat.formatted-sql-string",
          "end": { "col": 46, "line": 138, "offset": 5945 },
          "extra": {
            "dataflow_trace": {
              "taint_sink": [
                "CliCall",
                [
                  [
                    {
                      "end": { "col": 46, "line": 55, "offset": 2410 },
                      "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                      "start": { "col": 16, "line": 55, "offset": 2380 }
                    },
                    "injectableQueryConfidentiality"
                  ],
                  [
                    {
                      "content": "name",
                      "location": {
                        "end": { "col": 70, "line": 58, "offset": 2504 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 66, "line": 58, "offset": 2500 }
                      }
                    },
                    {
                      "content": "query",
                      "location": {
                        "end": { "col": 21, "line": 60, "offset": 2597 },
                        "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                        "start": { "col": 16, "line": 60, "offset": 2592 }
                      }
                    }
                  ],
                  [
                    "CliCall",
                    [
                      [
                        {
                          "end": { "col": 20, "line": 65, "offset": 2928 },
                          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                          "start": { "col": 17, "line": 65, "offset": 2925 }
                        },
                        "log"
                      ],
                      [
                        {
                          "content": "action",
                          "location": {
                            "end": { "col": 64, "line": 128, "offset": 5452 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                            "start": { "col": 58, "line": 128, "offset": 5446 }
                          }
                        },
                        {
                          "content": "logQuery",
                          "location": {
                            "end": { "col": 24, "line": 134, "offset": 5696 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                            "start": { "col": 16, "line": 134, "offset": 5688 }
                          }
                        }
                      ],
                      [
                        "CliLoc",
                        [
                          {
                            "end": { "col": 46, "line": 138, "offset": 5945 },
                            "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                            "start": { "col": 13, "line": 138, "offset": 5912 }
                          },
                          "statement.executeUpdate(logQuery)"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              "taint_source": [
                "CliLoc",
                [
                  {
                    "end": { "col": 51, "line": 55, "offset": 2415 },
                    "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
                    "start": { "col": 47, "line": 55, "offset": 2411 }
                  },
                  "name"
                ]
              ]
            },
            "engine_kind": "PRO",
            "fingerprint": "<masked in benchmarks>",
            "is_ignored": false,
            "lines": "<masked in benchmarks>",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": { "interfile": true },
            "metavars": "<masked in benchmarks>",
            "severity": "ERROR"
          },
          "path": "<masked in benchmarks>/semgrep/perf/bench/WebGoat/input/WebGoat.git/src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java",
          "start": { "col": 13, "line": 138, "offset": 5912 }
        }
      ]
    }
  },
  { "name": "semgrep.bench.dvja", "findings": { "errors": [], "results": [] } }
]
