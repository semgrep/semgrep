rules:
- id: dgryski.semgrep-go.badnilguard.bad-nil-guard
  patterns:
  - pattern-either:
    - pattern: $X == nil && <... $X.$F ...>
    - pattern: $X != nil || <... $X.$F ...>
    - pattern: <... $X.$F ...> && $X != nil
    - pattern: <... $X.$F ...> || $X == nil
    - pattern: <... $X.$F ...> && $X == nil
    - pattern: <... $X.$F ...> || $X != nil
  message: Bad nil guard
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.anon-struct-args.anonymous-struct-args
  patterns:
  - pattern-either:
    - pattern: func $FUNC(..., $NAME *struct { ... }, ...)
    - pattern: func $FUNC(..., $NAME struct { ... }, ...)
    - pattern: func ($T $TYPE) $FUNC(..., $NAME *struct { ... }, ...)
    - pattern: func ($T $TYPE) $FUNC(..., $NAME struct { ... }, ...)
  message: Odd use of anonymous structs for function arguments
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.badexponentiation.bad-exponentiation
  patterns:
  - pattern-either:
    - pattern: 10 ^ $X
    - pattern: 2 ^ $X
  message: Caret (^) is not exponentiation
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.close-sql-query-rows.rows-not-closed
  patterns:
  - pattern: $Q.QueryxContext(...)
  - pattern-not-inside: return $X.QueryxContext(...)
  - pattern-not-inside: |
      $ROWS, $ERR = $Q.QueryxContext(...)
      ...
      $ROWS.Close()
  - pattern-not-inside: |
      $ROWS, $ERR = $Q.QueryxContext(...)
      ...
      defer $ROWS.Close()
  - pattern-not-inside: |
      $ROWS, $ERR = $Q.QueryxContext(...)
      ...
      $FUNC($ROWS)
  - pattern-not-inside: |
      if ... {
        ...
        $ROWS, $ERR = $Q.QueryxContext(...)
        ...
      } else { ... }
      $ROWS.Close()
  - pattern-not-inside: |
      if ... {
        ...
        $ROWS, $ERR = $Q.QueryxContext(...)
        ...
      } else { ... }
      ...
      defer $ROWS.Close()
  - pattern-not-inside: |
      if ... { ...  } else {
        ...
        $ROWS, $ERR = $Q.QueryxContext(...)
        ...
      }
      ...
      $ROWS.Close()
  - pattern-not-inside: |
      if ... { ...  } else {
        ...
        $ROWS, $ERR = $Q.QueryxContext(...)
        ...
      }
      ...
      defer $ROWS.Close()
  message: QueryxContext rows must be closed (or use ExecContext)
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.contexttodo.context-todo
  patterns:
  - pattern-either:
    - pattern: |
        context.TODO()
  message: Consider to use well-defined context
  languages:
  - go
  severity: WARNING
- id: dgryski.semgrep-go.errclosed.use-net-errclosed
  patterns:
  - pattern: strings.Contains($ERR.Error(), $X)
  - metavariable-regex:
      metavariable: $X
      regex: '".*closed network connection.*"'
  message: Use errors.Is($ERR, net.ErrClosed) instead
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.errnilcheck.err-nil-check
  patterns:
  - pattern-either:
    - pattern: |
        if err != nil {
                return err
        }
        return nil
    - pattern: |
        if err != nil {
                return $X, err
        }
        return $X, nil
  message: superfluous nil err check before return
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.errtodo.err-todo
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: if err != nil { ... }
      - pattern-regex: // ?(TODO|FIXME).*
  - pattern-either:
    - patterns:
      - pattern-inside: |
          if ... ; err != nil {
                  ...
          }
      - pattern-regex: // ?(TODO|FIXME).*
  message: TODO in error handling code
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.hashsum.hash-sum-without-write
  patterns:
  - pattern-either:
    - pattern: |
        $HASH.New().Sum($SLICE)
    - pattern: |
        $H := $HASH.New()
        ...
        $H.Sum($SLICE)
  - pattern-not: |
      $H := $HASH.New()
      ...
      $H.Write(...)
      ...
      $H.Sum($SLICE)
  - pattern-not: |
      $H := $HASH.New()
      ...
      $FUNC(..., $H, ...)
      ...
      $H.Sum($SLICE)
  message: odd hash.Sum call flow
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.hmac-bytes.use-hmac-equal
  patterns:
  - pattern-either:
    - pattern: |
        $MAC = hmac.New(...)
        ...
        $H = $MAC.Sum(...)
        ...
        bytes.Equal($H, ...)
    - pattern: |
        $MAC = hmac.New(...)
        ...
        $H = $MAC.Sum(...)
        ...
        bytes.Equal(..., $H)
  message: Comparing a MAC with bytes.Equal()
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.hmac-hash.hmac-needs-new
  patterns:
  - pattern-either:
    - pattern: |
        $H := $HASH.New()
        ...
        $FUNC := func() hash.Hash { return $H }
        ...
        hmac.New($FUNC, ...)
    - pattern: |
        $H := $HASH.New()
        ...
        hmac.New(func() hash.Hash { return $H }, ...)
    - pattern: |
        hmac.New(func() hash.Hash { return ( $H : hash.Hash) }, ...)
  message: calling hmac.New with unchanging hash.New
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.hostport.sprintf-host-port
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: fmt.Sprintf("%s:%s", $NET, $XX)
      - pattern: fmt.Sprintf("%s:%d", $NET, $XX)
      - pattern: fmt.Sprintf("%s:%s", $XX, $NET)
      - pattern: fmt.Sprintf("%s:%d", $XX, $NET)
      - pattern: $NET = fmt.Sprintf("%s:%d", ..., ...)
      - pattern: $NET = fmt.Sprintf("%s:%s", ..., ...)
    - metavariable-regex:
        metavariable: $NET
        regex: (?i).*(port|addr|host|listen|bind|ip)
  - patterns:
    - pattern: fmt.Sprintf($XX, $NET)
    - metavariable-regex:
        metavariable: $XX
        regex: '"%s:[0-9]+"'
    - metavariable-regex:
        metavariable: $NET
        regex: (?i).*(port|addr|host|listen|bind|ip)
  message: |
    use net.JoinHostPort instead of fmt.Sprintf($XX, $NET)
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.joinpath.use-strings-join-path
  patterns:
  - pattern-either:
    - pattern: strings.Join(..., "/")
    - pattern: strings.Join(..., "\\")
    - pattern: strings.Join(..., `\`)
  message: did you want path.Join() or filepath.Join()?
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.json-writer.json-encoder-needs-type
  patterns:
  - pattern: |
      $ENC := json.NewEncoder(($W: http.ResponseWriter))
      ...
      $ENC.Encode(...)
  - pattern-not: |
      $ENC := json.NewEncoder(($W: http.ResponseWriter))
      ...
      $W.Header().Set("=~/Content-Type/i", "=~/application/json/")
      ...
      $ENC.Encode(...)
  - pattern-not-inside: |
      $W.Header().Set("=~/Content-Type/i", "=~/application/json/")
      ...
      $ENC := json.NewEncoder($W)
      ...
      $ENC.Encode(...)
  - pattern-not: |
      $ENC := json.NewEncoder(($W: http.ResponseWriter))
      ...
      $W.Header().Add("=~/Content-Type/i", "=~/application/json/")
      ...
      $ENC.Encode(...)
  - pattern-not-inside: |
      $W.Header().Add("=~/Content-Type/i", "=~/application/json/")
      ...
      $ENC := json.NewEncoder($W)
      ...
      $ENC.Encode(...)
  message: calling json.Encode() on an http.ResponseWriter will set Content-Type text/plain
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.mail-address.sprintf-mail-address
  pattern-either:
  - pattern: fmt.Sprintf(`"%s" <%s>`, $NAME, $EMAIL)
  - pattern: fmt.Sprintf(`"%s"<%s>`, $NAME, $EMAIL)
  - pattern: fmt.Sprintf("\"%s\"<%s>", $NAME, $EMAIL)
  - pattern: fmt.Sprintf("\"%s\" <%s>", $NAME, $EMAIL)
  - pattern: fmt.Sprintf("%s<%s>", $NAME, $EMAIL)
  message: use net/mail Address.String() instead of fmt.Sprintf()
  fix: (&mail.Address{Name:$NAME, Address:$EMAIL}).String()
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.mathbits.use-math-bits
  patterns:
  - pattern-either:
    - pattern: $X >> $N | $X << (8 - $N)
    - pattern: $X << $N | $X >> (8 - $N)
    - pattern: $X >> (8 - $N) | $X << $N
    - pattern: $X << (8 - $N) | $X >> $N
    - pattern: $X >> $N | $X << (16 - $N)
    - pattern: $X << $N | $X >> (16 - $N)
    - pattern: $X >> (16 - $N) | $X << $N
    - pattern: $X << (16 - $N) | $X >> $N
    - pattern: $X >> $N | $X << (32 - $N)
    - pattern: $X << $N | $X >> (32 - $N)
    - pattern: $X >> (32 - $N) | $X << $N
    - pattern: $X << (32 - $N) | $X >> $N
    - pattern: $X >> $N | $X << (64 - $N)
    - pattern: $X << $N | $X >> (64 - $N)
    - pattern: $X >> (64 - $N) | $X << $N
    - pattern: $X << (64 - $N) | $X >> $N
  message: Try using math/bits instead
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.nilerr.return-nil
  patterns:
  - pattern-either:
    - pattern: |
        if err == nil {
                return err
        }
    - pattern: |
        if err == nil {
                return ..., err
        }
  message: return nil err instead of nil value
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.nrtxn.newrelic-start-without-end
  patterns:
  - pattern-not-inside: |
      $TXN := $NR.StartTransaction($N)
      ...
      defer $TXN.End()
  - pattern-not-inside: |
      $TXN := $NR.StartTransaction($N)
      ...
      $TXN.End()
  - pattern-either:
    - pattern: $TXN := $NR.StartTransaction($N)
  message: missing new relic end transaction
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.oddbitwise.odd-bitwise
  patterns:
  - pattern-either:
    - pattern: $X | $X
    - pattern: $X | ^$X
    - pattern: ^$X | $X
    - pattern: $X & $X
    - pattern: $X & ^$X
    - pattern: ^$X & $X
    - pattern: $X &^ $X
  message: Odd bitwise expression
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.oddcompare.odd-comparison
  patterns:
  - pattern-either:
    - pattern: $X - $Y == 0
    - pattern: $X - $Y != 0
    - pattern: $X - $Y < 0
    - pattern: $X - $Y <= 0
    - pattern: $X - $Y > 0
    - pattern: $X - $Y >= 0
    - pattern: $X ^ $Y == 0
    - pattern: $X ^ $Y != 0
  message: Odd comparison
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.oddcompound.odd-compound-expression
  patterns:
  - pattern-either:
    - pattern: $X += $X + $Y
    - pattern: $X += $X - $Y
    - pattern: $X -= $X + $Y
    - pattern: $X -= $X - $Y
  message: Odd compound += or -= expression
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.oddifsequence.odd-sequence-ifs
  patterns:
  - pattern-either:
    - pattern: |
        if $X { return ... }
        if $X { ... }
    - pattern: |
        if ! $X { return ... }
        if $X { ... }
    - pattern: |
        if $X { return ... }
        if ! $X { ... }
    - pattern: |
        if $X == $Y { return ... }
        if $X != $Y { ... }
    - pattern: |
        if $X != $Y { return ... }
        if $X == $Y { ... }
    - pattern: |
        if $X { return  ... }
        for $X { ... }
    - pattern: |
        if $X {
                if $X { ... }
                ...
        }
    - pattern: |
        if $X {
                if ! $X { ... }
                ...
        }
    - pattern: |
        if ! $X {
                if $X { ... }
              ...
        }
    - pattern: |
        if $X == $Y {
                if $X != $Y { ... }
                ...
        }
    - pattern: |
        if $X != $Y {
                if $X == $Y { ... }
                ...
        }
    - pattern: |
        if $X {
                for ! $X { ... }
                ...
        }
    - pattern: |
        if ! $X {
                for $X { ... }
              ...
        }
    - pattern: |
        if $X == $Y {
                for $X != $Y { ... }
                ...
        }
    - pattern: |
        if $X != $Y {
                for $X == $Y { ... }
                ...
        }
    - pattern: |
        for $X {
                if $X { ... }
                ...
        }
    - pattern: |
        for $X {
                if ! $X { ... }
                ...
        }
    - pattern: |
        for ! $X {
                if $X { ... }
                ...
        }
    - pattern: |
        for $X == $Y {
                if $X != $Y { ... }
                ...
        }
    - pattern: |
        for $X != $Y {
                if $X == $Y { ... }
                ...
        }
  message: Odd sequence of ifs
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.oddmathbits.odd-bits-leadingzeros
  patterns:
  - pattern-either:
    - pattern: 64 - bits.LeadingZeros64($X)
    - pattern: 32 - bits.LeadingZeros32($X)
    - pattern: 16 - bits.LeadingZeros16($X)
    - pattern: 8 - bits.LeadingZeros8($X)
  message: Odd bits.LeadingZeros() expression should perhaps be bits.Len()
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.oserrors.os-error-handling-functions
  patterns:
  - pattern-either:
    - pattern: os.IsExist(...)
    - pattern: os.IsNotExist(...)
    - pattern: os.IsPermission(...)
    - pattern: os.IsTimeout(...)
  message: New code should use errors.Is with the appropriate error type
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.parseint-downcast.parseint-downcast
  patterns:
  - pattern-either:
    - pattern: |
        $X, ... = strconv.ParseInt(..., ..., 64)
        ...
        int32($X)
    - pattern: |
        $X, ... = strconv.ParseInt(..., ..., 64)
        ...
        uint32($X)
    - pattern: |
        $X, ... = strconv.ParseUint(..., ..., 64)
        ...
        int32($X)
    - pattern: |
        $X, ... = strconv.ParseUint(..., ..., 64)
        ...
        uint32($X)
    - pattern: |
        $X = strconv.Atoi(...)
        ...
        int32($X)
    - pattern: |
        $X = strconv.Atoi(...)
        ...
        uint32($X)
  message: 64-bit integer parsed and downcast to u/int32
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.readfull.io-readfull-n
  patterns:
  - pattern-either:
    - pattern: |
        $N, $ERR = io.ReadFull($R, $SLICE)
        if $ERR != nil || $N != len($SLICE) {
                ...
        }
    - pattern: |
        $N, $ERR = io.ReadFull($R, $SLICE)
        if $N != len($SLICE) || $ERR != nil {
                ...
        }
  message: io.ReadFull() returns err == nil iff n == len(slice)
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.returnnil.return-nil
  patterns:
  - pattern-either:
    - pattern: |
        if $X == nil {
                return $X
        }
    - pattern: |
        if $X != nil {
                return ...
        }
        return $X
  message: return nil instead of nil value
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.sortslice.bad-sort-slice-function
  patterns:
  - pattern-either:
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$I] < $SLICE[$I]
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$J] < $SLICE[$I]
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$I].$FIELD < $SLICE[$I].$FIELD
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$J].$FIELD < $SLICE[$J].$FIELD
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$I] > $SLICE[$I]
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$J] > $SLICE[$I]
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$I].$FIELD > $SLICE[$I].$FIELD
        })
    - pattern: |
        sort.Slice($SLICE, func($I, $J int) bool {
            return $SLICE[$J].$FIELD > $SLICE[$J].$FIELD
        })
  message: Maybe bad sort.Slice() less function
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.sprinterr.use-err-error
  patterns:
  - pattern-not: |
      if err != nil {
              ..., err = ...
              <... fmt.Sprint(err) ...>
      }
  - pattern-not: |
      if err != nil {
              err = ...
              <... fmt.Sprint(err) ...>
      }
  - pattern-either:
    - pattern: |
        if err != nil {
                ...
                <... fmt.Sprint(err) ...>
        }
    - pattern: |
        if err == nil {
                ...
                return ...
        }
        ...
        <...  fmt.Sprint(err) ...>
    - pattern: |
        if err != nil {
                ...
                <... fmt.Sprintf("%s", err) ...>
        }
    - pattern: |
        if err == nil {
                ...
                return ...
        }
        ...
        <...  fmt.Sprintf("%s", err) ...>
    - pattern: |
        if err != nil {
                ...
                <... fmt.Sprintf("%v", err) ...>
        }
    - pattern: |
        if err == nil {
                ...
                return ...
        }
        ...
        <...  fmt.Sprintf("%v", err) ...>
  message: Use err.Error() instead
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.writestring.use-writer-not-writestring
  patterns:
  - pattern: io.WriteString($W, string($VAR))
  message: use $W.Write($VAR) instead of io.WriteString when $VAR is []byte
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.wrongerrcall.maybe-wrong-err
  patterns:
  - pattern-either:
    - pattern: |
        if $F.Err() != nil {
                return ..., <... err ...>
        }
    - pattern: |
        if $F.Err() != nil {
                return <... err ...>
        }
  message: maybe returning wrong error
  languages:
  - go
  severity: ERROR
- id: dgryski.semgrep-go.wronglock.wrong-lock-unlock
  patterns:
  - pattern-either:
    - pattern: |
        $M.Lock()
        defer $M.RUnlock()
    - pattern: |
        $M.RLock()
        defer $M.Unlock()
    - pattern: |
        $M.Lock()
        defer $M.Lock()
    - pattern: |
        $M.RLock()
        defer $M.RLock()
  message: Wrong lock/unlock pair?
  languages:
  - go
  severity: ERROR
- id: ajinabraham.njsscan.crypto_node.node_md5
  patterns:
  - pattern: |
      $X.createHash("md5")
  message: MD5 is a a weak hash which is known to have collision. Use a strong hashing
    function.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.crypto_node.node_sha1
  patterns:
  - pattern: |
      $X.createHash("sha1")
  message: SHA1 is a a weak hash which is known to have collision. Use a strong hashing
    function.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.crypto_node.node_aes_ecb
  patterns:
  - pattern-either:
    - pattern: |
        $X.createCipheriv("=~/^aes-([0-9]+)-ecb$/i", ...)
    - pattern: |
        $X.createDecipheriv("=~/^aes-([0-9]+)-ecb$/i", ...)
  message: AES with ECB mode is deterministic in nature and not suitable for encrypting
    large amount of repetitive data.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.crypto_node.node_aes_noiv
  patterns:
  - pattern-either:
    - pattern: |
        $X.createCipheriv("=~/^aes-/i", $KEY, "", ...)
  message: AES algorithms requires an initialization vector (IV). Providing no or
    null IV in some implementation results to a 0 IV. Use of a deterministic IV makes
    dictionary attacks easier.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.crypto_node.node_weak_crypto
  patterns:
  - pattern-either:
    - pattern: |
        $X.createCipher('des', ...)
  message: A weak or broken cryptographic algorithm was identified. Using these functions
    will introduce vulnerabilities or downgrade the security of your application.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.crypto_node.node_insecure_random_generator
  patterns:
  - pattern-either:
    - pattern: |
        $X.pseudoRandomBytes(...)
    - pattern: |
        Math.random(...)
  message: crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random
    number generator.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.timing_attack_node.node_timing_attack
  patterns:
  - pattern-not: if ($Z == null) { ... };
  - pattern-not: if ($Z === null) { ... };
  - pattern-not: if ($Z != null) { ... };
  - pattern-not: if ($Z !== null) { ... };
  - pattern-not: if ($Q != undefined) { ... };
  - pattern-not: if ($Q !== undefined) { ... };
  - pattern-not: if ($Q == undefined) { ... };
  - pattern-not: if ($Q === undefined) { ... };
  - pattern-not: return $Y == null;
  - pattern-not: return $Y === null;
  - pattern-not: return $Y != null;
  - pattern-not: return $Y !== null;
  - pattern-not: return $Y == undefined;
  - pattern-not: return $Y === undefined;
  - pattern-not: return $Y != undefined;
  - pattern-not: return $Y !== undefined;
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: |
        return $X === auth_token;
    - pattern: |
        return auth_token === $X;
    - pattern: |
        return $X === token;
    - pattern: |
        return token === $X;
    - pattern: |
        return $X === hash;
    - pattern: |
        return hash === $X;
    - pattern: |
        return $X === password;
    - pattern: |
        return password === $X;
    - pattern: |
        return $X === pass;
    - pattern: |
        return pass === $X;
    - pattern: |
        return $X === apiKey;
    - pattern: |
        return apiKey === $X;
    - pattern: |
        return $X === apiSecret;
    - pattern: |
        return apiSecret === $X;
    - pattern: |
        return $X === api_key;
    - pattern: |
        return api_key === $X;
    - pattern: |
        return $X === api_secret;
    - pattern: |
        return api_secret === $X;
    - pattern: |
        return $X === secret;
    - pattern: |
        return secret === $X;
    - pattern: |
        return $X === api;
    - pattern: |
        return api === $X;
    - pattern: |
        return $X == auth_token;
    - pattern: |
        return auth_token == $X;
    - pattern: |
        return $X == token;
    - pattern: |
        return token == $X;
    - pattern: |
        return $X == hash;
    - pattern: |
        return hash == $X;
    - pattern: |
        return $X == password;
    - pattern: |
        return password == $X;
    - pattern: |
        return $X == pass;
    - pattern: |
        return pass == $X;
    - pattern: |
        return $X == apiKey;
    - pattern: |
        return apiKey == $X;
    - pattern: |
        return $X == apiSecret;
    - pattern: |
        return apiSecret == $X;
    - pattern: |
        return $X == api_key;
    - pattern: |
        return api_key == $X;
    - pattern: |
        return $X == api_secret;
    - pattern: |
        return api_secret == $X;
    - pattern: |
        return $X == secret;
    - pattern: |
        return secret == $X;
    - pattern: |
        return $X == api;
    - pattern: |
        return api == $X;
    - pattern: |
        return $X !== auth_token;
    - pattern: |
        return auth_token !== $X;
    - pattern: |
        return $X !== token;
    - pattern: |
        return token !== $X;
    - pattern: |
        return $X !== hash;
    - pattern: |
        return hash !== $X;
    - pattern: |
        return $X !== password;
    - pattern: |
        return password !== $X;
    - pattern: |
        return $X !== pass;
    - pattern: |
        return pass !== $X;
    - pattern: |
        return $X !== apiKey;
    - pattern: |
        return apiKey !== $X;
    - pattern: |
        return $X !== apiSecret;
    - pattern: |
        return apiSecret !== $X;
    - pattern: |
        return $X !== api_key;
    - pattern: |
        return api_key !== $X;
    - pattern: |
        return $X !== api_secret;
    - pattern: |
        return api_secret !== $X;
    - pattern: |
        return $X !== secret;
    - pattern: |
        return secret !== $X;
    - pattern: |
        return $X !== api;
    - pattern: |
        return api !== $X;
    - pattern: |
        return $X != auth_token;
    - pattern: |
        return auth_token != $X;
    - pattern: |
        return $X != token;
    - pattern: |
        return token != $X;
    - pattern: |
        return $X != hash;
    - pattern: |
        return hash != $X;
    - pattern: |
        return $X != password;
    - pattern: |
        return password != $X;
    - pattern: |
        return $X != pass;
    - pattern: |
        return pass != $X;
    - pattern: |
        return $X != apiKey;
    - pattern: |
        return apiKey != $X;
    - pattern: |
        return $X != apiSecret;
    - pattern: |
        return apiSecret != $X;
    - pattern: |
        return $X != api_key;
    - pattern: |
        return api_key != $X;
    - pattern: |
        return $X != api_secret;
    - pattern: |
        return api_secret != $X;
    - pattern: |
        return $X != secret;
    - pattern: |
        return secret != $X;
    - pattern: |
        return $X != api;
    - pattern: |
        return api != $X;
  message: 'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable
    to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-208: Observable Timing Discrepancy'
- id: ajinabraham.njsscan.tls_node.node_tls_reject
  patterns:
  - pattern-either:
    - pattern: |
        $X.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
    - pattern: |
        $X.env['NODE_TLS_REJECT_UNAUTHORIZED']= '0'
  message: Setting 'NODE_TLS_REJECT_UNAUTHORIZED' to 0 will allow node server to accept
    self signed certificates and is not a secure behaviour.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-295: Improper Certificate Validation'
- id: ajinabraham.njsscan.tls_node.node_curl_ssl_verify_disable
  patterns:
  - pattern: |
      $X(..., {SSL_VERIFYPEER : 0}, ...)
  message: SSL Certificate verification for node-curl is disabled.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-599: Missing Validation of OpenSSL Certificate'
- id: ajinabraham.njsscan.nosql_find_injection.node_nosqli_injection
  patterns:
  - pattern-not-inside: |
      $SANITIZE = require('mongo-sanitize')
      ...
      $SANITIZE(...)
      ...
  - pattern-either:
    - pattern: |
        $OBJ.findOne({$KEY : <... $REQ.$FOO.$BAR ...> }, ...)
    - pattern: |
        $OBJ.findOne({$KEY: <... $REQ.$FOO ...> }, ...)
    - pattern: |
        $INP = <... $REQ.$FOO.$BAR ...>;
        ...
        $OBJ.findOne({$KEY : <... $INP ...> }, ...)
    - pattern: |
        $INP = <... $REQ.$FOO ...>;
        ...
        $OBJ.findOne({$KEY: <... $INP ...> }, ...)
    - pattern: |
        $QUERY = {$KEY: <... $REQ.$FOO.$BAR ...>};
        ...
        $OBJ.findOne($QUERY, ...)
    - pattern: |
        $QUERY = {$KEY: <... $REQ.$FOO ...>};
        ...
        $OBJ.findOne($QUERY, ...)
    - pattern: |
        $INP = <... $REQ.$FOO.$BAR ...>;
        ...
        $QUERY = {$KEY : <... $INP ...> };
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...)
    - pattern: |
        $INP = <... $REQ.$FOO ...>;
        ...
        $QUERY = {$KEY : <... $INP ...> };
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...)
    - pattern: |
        $QUERY[$KEY] = <... $REQ.$FOO.$BAR ...>;
        ...
        $OBJ.findOne($QUERY, ...)
    - pattern: |
        $QUERY[$KEY] = <... $REQ.$FOO ...>;
        ...
        $OBJ.findOne($QUERY, ...)
    - pattern: |
        $INP = <... $REQ.$FOO.$BAR ...>;
        ...
        $QUERY[$KEY] = <... $INP ...>;
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...)
    - pattern: |
        $INP = <... $REQ.$FOO ...>;
        ...
        $QUERY[$KEY] = <... $INP ...>;
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...)
  message: Untrusted user input in findOne() function can result in NoSQL Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
- id: ajinabraham.njsscan.nosql_injection.node_nosqli_js_injection
  patterns:
  - pattern-either:
    - pattern: |
        $OBJ.$FUNC({$where: <... $REQ.$FOO.$BAR ...>}, ...)
    - pattern: |
        $OBJ.$FUNC({$where: <... $REQ.$QUERY ...>}, ...)
    - pattern: |
        $NSQL = <... $REQ.$QUERY.$...>;
        ...
        $OBJ.$FUNC({$where: <... $NSQL ...>}, ...)
    - pattern: |
        $NSQL = <... $REQ.$QUERY ...>;
        ...
        $OBJ.$FUNC({$where: <... $NSQL ...>}, ...)
    - pattern: |
        $INP = $REQ.$FOO.$BAR;
        ...
        $QRY = {$where: <... $INP ...>};
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...)
    - pattern: |
        $INP = $REQ.$FOO;
        ...
        $QRY = {$where: <... $INP ...>};
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...)
    - pattern: |
        $QRY["$where"] = <... $REQ.$FOO ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...)
    - pattern: |
        $QRY["$where"] = <... $REQ.$FOO.$BAR ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...)
    - pattern: |
        $INP = $REQ.$FOO;
        ...
        $QRY["$where"] = <... $INP ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...)
    - pattern: |
        $INP = $REQ.$FOO.$BAR;
        ...
        $QRY["$where"] = <... $INP ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...)
  message: Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript
    Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
- id: ajinabraham.njsscan.eval_yaml_deserialize.yaml_deserialize
  patterns:
  - pattern-inside: |
      require('js-yaml')
      ...
  - pattern: |
      $X.load(...)
  message: User controlled data in 'yaml.load()' function can result in Remote Code
    Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
- id: ajinabraham.njsscan.sql_injection.node_sqli_injection
  patterns:
  - pattern-either:
    - pattern: |
        $CON.query(<... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $CON.query(<... $REQ.$QUERY ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY.$VAR ...>;
        ...
        $CON.query(<... $SQL ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY ...>;
        ...
        $CON.query(<... $SQL ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $CON.query(<... $SQL ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $CON.query(<... $SQL ...>, ...)
  message: Untrusted input concatinated with raw SQL query can result in SQL Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
- id: ajinabraham.njsscan.sql_injection.node_knex_sqli_injection
  patterns:
  - pattern-either:
    - pattern-inside: |
        $KNEX = require('knex')
        ...
    - pattern-inside: |
        $KNEX = require('knex')(...)
        ...
  - pattern-either:
    - pattern: |
        $K.raw(<... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $K.raw(<... $REQ.$QUERY ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY.$VAR ...>;
        ...
        $K.raw(<... $SQL ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY ...>;
        ...
        $K.raw(<... $SQL ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $K.raw(<... $SQL ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $K.raw(<... $SQL ...>, ...)
    - pattern: |
        $K.whereRaw(<... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $K.whereRaw(<... $REQ.$QUERY ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY.$VAR ...>;
        ...
        $K.whereRaw(<... $SQL ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY ...>;
        ...
        $K.whereRaw(<... $SQL ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $K.whereRaw(<... $SQL ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $K.whereRaw(<... $SQL ...>, ...)
  message: Untrusted input concatinated with raw SQL query using knex raw()  or whereRaw()
    functions can result in SQL Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
- id: ajinabraham.njsscan.express_bodyparser_dos.express_bodyparser
  patterns:
  - pattern-inside: |
      $APP = express()
      ...
  - pattern-inside: |
      $APP.use(...)
  - pattern: $X.bodyParser(...)
  message: POST Request to Express Body Parser 'bodyParser()' can create Temporary
    files and consume space.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
- id: ajinabraham.njsscan.layer7_object_dos.layer7_object_dos
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern-inside: |
        $OBJ = $REQ.body;
        ...
    - pattern-inside: |
        $OBJ = $REQ.body.$FOO;
        ...
  - pattern-inside: |
      for(...){...}
  - pattern: |
      $OBJ.length
  message: Layer7 Denial of Service. Looping over user controlled objects can result
    in DoS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
- id: ajinabraham.njsscan.regex_dos.regex_dos
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $REGEX.test(<... $REQ ...>)
    - pattern: |
        $REGEX.test(<... $REQ.$QUERY ...>)
    - pattern: |
        $REGEX.test(<... $REQ.$BODY.$PARAM ...>)
    - pattern: |
        $INP = <... $REQ ...>;
        ...
        $REGEX.test(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $REGEX.test(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$BODY.$PARAM ...>;
        ...
        $REGEX.test(<... $INP ...>)
    - pattern: |
        /.../g.exec(<... $REQ ...>)
    - pattern: |
        /.../g.exec(<... $REQ.$QUERY ...>)
    - pattern: |
        /.../.exec(<... $REQ.$BODY.$PARAM ...>)
    - pattern: |
        $INP = <... $REQ ...>;
        ...
        /.../.exec(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        /.../.exec(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$BODY.$PARAM ...>;
        ...
        /.../.exec(<... $INP ...>)
    - pattern: |
        $RE = /.../;
        ...
        $RE.exec(<... $REQ ...>)
    - pattern: |
        $RE = /.../;
        ...
        $RE.exec(<... $REQ.$QUERY ...>)
    - pattern: |
        $RE = /.../;
        ...
        $RE.exec(<... $REQ.$BODY.$PARAM ...>)
  message: Ensure that the regex used to compare with user supplied input is safe
    from regular expression denial of service.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-185: Incorrect Regular Expression'
- id: ajinabraham.njsscan.regex_injection.regex_injection_dos
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = new RegExp(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM.$BAR ...>;
        ...
        $RE = new RegExp(<... $INP ...>)
    - pattern: |
        new RegExp(<... $REQ.$PARAM ...>)
    - pattern: |
        new RegExp(<... $REQ.$PARAM.$BAR ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = $STR.search(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM.$FOO ...>;
        ...
        $RE = $STR.search(<... $INP ...>)
    - pattern: |
        $STR.search(<... $REQ.$PARAM ...>)
    - pattern: |
        $STR.search(<... $REQ.$PARAM.$BAR ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = $STR.match(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM.$FOO ...>;
        ...
        $RE = $STR.match(<... $INP ...>)
    - pattern: |
        $STR.match(<... $REQ.$PARAM ...>)
    - pattern: |
        $STR.match(<... $REQ.$PARAM.$BAR ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = $STR.split(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$PARAM.$FOO ...>;
        ...
        $RE = $STR.split(<... $INP ...>)
    - pattern: |
        $STR.split(<... $REQ.$PARAM ...>)
    - pattern: |
        $STR.split(<... $REQ.$PARAM.$BAR ...>)
  message: User controlled data in RegExp() can make the application vulnerable to
    layer 7 DoS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
- id: ajinabraham.njsscan.security_electronjs.electron_disable_websecurity
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {webSecurity: false}})
    - pattern: |
        var $X = {webPreferences: {webSecurity: false}};
  message: Disabling webSecurity will disable the same-origin policy and allows the
    execution of insecure code from any domain.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: ajinabraham.njsscan.security_electronjs.electron_allow_http
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {allowRunningInsecureContent: true}})
    - pattern: |
        var $X = {webPreferences: {allowRunningInsecureContent: true}};
  message: Application can load content over HTTP and that makes the app vulnerable
    to Man in the middle attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
- id: ajinabraham.njsscan.security_electronjs.electron_blink_integration
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {enableBlinkFeatures: '...'}})
    - pattern: |
        var $X = {webPreferences: {enableBlinkFeatures: '...'}};
  message: Blink's expirimental features are enabled in this application. Some of
    the features may affect the security of the application.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: ajinabraham.njsscan.security_electronjs.electron_nodejs_integration
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {nodeIntegration: true}})
    - pattern: |
        var $X = {webPreferences: {nodeIntegration: true}};
  message: Node integration exposes node.js APIs to the electron app and this can
    introduce remote code execution vulnerabilities to the application if the app
    is vulnerable to Cross Site Scripting (XSS).
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: ajinabraham.njsscan.security_electronjs.electron_context_isolation
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {contextIsolation: false}})
    - pattern: |
        var $X = {webPreferences: {contextIsolation: false}};
  message: Disabling context isolation can introduce Prototype Pollution vulnerabilities.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: ajinabraham.njsscan.security_electronjs.electron_experimental_features
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {experimentalFeatures: true}})
    - pattern: |
        var $X = {webPreferences: {experimentalFeatures: true}};
  message: Experimental features are not expected to be in production ready applications.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: ajinabraham.njsscan.eval_deserialize.serializetojs_deserialize
  patterns:
  - pattern-inside: |
      require('serialize-to-js')
      ...
  - pattern: |
      $X.deserialize(...)
  message: User controlled data in 'unserialize()' or 'deserialize()' function can
    result in Object Injection or Remote Code Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
- id: ajinabraham.njsscan.eval_deserialize.node_deserialize
  patterns:
  - pattern-inside: |
      require('node-serialize')
      ...
  - pattern: |
      $X.unserialize(...)
  message: User controlled data in 'unserialize()' or 'deserialize()' function can
    result in Object Injection or Remote Code Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
- id: ajinabraham.njsscan.eval_drpc_deserialize.grpc_insecure_connection
  patterns:
  - pattern-inside: |
      require('grpc')
      ...
  - pattern-either:
    - pattern: |
        $GRPC($ADDR, ..., $CREDENTIALS.createInsecure(), ...)
    - pattern: |
        $CREDS = <... $CREDENTIALS.createInsecure() ...>;
        ...
        $GRPC($ADDR, ..., $CREDS, ...)
  message: Found an insecure gRPC connection. This creates a connection without encryption
    to a gRPC client/server. A malicious attacker could  tamper with the gRPC message,
    which could compromise the machine.
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: ERROR
  languages:
  - javascript
- id: ajinabraham.njsscan.eval_node.eval_nodejs
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        new Function(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        new Function(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        eval(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        eval(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        setTimeout(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        setTimeout(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        setInterval(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        setInterval(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        new Function(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        new Function(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        eval(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        eval(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        setTimeout(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        setTimeout(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        setInterval(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        setInterval(..., <... $INP ...>, ...)
  message: User controlled data in eval() or similar functions may result in Server
    Side Injection or Remote Code Injection
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
- id: ajinabraham.njsscan.eval_require.eval_require
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        require(<... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$QUERY.$FOO ...>;
        ...
        require(<... $INP ...>)
    - pattern: require(<... $REQ.$QUERY.$FOO ...>)
    - pattern: require(<... $REQ.$BODY ...>)
  message: Untrusted user input in `require()` function allows an attacker to load
    arbitrary code.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
- id: ajinabraham.njsscan.eval_sandbox.sandbox_code_injection
  patterns:
  - pattern-inside: |
      require('sandbox')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $S.run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $S.run(<... $CODE ...>,...)
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...)
    - pattern: |
        $S.run(<... $REQ.$BODY ...>,...)
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $S.run(<... $CODE ...>,...)
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$BODY ...>,...)
    - pattern: |-
        $CODE = <... $REQ.$BODY ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...)
  message: Unrusted data in `sandbox` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.eval_vm2_injection.vm2_code_injection
  patterns:
  - pattern-inside: |
      require('vm2')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.run(<... $CODE ...>,...)
    - pattern: |
        new VM(...).run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        new NodeVM(...).run(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new NodeVM(...).run(<... $CODE ...>,...)
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VMScript(<... $CODE ...>,...)
    - pattern: |
        $VM.run(<... $REQ.$BODY ...>,...)
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $VM.run(<... $CODE ...>,...)
    - pattern: |
        new VM(...).run(<... $REQ.$BODY ...>,...)
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new VM(...).run($CODE,...)
    - pattern: |
        new NodeVM(...).run(<... $REQ.$BODY ...>,...)
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new NodeVM(...).run(<... $CODE ...>,...)
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new VMScript(<... $CODE ...>,...)
  message: Untrusted user input reaching `vm2` can result in code injection.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.eval_vm2_injection.vm2_context_injection
  patterns:
  - pattern-inside: |
      require('vm2')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        new VM({sandbox: <... $REQ.$QUERY.$FOO ...>},...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        new NodeVM({sandbox: <... $REQ.$QUERY.$FOO ...>},...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |
        new VM({sandbox: <... $REQ.$BODY ...>},...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$BODY ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...)
    - pattern: |
        new NodeVM({sandbox: <... $REQ.$BODY ...>},...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...)
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$BODY ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...)
    - pattern: |-
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...)
  message: Untrusted user input reaching `vm2` sandbox can result in context injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.eval_vm_injection.vm_runincontext_injection
  patterns:
  - pattern-inside: |
      require('vm')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...)
  message: Untrusted user input in `vm.runInContext()` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.eval_vm_injection.vm_runinnewcontext_injection
  patterns:
  - pattern-inside: |
      require('vm')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.runInNewContext($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VM.runInNewContext($CODE,<... $REQ.$BODY ...>,...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...)
  message: Untrusted user input in `vm.runInNewContext()` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.eval_vm_injection.vm_compilefunction_injection
  patterns:
  - pattern-inside: |
      require('vm')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$QUERY.$FOO ...>},...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>; ... $CONTEXT = {$NAME: <... $VAR ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $OPTS = {parsingContext: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$BODY ...>},...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>; ... $CONTEXT = {$NAME: <... $VAR ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...)
    - pattern: |
        $OPTS = {parsingContext: <... $REQ.$BODY ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
  message: Untrusted user input in `vm.compileFunction()` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.eval_vm_injection.vm_code_injection
  patterns:
  - pattern-inside: |
      $VM = require('vm')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $VM.runInContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($INPUT,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($INPUT,...)
    - pattern: $VM.runInNewContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInNewContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInNewContext($INPUT,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInNewContext($INPUT,...)
    - pattern: $VM.runInThisContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInThisContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInThisContext($INPUT,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInThisContext($INPUT,...)
    - pattern: $VM.compileFunction(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.compileFunction(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.compileFunction($INPUT,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.compileFunction($INPUT,...)
    - pattern: new $VM.Script(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: new $VM.Script(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $VM.Script($INPUT,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        new $VM.Script($INPUT,...)
  message: Untrusted user input reaching `vm` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.server_side_template_injection.server_side_template_injection
  patterns:
  - pattern-either:
    - pattern-inside: |
        require('handlebars')
        ...
    - pattern-inside: |
        require('pug')
        ...
    - pattern-inside: |
        require('hamljs')
        ...
    - pattern-inside: |
        require('ejs')
        ...
    - pattern-inside: |
        require('squirrelly')
        ...
    - pattern-inside: |
        require('eta')
        ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $HB.compile(..., <... $REQ.$FOO ...>, ...)
    - pattern: |
        $HB.compile(..., <... $REQ.$FOO.$BAR ...>, ...)
    - pattern: |
        $X = <... $REQ.$FOO ...>;
        ...
        $HB.compile(..., <... $X ...>, ...)
    - pattern: |
        $X = <... $REQ.$FOO.$BAR ...>;
        ...
        $HB.compile(..., <... $X ...>, ...)
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO ...>, ...)
        ...
        $HB.compile(..., <... $X ...>, ...)
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO.$BAR ...>, ...)
        ...
        $HB.compile(..., <... $X ...>, ...)
    - pattern: |
        $HB.Compile(..., <... $REQ.$FOO ...>, ...)
    - pattern: |
        $HB.Compile(..., <... $REQ.$FOO.$BAR ...>, ...)
    - pattern: |
        $X = <... $REQ.$FOO ...>;
        ...
        $HB.Compile(..., <... $X ...>, ...)
    - pattern: |
        $X = <... $REQ.$FOO.$BAR ...>;
        ...
        $HB.Compile(..., <... $X ...>, ...)
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO ...>, ...)
        ...
        $HB.Compile(..., <... $X ...>, ...)
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO.$BAR ...>, ...)
        ...
        $HB.Compile(..., <... $X ...>, ...)
  message: Untrusted user input in templating engine's compile() function can result
    in Remote Code Execution via server side template injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: ajinabraham.njsscan.exec_os_command.generic_os_command_exec
  patterns:
  - pattern-inside: |
      require('child_process')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $EXEC.exec(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $EXEC.exec(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $EXEC.execSync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $EXEC.execSync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $EXEC.exec(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $EXEC.exec(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $EXEC.execSync(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $EXEC.execSync(..., <... $INP ...>, ...)
  message: User controlled data in 'child_process.exec()' can result in Remote OS
    Command Execution.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: ajinabraham.njsscan.exec_os_command.generic_os_command_exec2
  patterns:
  - pattern-inside: |
      var {$EXEC} = require('child_process')
      ...
  - pattern-inside: |
      $APP.$METHOD(..., function $FUNC($REQ, $RES, ...){ ... })
  - pattern-either:
    - pattern: |
        exec(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        exec(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        execSync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        execSync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        exec(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        exec(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        execSync(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        execSync(..., <... $INP ...>, ...)
  message: User controlled data in 'child_process.exec()' can result in Remote OS
    Command Execution.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: ajinabraham.njsscan.exec_shelljs.shelljs_os_command_exec
  patterns:
  - pattern-inside: |
      require('shelljs')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $EXEC.exec(<... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $EXEC.exec( <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $EXEC.exec(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $EXEC.exec(<... $INP ...>, ...)
  message: User controlled data in 'shelljs.exec()' can result in Remote OS Command
    Execution.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: ajinabraham.njsscan.error_disclosure.node_error_disclosure
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $ERR = $ERROR.stack;
        ...
        $RES.end($ERR)
    - pattern: |
        $ERR = $ERROR.stack;
        ...
        $RES.send($ERR)
    - pattern: |
        $RES.end($ERR.stack)
    - pattern: |
        $RES.send($ERR.stack)
  message: Error messages with stack traces can expose sensitive information about
    the application.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-209: Generation of Error Message Containing Sensitive Information'
- id: ajinabraham.njsscan.error_disclosure.generic_error_disclosure
  patterns:
  - pattern-either:
    - pattern: |
        console.trace(...)
    - pattern: |
        try {
            ...
        } catch($ERR){
            console.error(<... $ERR ...>, ...)
        }
  message: Error messages with stack traces may expose sensitive information about
    the application.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-209: Generation of Error Message Containing Sensitive Information'
- id: ajinabraham.njsscan.hardcoded_passport.hardcoded_passport_secret
  pattern-either:
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      new $F({clientSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      var $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      new $F({clientSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      new $F({secretOrKey: "..."}, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $P.secretOrKey = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      var $P = {secretOrKey: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      var $S = "...";
      ...
      new $F({secretOrKey: $S}, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      var $S = "...";
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {secretOrKey: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $P.secretOrKey = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $P = {secretOrKey: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      new $F({secretOrKey: $S}, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      var $P = {secretOrKey: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P = {secretOrKey: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      var $P = {consumerSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      new $F({consumerSecret: $S}, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      new $F({clientSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      new $F({clientSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      var $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      var $P = {consumerSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      var $S = "...";
      ...
      new $F({consumerSecret: $S}, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      var $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      var $P = {consumerSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      new $F({consumerSecret: $S}, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...)
  - pattern: |-
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...)
  message: Hardcoded plain text secret used for Passport Strategy. Store it properly
    in an environment variable.
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
  languages:
  - javascript
  severity: ERROR
- id: ajinabraham.njsscan.hardcoded_secrets.node_password
  patterns:
  - pattern-not: $X = ''
  - pattern-not: $OBJ[$X] = ''
  - pattern-not: $OBJ.$X = ''
  - pattern-either:
    - pattern: |
        $X = '...'
  - metavariable-regex:
      metavariable: $X
      regex: (?i:.*pass.*)
  message: A hardcoded password in plain text is identified. Store it properly in
    an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: ajinabraham.njsscan.hardcoded_secrets.node_username
  patterns:
  - pattern-not: $X = ''
  - pattern-not: $OBJ[$X] = ''
  - pattern-not: $OBJ.$X = ''
  - pattern-either:
    - pattern: |
        $X = '...'
  - metavariable-regex:
      metavariable: $X
      regex: (?i:.*user.*)
  message: A hardcoded username in plain text is identified. Store it properly in
    an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: ajinabraham.njsscan.hardcoded_secrets.node_api_key
  patterns:
  - pattern-not: $X = ''
  - pattern-not: $OBJ[$X] = ''
  - pattern-not: $OBJ.$X = ''
  - pattern-not: $OBJ($X, '')
  - pattern-either:
    - pattern: |
        $X = '...'
    - pattern: |
        $Y($X, '...')
  - metavariable-regex:
      metavariable: $X
      regex: (?i).*(api_key|apikey)
  message: A hardcoded API Key is identified. Store it properly in an environment
    variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: ajinabraham.njsscan.hardcoded_secrets.node_secret
  patterns:
  - pattern-not: $X = ''
  - pattern-not: $OBJ[$X] = ''
  - pattern-not: $OBJ.$X = ''
  - pattern-not: $OBJ($X, '')
  - pattern-either:
    - pattern: |
        $X = '...'
    - pattern: |
        $Y($X, '...')
  - metavariable-regex:
      metavariable: $X
      regex: (?i:.*secret)
  message: A hardcoded secret is identified. Store it properly in an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: ajinabraham.njsscan.logic_bypass.node_logic_bypass
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $REQ.$FOO.$BAR !== $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR === $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR >= $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR <= $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR < $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR > $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO['...'] !== $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] === $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] >= $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] <= $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] < $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] > $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO('...') !== $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') === $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') >= $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') <= $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') < $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') > $REQ.$ZOO('...')
  message: User controlled data is used for application business logic decision making.
    This expose protected data or functionality.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-807: Reliance on Untrusted Inputs in a Security Decision'
- id: ajinabraham.njsscan.header_cookie.cookie_session_default
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {name:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.name = ...;
      ...
      $SESSION($OPTS,...)
  message: Consider changing the default session cookie name. An attacker can use
    it to fingerprint the server and target attacks accordingly.
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.header_cookie.cookie_session_no_secure
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{secure:true}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.secure = true;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.secure = true;
      ...
      $SESSION($OPTS,...)
  message: 'Default session middleware settings: `secure` not set. It ensures the
    browser only sends the cookie over HTTPS.'
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.header_cookie.cookie_session_no_samesite
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{sameSite:true}} ...>,...)
  - pattern-not-inside: $SESSION(<... {cookie:{sameSite:'lax'}} ...>,...)
  - pattern-not-inside: $SESSION(<... {cookie:{sameSite:'strict'}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{sameSite:true}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {sameSite:true} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {sameSite:true} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.sameSite = true;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.sameSite = true;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{sameSite:'strict'}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {sameSite:'strict'} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {sameSite:'strict'} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.sameSite = 'strict';
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.sameSite = 'strict';
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{sameSite:'strict'}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {sameSite:'strict'} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {sameSite:'strict'} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.sameSite = 'strict';
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.sameSite = 'strict';
      ...
      $SESSION($OPTS,...)
  message: 'Default session middleware settings: `sameSite` attribute is not configured
    to strict or lax. These configurations provides protection against Cross Site
    Request Forgery attacks.'
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-1275: Sensitive Cookie with Improper SameSite Attribute'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.header_cookie.cookie_session_no_httponly
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern-either:
    - pattern-inside: $SESSION(<... {cookie:{httpOnly:false}} ...>,...)
    - pattern-inside: |
        $OPTS = <... {cookie:{httpOnly:false}} ...>;
        ...
        $SESSION($OPTS,...)
    - pattern-inside: |
        $OPTS = ...;
        ...
        $COOKIE = <... {httpOnly:false} ...>;
        ...
        $SESSION($OPTS,...)
    - pattern-inside: |
        $OPTS = ...;
        ...
        $OPTS.cookie = <... {httpOnly:false} ...>;
        ...
        $SESSION($OPTS,...)
    - pattern-inside: |
        $OPTS = ...;
        ...
        $COOKIE.httpOnly = false;
        ...
        $SESSION($OPTS,...)
    - pattern-inside: |
        $OPTS = ...;
        ...
        $OPTS.cookie.httpOnly = false;
        ...
        $SESSION($OPTS,...)
  message: 'Session middleware settings: `httpOnly` is explicitly set to false.  It
    ensures that sensitive cookies cannot be accessed by client side  JavaScript and
    helps to protect against cross-site scripting attacks.'
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.header_cookie.cookie_session_no_domain
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{domain:...}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.domain = ...;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.domain = ...;
      ...
      $SESSION($OPTS,...)
  message: 'Default session middleware settings: `domain` not set. It indicates the
    domain of the cookie; use it to compare against the domain of the server in which
    the URL is being requested. If they match, then check the path attribute next.'
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.header_cookie.cookie_session_no_path
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{path:...}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.path = ...;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.path = ...;
      ...
      $SESSION($OPTS,...)
  message: 'Default session middleware settings: `path` not set. It indicates the
    path of the cookie; use it to compare against the request path. If this and domain
    match, then send the cookie in the request.'
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.dlint.dlint-equivalent.insecure-pycrypto-use
  message: The Python third-party 'Crypto' module is unmaintained and has known vulnerabilities
    and exploits
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO133.md
  pattern: Crypto.$ANYTHING
- id: ajinabraham.njsscan.header_cookie.cookie_session_no_maxage
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session')
        ...
    - pattern-inside: |
        $SESSION = require('express-session')
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{maxAge:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{maxAge:...}} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {maxAge:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {maxAge:...} ...>;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.maxAge = ...;
      ...
      $SESSION($OPTS,...)
  - pattern-not-inside: |-
      $OPTS = ...;
      ...
      $OPTS.cookie.maxAge = ...;
      ...
      $SESSION($OPTS,...)
  message: 'Session middleware settings: `maxAge` not set. Use it to set expiration
    date for cookies.'
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-613: Insufficient Session Expiration'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.header_cors_star.generic_cors
  patterns:
  - pattern: |
      $APP.options('*', cors(...))
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: ajinabraham.njsscan.header_cors_star.express_cors
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $APP.options('*', cors(...))
    - pattern: |
        $RES.set("=~/access-control-allow-origin/i", '*', ...)
    - pattern: |
        $RES.set(..., { "=~/access-control-allow-origin/i" : '*' }, ...)
    - pattern: |
        $RES.header("=~/access-control-allow-origin/i", '*', ...)
    - pattern: |
        $RES.writeHead(..., {"=~/access-control-allow-origin/i": '*' }, ...)
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: ajinabraham.njsscan.header_helmet_disabled.helmet_feature_disabled
  patterns:
  - pattern-either:
    - pattern: |
        $HELMET(..., {frameguard: false}, ...)
    - pattern: |
        $HELMET(..., {contentSecurityPolicy: false}, ...)
    - pattern: |
        $HELMET(..., {permittedCrossDomainPolicies: false}, ...)
    - pattern: |
        $HELMET(..., {dnsPrefetchControl: false}, ...)
    - pattern: |
        $HELMET(..., {expectCt: false}, ...)
    - pattern: |
        $HELMET(..., {featurePolicy: false}, ...)
    - pattern: |
        $HELMET(..., {hsts: false}, ...)
    - pattern: |
        $HELMET(..., {ieNoOpen: false}, ...)
    - pattern: |
        $HELMET(..., {noSniff: false}, ...)
    - pattern: |
        $HELMET(..., {hidePoweredBy: false}, ...)
    - pattern: |
        $HELMET(..., {referrerPolicy: false}, ...)
    - pattern: |
        $HELMET(..., {xssFilter: false}, ...)
  message: One or more Security Response header is explicitly disabled in Helmet.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: ajinabraham.njsscan.header_injection.generic_header_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = $REQ.$QUERY;
        ...
        $RES.set(..., <... $INP ...>, ...)
    - pattern: |
        $INP = $REQ.$QUERY.$VAR;
        ...
        $RES.set(..., <... $INP ...>, ...)
    - pattern: |
        $INP = $REQ.$VAR;
        ...
        $RES.set(..., { $X: <... $INP ...>}, ...)
    - pattern: |
        $INP = $REQ.$QUERY.$FOO;
        ...
        $RES.set(..., { $X: <... $INP ...>}, ...)
    - pattern: |
        $INP = $REQ.$VAR;
        ...
        $RES.writeHead(..., { $X: <... $INP ...> }, ...)
    - pattern: |
        $INP = $REQ.$QUERY.$FOO;
        ...
        $RES.writeHead(..., { $X: <... $INP ...> }, ...)
    - pattern: |
        $RES.set(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $RES.set(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $RES.set(..., { $X: <... $REQ.$VAR ...>}, ...)
    - pattern: |
        $RES.set(..., { $X: <... $REQ.$QUERY.$FOO ...>}, ...)
    - pattern: |
        $RES.writeHead(..., { $X: <... $REQ.$VAR ...> }, ...)
    - pattern: |
        $RES.writeHead(..., { $X: <... $REQ.$QUERY.$FOO ...> }, ...)
  message: Untrusted user input in response header will result in HTTP Header Injection
    or Response Splitting Attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax'
- id: ajinabraham.njsscan.header_xss_protection.header_xss_lusca
  patterns:
  - pattern-inside: |
      $X = require('lusca')
      ...
  - pattern-not: |
      $X.use(helmet())
  - pattern-either:
    - pattern: |
        $X.xssProtection(false)
    - pattern: |
        $X({ xssProtection: false})
  message: X-XSS-Protection header is set to 0. This will disable the browser's XSS
    Filter.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: ajinabraham.njsscan.ssrf_node.node_ssrf
  patterns:
  - pattern-either:
    - pattern-inside: |
        require('request')
        ...
    - pattern-inside: |
        require('axios')
        ...
    - pattern-inside: |
        require('needle')
        ...
    - pattern-inside: |
        require('bent')
        ...
    - pattern-inside: |
        require('urllib')
        ...
    - pattern-inside: |
        require('net')
        ...
    - pattern-inside: |
        require('https')
        ...
    - pattern-inside: |
        require('superagent')
        ...
    - pattern-inside: |
        require('got')
        ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $PKG.get(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.get(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.post(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.post(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.put(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.put(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        needle("=~/^[get|post|put]+$/i", <... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        needle("=~/^[get|post|put]+$/i", <... $REQ.$VAR ...>, ...)
    - pattern: |
        request(<... $REQ.$VAR ...>, ...)
    - pattern: |
        request(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.request(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.request(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        getJSON(<... $REQ.$VAR ...>, ...)
    - pattern: |
        getJSON(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        getBuffer(<... $REQ.$VAR ...>, ...)
    - pattern: |
        getBuffer(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        fetch(<... $REQ.$VAR ...>, ...)
    - pattern: |
        fetch(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $SOCKET.connect($PORT, <... $REQ.$VAR ...>, ...)
    - pattern: |
        $SOCKET.connect($PORT, <... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.get(..., {host: <... $REQ.$VAR ...>}, ...)
    - pattern: |
        $PKG.get(..., {host: <... $REQ.$VAR.$FOO ...>}, ...)
    - pattern: |
        $PKG.get(..., {hostname: <... $REQ.$VAR ...>}, ...)
    - pattern: |
        $PKG.get(..., {hostname: <... $REQ.$VAR.$FOO ...>}, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.get(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.get(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.post(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.post(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.put(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.put(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        needle("=~/^[get|post|put]+$/i", <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        needle("=~/^[get|post|put]+$/i", <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        request(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        request(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.request(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.request(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        getJSON(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        getJSON(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        getBuffer(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        getBuffer(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        fetch(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        fetch(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $SOCKET.connect($PORT, <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $SOCKET.connect($PORT, <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.get(..., {host: <... $INP ...>}, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.get(..., {host: <... $INP ...>}, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.get(..., {hostname: <... $INP ...>}, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.get(..., {hostname: <... $INP ...>}, ...)
  message: User controlled URL in http client libraries can result in Server Side
    Request Forgery (SSRF).
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
- id: ajinabraham.njsscan.header_xss_protection.header_xss_generic
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $RES.header("=~/x-xss-protection/i", 0, ...)
    - pattern: |
        $RES.set("=~/x-xss-protection/i", 0, ...)
    - pattern: |
        $RES.set(..., { "=~/x-xss-protection/i" : 0 }, ...)
    - pattern: |
        $RES.writeHead(..., {"=~/x-xss-protection/i": 0 }, ...)
  message: X-XSS-Protection header is set to 0. This will disable the browser's XSS
    Filter.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: ajinabraham.njsscan.host_header_injection.host_header_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X = <... "=~/.*http[s]*:///i" + $REQ.host ...>;
    - pattern: |
        $X = <... "=~/.*http[s]*:///i" + $REQ["host"] ...>;
    - pattern: |
        $X = <... "=~/.*http[s]*:///i" + $REQ("host") ...>;
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///i" + $REQ.host ...>};
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///i" + $REQ["host"] ...>};
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///i" + $REQ("host") ...>};
    - pattern: |
        $Z = $REQ.host;
        ...
        $X = <... "=~/.*http[s]*:///i" + $Z ...>;
    - pattern: |
        $Z = $REQ["host"];
        ...
        $X = <... "=~/.*http[s]*:///i" + $Z ...>;
    - pattern: |
        $Z = $REQ("host")
        ...
        $X = <... "=~/.*http[s]*:///i" + $Z ...>;
    - pattern: |
        $Z = $REQ.host;
        ...
        $X = { $Y: <... "=~/.*http[s]*:///i" + $REQ.host ...>};
    - pattern: |
        $Z = $REQ["host"];
        ...
        $X = { $Y: <... "=~/.*http[s]*:///i" + $Z ...>};
    - pattern: |
        $Z = $REQ("host")
        ...
        $X = { $Y: <... "=~/.*http[s]*:///i" + $REQ("host") ...>};
  message: Using untrusted Host header for generating dynamic URLs can result in web
    cache and or password reset poisoning.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-20: Improper Input Validation'
- id: ajinabraham.njsscan.jwt_exposed_credentials.jwt_exposed_credentials
  patterns:
  - pattern-either:
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign({password:...},...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign({password:...},...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = {password:...};
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = {password:...};
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = {password:...};
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = {password:...};
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P.password = ...;
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P.password = ...;
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = Object.assign(...,{password:...},...)
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = Object.assign(...,{password:...},...)
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = Object.assign(...,{password:...},...)
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = Object.assign(...,{password:...},...)
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $T = JWT.sign(Object.assign(...,{password:...},...),...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign(Object.assign(...,{password:...},...),...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $T = JWT.sign({$U:{password:...}},...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign({$U:{password:...}},...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = {$U:{password:...}};
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = {$U:{password:...}};
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = {$U:{password:...}};
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = {$U:{password:...}};
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P.$U.password = ...;
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P.$U.password = ...;
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = Object.assign(...,{$U:{password:...}},...)
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $P = Object.assign(...,{$U:{password:...}},...)
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = Object.assign(...,{$U:{password:...}},...)
        ...
        var $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $P = Object.assign(...,{$U:{password:...}},...)
        ...
        $T = JWT.sign($P,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        var $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...)
  severity: ERROR
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
  message: Password is exposed through JWT token payload. This is not encrypted and  the
    password could be compromised. Do not store passwords in JWT tokens.
- id: ajinabraham.njsscan.jwt_exposed_data.jwt_exposed_data
  patterns:
  - pattern-inside: |
      require('jose')
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
    - patterns:
      - pattern-inside: function $F(...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
  message: The object is passed strictly to jose.JWT.sign(...). Make sure  that sensitive
    information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp: A3:2017-Sensitive Data Exposure
    cwe: 'CWE-522: Insufficiently Protected Credentials'
  languages:
  - javascript
- id: ajinabraham.njsscan.jwt_express_hardcoded.jwt_express_hardcoded
  patterns:
  - pattern-inside: |
      $JWT = require('express-jwt')
      ...
  - pattern-either:
    - pattern: |
        $JWT(<... {secret: "..."} ...>,...)
    - pattern: |
        $SECRET = "...";
        ...
        $JWT(<... {secret: $SECRET} ...>,...)
    - pattern: |
        $OPTS = <... {secret: "..."} ...>;
        ...
        $JWT($OPTS,...)
    - pattern: |-
        $SECRET = "...";
        ...
        $OPTS = <... {secret: $SECRET} ...>;
        ...
        $JWT($OPTS,...)
  message: Hardcoded JWT secret or private key was found. Store it properly in  an
    environment variable.
  severity: ERROR
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.jwt_hardcoded.hardcoded_jwt_secret
  patterns:
  - pattern-either:
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $JWT.sign($P, "...", ...)
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $JWT.verify($P, "...", ...)
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $SECRET = "...";
        ...
        $JWT.sign($P, $SECRET, ...)
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $SECRET = "...";
        ...
        $JWT.verify($P, $SECRET, ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $JOSE.JWT.sign($P, "...", ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $JOSE.JWT.verify($P, "...", ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $JOSE.JWT.sign($P, $JOSE.JWK.asKey("..."), ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $JOSE.JWT.verify($P, $JOSE.JWK.asKey("..."), ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.sign($P, $SECRET, ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.verify($P, $SECRET, ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.sign($P, $JOSE.JWK.asKey($SECRET), ...)
    - pattern: |
        $JOSE = require("jose")
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.verify($P, $JOSE.JWK.asKey($SECRET), ...)
  message: Hardcoded JWT secret was found. Store it properly in an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: ajinabraham.njsscan.jwt_none_algorithm.node_jwt_none_algorithm
  patterns:
  - pattern-either:
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $T = $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $T = $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)
    - pattern: |
        $JWT = require("jsonwebtoken")
        ...
        $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWK, JWT } = $JOSE;
        ...
        $T = JWT.verify($P, JWK.None,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWK, JWT } = $JOSE;
        ...
        $T = JWT.verify($P, JWK.None,...)
    - pattern: |
        $JOSE = require("jose")
        ...
        var { JWK, JWT } = $JOSE;
        ...
        JWT.verify($P, JWK.None,...)
  message: Algorithm is set to none for JWT token. This can nullify the integrity
    of JWT signature.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: ajinabraham.njsscan.jwt_not_revoked.jwt_not_revoked
  patterns:
  - pattern-inside: |
      $JWT = require('express-jwt')
      ...
  - pattern: $JWT(...)
  - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
  - pattern-not-inside: |-
      $OPTS = <... {isRevoked:...} ...>;
      ...
      $JWT($OPTS,...)
  message: No token revoking configured for `express-jwt`. A leaked token could still
    be used and unable to be revoked. Consider using function as the `isRevoked` option.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: ajinabraham.njsscan.buffer_noassert.buffer_noassert
  pattern-either:
  - pattern: $OBJ.readUInt8(..., true)
  - pattern: $OBJ.readUInt16LE(..., true)
  - pattern: $OBJ.readUInt16BE(..., true)
  - pattern: $OBJ.readUInt32LE(..., true)
  - pattern: $OBJ.readUInt32BE(..., true)
  - pattern: $OBJ.readInt8(..., true)
  - pattern: $OBJ.readInt16LE(..., true)
  - pattern: $OBJ.readInt16BE(..., true)
  - pattern: $OBJ.readInt32LE(..., true)
  - pattern: $OBJ.readInt32BE(..., true)
  - pattern: $OBJ.readFloatLE(..., true)
  - pattern: $OBJ.readFloatBE(..., true)
  - pattern: $OBJ.readDoubleLE(..., true)
  - pattern: $OBJ.readDoubleBE(..., true)
  - pattern: $OBJ.writeUInt8(..., true)
  - pattern: $OBJ.writeUInt16LE(..., true)
  - pattern: $OBJ.writeUInt16BE(..., true)
  - pattern: $OBJ.writeUInt32LE(..., true)
  - pattern: $OBJ.writeUInt32BE(..., true)
  - pattern: $OBJ.writeInt8(..., true)
  - pattern: $OBJ.writeInt16LE(..., true)
  - pattern: $OBJ.writeInt16BE(..., true)
  - pattern: $OBJ.writeInt32LE(..., true)
  - pattern: $OBJ.writeInt32BE(..., true)
  - pattern: $OBJ.writeFloatLE(..., true)
  - pattern: $OBJ.writeFloatBE(..., true)
  - pattern: $OBJ.writeDoubleLE(..., true)
  - pattern: $OBJ.writeDoubleBE(..., true)
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
  message: Detected usage of noassert in Buffer API, which allows the offset the be
    beyond the end of the buffer. This could result in writing or reading beyond the
    end of the buffer.
- id: ajinabraham.njsscan.open_redirect.express_open_redirect
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X.redirect(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.redirect(..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.redirect(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$FOO ...>;
        ...
        $X.redirect(..., <... $INP ...>, ...)
  message: Untrusted user input in redirect() can result in Open Redirect vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
- id: ajinabraham.njsscan.open_redirect.express_open_redirect2
  patterns:
  - pattern-inside: |
      $APP.$METHOD(..., function $FUNC($REQ, $RES) { ... })
  - pattern-either:
    - pattern: |
        $RES.header(..., "=~/location/i", <... $REQ.$VAR ...>, ...)
    - pattern: |
        $RES.header(..., "=~/location/i", <... $REQ.$VAR.$VARR ...>, ...)
    - pattern: |
        $RES.writeHead(..., "=~/location/i", <... $REQ.$VAR ...>, ...)
    - pattern: |
        $RES.writeHead(..., "=~/location/i", <... $REQ.$VAR.$VARR ...>, ...)
    - pattern: |
        $RES.writeHead(..., {"=~/location/i": <... $REQ.$VAR ...> }, ...)
    - pattern: |
        $RES.writeHead(..., {"=~/location/i": <... $REQ.$VAR.$VARR ...> }, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $RES.header(..., "=~/location/i", <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$VARR ...>;
        ...
        $RES.header(..., "=~/location/i", <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $RES.writeHead(..., "=~/location/i", <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$VARR ...>;
        ...
        $RES.writeHead(..., "=~/location/i", <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $RES.writeHead(..., {"=~/location/i": <... $INP ...> }, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$VARR ...>;
        ...
        $RES.writeHead(..., {"=~/location/i": <... $INP ...> }, ...)
  message: Untrusted user input in response header('Location') can result in Open
    Redirect vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
- id: ajinabraham.njsscan.ssrf_phantomjs.phantom_ssrf
  patterns:
  - pattern-inside: |
      require('phantom')
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.open(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.open(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.open(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.open(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.openUrl(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.openUrl(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateJavaScript(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateJavaScript(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.property("content",<... $INPUT ...>,...)
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.property("content",<... $INPUT ...>,...)
  message: |
    If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
- id: ajinabraham.njsscan.ssrf_playwright.playwright_ssrf
  patterns:
  - pattern-inside: |
      require('playwright')
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.goto(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluate($CODE,..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluate($CODE,..., <... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateHandle($CODE,..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluateHandle($CODE,..., <... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY.$FOO ...>, ...)
    - pattern: $CONTEXT.addInitScript(<... $REQ.$BODY ...>,...)
    - pattern: $CONTEXT.addInitScript(<... $REQ.$BODY.$FOO ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate($CODE,..., <... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate($CODE,..., <... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle($CODE,..., <... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle($CODE,..., <... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $CONTEXT.addInitScript($INPUT,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $CONTEXT.addInitScript($INPUT,...)
  message: If unverified user data can reach the `puppeteer` methods it can result
    in Server-Side Request Forgery vulnerabilities.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
- id: ajinabraham.njsscan.ssrf_puppeteer.puppeteer_ssrf
  patterns:
  - pattern-inside: |
      require('puppeteer')
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate($CODE,<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate($CODE,<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...)
  message: If unverified user data can reach the `puppeteer` methods it can result
    in Server-Side Request Forgery vulnerabilities.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
- id: ajinabraham.njsscan.ssrf_wkhtmltoimage.wkhtmltoimage_ssrf
  patterns:
  - pattern-inside: |
      require('wkhtmltoimage')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.generate(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.generate(<... $INP ...>, ...)
    - pattern: |
        $PKG.generate(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.generate(<... $REQ.$VAR.$FOO ...>, ...)
  message: User controlled URL reached to `wkhtmltoimage` can result in Server Side
    Request Forgery (SSRF).
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
- id: ajinabraham.njsscan.ssrf_wkhtmltopdf.wkhtmltopdf_ssrf
  patterns:
  - pattern-inside: |
      require('wkhtmltopdf')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        wkhtmltopdf(<... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        wkhtmltopdf(<... $INP ...>, ...)
    - pattern: |
        wkhtmltopdf(<... $REQ.$VAR ...>, ...)
    - pattern: |
        wkhtmltopdf(<... $REQ.$VAR.$FOO ...>, ...)
  message: User controlled URL reached to `wkhtmltopdf` can result in Server Side
    Request Forgery (SSRF).
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
- id: ajinabraham.njsscan.archive_path_overwrite.zip_path_overwrite
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('unzip')
        ...
    - pattern-inside: |
        $X = require('unzipper')
        ...
  - pattern-inside: |
      $Y.pipe($UNZIP.Parse(...)).on('entry', function $FUNC(...) {
          ...
      }, ...)
  - pattern-not: |
      $X = $FILENAME.indexOf(...)
  - pattern-not: |
      $FUNC.pipe($FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...))))
  - pattern-not: |
      $FUNC.pipe($FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...))))
  - pattern-not: |
      $FUNC.pipe($FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...))))
  - pattern-either:
    - pattern: |
        $FUNC.pipe($FS.createWriteStream($FIL, ...))
    - pattern: |
        $FUNC.pipe($FS.writeFile($FIL, ...))
    - pattern: |
        $FUNC.pipe($FS.writeFileSync($FIL, ...))
  message: Insecure ZIP archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: ajinabraham.njsscan.archive_path_overwrite.zip_path_overwrite2
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('unzip')
        ...
    - pattern-inside: |
        $X = require('unzipper')
        ...
  - pattern-inside: |
      $UNZIP.Parse(...).on('entry', function $FUNC($ENTRY) {
          ...
      }, ...)
  - pattern-not: |
      if ($FILENAME.indexOf('..'))
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-either:
    - pattern: |
        $FS.createWriteStream($FIL, ...)
    - pattern: |
        $FS.writeFile($FIL, ...)
    - pattern: |
        $FS.writeFileSync($FIL, ...)
  message: Insecure ZIP archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: ajinabraham.njsscan.xss_node.express_xss
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $RES.write(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $RES.write(..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: |
        $RES.send(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $RES.send(..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$VAR ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        var {$LOCALVAR} = <... $REQ.$QUERY.$FOO ...>;
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        var {$LOCALVAR} = <... $REQ.$QUERY.$VAR ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        var {$LOCALVAR} = <... $REQ.$QUERY ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR = {$KEY: <... $REQ.$QUERY ...>};
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR =  {$KEY: <... $REQ.$QUERY.$FOO ...>};
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR = {$KEY: <... $REQ.$QUERY.$VAR ...>};
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR =  {$KEY: <... $REQ.$QUERY ...>};
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY ...>)
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY.$FOO ...>)
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY.$VAR ...>)
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY ...>)
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>)
        ...
        $RES.write(..., <... $ARR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>)
        ...
        $RES.write(..., <... $ARR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$VAR ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>)
        ...
        $RES.send(..., <... $ARR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>)
        ...
        $RES.send(..., <... $ARR ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.write(..., <... $OUT ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.write(..., <... $OUT ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$VAR ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.send(..., <... $OUT ...>, ...)
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.send(..., <... $OUT ...>, ...)
  message: Untrusted User Input in Response will result in Reflected Cross Site Scripting
    Vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
- id: ajinabraham.njsscan.archive_path_overwrite.admzip_path_overwrite
  patterns:
  - pattern-inside: |
      $X = require('adm-zip')
      ...
  - pattern-not: |
      if ($FILENAME.indexOf('..'))
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-either:
    - pattern: $ZIPENTZ.forEach(function $FUNC($ENTRY, ...) { $FS.createWriteStream(...)
        }, ...)
    - pattern: $ZIPENTZ.forEach(function $FUNC($ENTRY, ...) { $FS.writeFile(...) },
        ...)
    - pattern: $ZIPENTZ.forEach(function $FUNC($ENTRY, ...) { $FS.writeFileSync(...)
        }, ...)
  message: Insecure ZIP archive extraction using adm-zip can result in arbitrary path
    over write and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: ajinabraham.njsscan.archive_path_overwrite.tar_path_overwrite
  patterns:
  - pattern-inside: |
      $X = require('tar-stream')
      ...
  - pattern-not-inside: |
      $Y.pipe($UNZIP.Parse(...)).on('entry', function $FUNC(...) {
          ...
      }, ...)
  - pattern-inside: |
      $EXTRACT.on('entry', function $FUNC(...) {
        ...
      }, ...)
  - pattern-not: |
      if ($FILENAME.indexOf('..'))
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)))
  - pattern-either:
    - pattern: |
        $FS.createWriteStream($FIL, ...)
    - pattern: |
        $FS.writeFile($FIL, ...)
    - pattern: |
        $FS.writeFileSync($FIL, ...)
  message: Insecure TAR archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: ajinabraham.njsscan.express_hbs_lfr.express_lfr
  patterns:
  - pattern-inside: |
      require('hbs')
      ...
  - pattern-inside: |
      require('express')
      ...
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $RES.render($VIEW, <... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$QUERY.$FOO ...>;
        ...
        $RES.render($VIEW, <... $INP ...>)
    - pattern: $RES.render($VIEW, <... $REQ.$QUERY.$FOO ...>)
    - pattern: $RES.render($VIEW, <... $REQ.$BODY ...>)
  message: Untrusted user input in express render() function can result in arbitrary
    file read when hbs templating is used.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-23: Relative Path Traversal'
- id: ajinabraham.njsscan.express_hbs_lfr.express_lfr_warning
  patterns:
  - pattern-not-inside: |
      require('hbs')
      ...
  - pattern-inside: |
      require('express')
      ...
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $RES.render($VIEW, <... $INP ...>)
    - pattern: |
        $INP = <... $REQ.$QUERY.$FOO ...>;
        ...
        $RES.render($VIEW, <... $INP ...>)
    - pattern: $RES.render($VIEW, <... $REQ.$QUERY.$FOO ...>)
    - pattern: $RES.render($VIEW, <... $REQ.$BODY ...>)
  message: Untrusted user input in express render() function can result in arbitrary
    file read if hbs templating is used.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-23: Relative Path Traversal'
- id: ajinabraham.njsscan.path_traversal.generic_path_traversal
  patterns:
  - pattern-either:
    - pattern-inside: |
        require('http')
        ...
    - pattern-inside: |
        require('express')
        ...
    - pattern-inside: |
        require('koa')
        ...
    - pattern-inside: |
        require('electron')
        ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X.createReadStream(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.createReadStream(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.readFile(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.readFile(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.readFileSync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.readFileSync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.readFileAsync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.readFileAsync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...)
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...)
  message: Untrusted user input in readFile()/readFileSync() can endup in Directory
    Traversal Attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-23: Relative Path Traversal'
- id: ajinabraham.njsscan.resolve_path_traversal.join_resolve_path_traversal
  patterns:
  - pattern-inside: |
      require('path')
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PATH.join(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.join(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...)
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...)
    - pattern: $PATH.resolve(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.resolve(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...)
    - pattern: |-
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...)
  message: 'Path constructed with user input can result in Path Traversal. Ensure
    that user input does not reach `join()` or `resolve()`. '
  languages:
  - javascript
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path
      Traversal)'
  severity: WARNING
- id: ajinabraham.njsscan.xml_entity_expansion_dos.node_entity_expansion
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $PARSER = new expat.Parser()
        ...
        $PARSER.write(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $PARSER = new expat.Parser()
        ...
        $PARSER.write(..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: |
        $PARSER = new expat.Parser()
        ...
        $PARSER.write(..., <... $REQ.$QUERY.$FOO.$FILE ...>, ...)
  message: User controlled data in XML Parsers can result in XML Internal Entity Processing
    vulnerabilities like in DoS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
- id: ajinabraham.njsscan.xpathi_node.node_xpath_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $XPATH.parse(<... "=~/^[\/\/].+/" + $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/^[\/\/].+/" + $REQ.$PARAM ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/^[\/\/].+/" + $REQ.$PARAM["..."] ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/^[\/\/].+/" + $REQ.$PARAM("...") ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/^[\/\/].+/" + $REQ["..."] ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/^[\/\/].+/" + $REQ("...") ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $XPATH.parse(<... "=~/^[\/\/].+/" + $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $XPATH.parse(<... "=~/^[\/\/].+/" + $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$PARAM["..."] ...>;
        ...
        $XPATH.parse(<... "=~/^[\/\/].+/" + $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ.$PARAM("...") ...>;
        ...
        $XPATH.parse(<... "=~/^[\/\/].+/" + $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ["..."] ...>;
        ...
        $XPATH.parse(<... "=~/^[\/\/].+/" + $INP ...>, ...)
    - pattern: |
        $INP = <... $REQ("...") ...>;
        ...
        $XPATH.parse(<... "=~/^[\/\/].+/" + $INP ...>, ...)
  message: User controlled data in xpath.parse() can result in XPATH injection vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-643: Improper Neutralization of Data within XPath Expressions (''XPath
      Injection'')'
- id: ajinabraham.njsscan.xxe_expat.xxe_expat
  patterns:
  - pattern-inside: |
      require('node-expat')
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern-inside: |
        $PARSER = new $EXPAT.Parser(...)
        ...
    - pattern-inside: |
        $PARSER = new Parser(...)
        ...
  - pattern-either:
    - pattern: $PARSER.parse(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PARSER.parse(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PARSER.parse(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PARSER.parse(<... $INPUT ...>,...)
    - pattern: $PARSER.write(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PARSER.write(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PARSER.write(<... $INPUT ...>,...)
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PARSER.write(<... $INPUT ...>,...)
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
  severity: ERROR
  languages:
  - javascript
- id: ajinabraham.njsscan.xxe_node.node_xxe
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $LIBXML.parseXmlString(..., <... $REQ.$QUERY.$VAR.$FILE ...>, ...)
    - pattern: |
        $LIBXML.parseXmlString(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $LIBXML.parseXmlString(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR.$FILE ...>; ... $LIBXML.parseXmlString(..., <... $FOO ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR ...>; ... $LIBXML.parseXmlString(..., <... $FOO ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY ...>; ... $LIBXML.parseXmlString(..., <... $FOO ...>, ...)
    - pattern: |
        $LIBXML.parseXml(..., <... $REQ.$QUERY.$VAR.$FILE ...>, ...)
    - pattern: |
        $LIBXML.parseXml(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $LIBXML.parseXml(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR.$FILE ...>; ... $LIBXML.parseXml(..., <... $FOO ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR ...>; ... $LIBXML.parseXml(..., <... $FOO ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY ...>;
        ...
        $LIBXML.parseXml(..., <... $FOO ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxParser()
        ...
        $PARSER.parseString(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxParser()
        ...
        $PARSER.parseString(..., <... $REQ.$QUERY.$BAR ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxParser()
        ...
        $PARSER.parseString(..., <... $REQ.$QUERY.$BAR.$FILE ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser()
        ...
        $PARSER.push(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser()
        ...
        $PARSER.push(..., <... $REQ.$QUERY.$FOO ...> , ...)
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser()
        ...
        $PARSER.push(..., <... $REQ.$QUERY.$FOO.$FILE ...> , ...)
    - pattern: |
        $PARSER = new libxmljs.SaxParser()
        ...
        $FOO = <... $REQ.$QUERY ...>;
        ...
        $PARSER.parseString(..., <... $FOO ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxParser()
        ...
        $FOO = <... $REQ.$QUERY.$BAR ...>;
        ...
        $PARSER.parseString(..., <... $FOO ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxParser()
        ...
        $FOO = <... $REQ.$QUERY.$BAR.$FILE ...>;
        ...
        $PARSER.parseString(..., <... $FOO ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser()
        ...
        $FOO = <... $REQ.$QUERY ...>;
        ...
        $PARSER.push(..., <... $FOO ...>, ...)
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser()
        ...
        $FOO = <... $REQ.$QUERY.$BAR ...>;
        ...
        $PARSER.push(..., <... $FOO ...> , ...)
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser()
        ...
        $FOO = <... $REQ.$QUERY.$BAR.$FILE ...>;
        ...
        $PARSER.push(..., <... $FOO ...> , ...)
  message: User controlled data in XML parsers can result in XML External or Internal
    Entity (XXE) Processing vulnerabilities
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
- id: ajinabraham.njsscan.xxe_sax.xxe_sax
  pattern-either:
  - pattern: |
      require('sax')
      ...
      $PARSER.ondoctype = ...;
  - pattern: |-
      require('sax')
      ...
      $PARSER.on('doctype',...)
  severity: WARNING
  languages:
  - javascript
  message: Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do
    anything with custom DTD entity definitions. If you're implementing a custom DTD
    entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities,
    or be absolutely sure that external entities received from a trusted source while
    processing XML.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
- id: ajinabraham.njsscan.xxe_xml2json.xxe_xml2json
  patterns:
  - pattern-inside: |
      require('xml2json')
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $EXPAT.toJson(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $EXPAT.toJson(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $EXPAT.toJson(<... $INPUT ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $EXPAT.toJson(<... $INPUT ...>,...)
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
  severity: ERROR
  languages:
  - javascript
- id: ajinabraham.njsscan.xss_mustache_escape.xss_disable_mustache_escape
  pattern: $OBJ.escapeMarkup = false
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A7: Cross-Site Scripting XSS'
  message: Markup escaping disabled. This can be used with some template engines to
    escape disabling of HTML entities, which can lead to XSS attacks.
- id: ajinabraham.njsscan.xss_templates.handlebars_safestring
  pattern-either:
  - pattern: $X.SafeString(...)
  - pattern: new Handlebars.SafeString(...)
  message: Handlebars SafeString will not escape the data passed through it. Untrusted
    user input passing through SafeString can cause XSS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
- id: ajinabraham.njsscan.xss_templates.handlebars_noescape
  patterns:
  - pattern: |
      $X.compile(..., {noEscape: true}, ...)
  message: Disabling Escaping in Handlebars is not a secure behaviour. This can introduce
    XSS vulnerabilties.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page
      (Basic XSS)'
- id: ajinabraham.njsscan.xss_templates.squirrelly_autoescape
  pattern: $X.autoEscaping(false)
  message: Handlebars SafeString will not escape the data passed through it. Untrusted
    user input passing through SafeString can cause XSS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
- id: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5
  pattern: hashlib.md5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B303
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.eval-detected.eval-detected
  patterns:
  - pattern-not: eval("...")
  - pattern: eval(...)
  message: |
    Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.dangerous-system-call.dangerous-system-call
  patterns:
  - pattern-not: os.$W("...", ...)
  - pattern-either:
    - pattern: os.system(...)
    - pattern: os.popen(...)
    - pattern: os.popen2(...)
    - pattern: os.popen3(...)
    - pattern: os.popen4(...)
  message: Found dynamic content used in a system call. This is dangerous if external
    data can reach this function call because it allows a malicious actor to execute
    commands. Use the 'subprocess' module instead, which is easier to use without
    accidentally exposing a command injection vulnerability.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
  pattern: $CONTEXT.set_ciphers(...)
  message: |
    The 'ssl' module disables insecure cipher suites by default. Therefore,
    use of 'set_ciphers()' should only be used when you have very specialized
    requirements. Otherwise, you risk lowering the security of the SSL channel.
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-326: Inadequate Encryption Strength'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
    references:
    - https://docs.python.org/3/library/ssl.html#cipher-selection
    - https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers
  languages:
  - python
  severity: WARNING
- id: contrib.dlint.dlint-equivalent.insecure-xml-use
  message: Insecure XML parsing functionality, prefer 'defusedxml'
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO107.md
  pattern-either:
  - patterns:
    - pattern: xml.$ANYTHING
    - pattern-not: xml.sax.saxutils
    - pattern-not: xml.etree.ElementTree.Element
    - pattern-not: xml.etree.ElementTree.SubElement
  - pattern: lxml.$ANYTHING
  - pattern: xmlrpclib.$ANYTHING
- id: contrib.dlint.dlint-equivalent.insecure-pickle-use
  message: The Python 'pickle' module is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO103.md
  pattern-either:
  - pattern: pickle.loads(...)
  - pattern: pickle.load(...)
  - pattern: pickle.Unpickler(...)
  - pattern: cPickle.loads(...)
  - pattern: cPickle.load(...)
  - pattern: cPickle.Unpickler(...)
- id: contrib.dlint.dlint-equivalent.insecure-eval-use
  message: The Python 'eval' function is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO104.md
  patterns:
  - pattern: eval(...)
  - pattern-not: eval("...")
- id: contrib.dlint.dlint-equivalent.insecure-exec-use
  message: The Python 'exec' function is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO105.md
  patterns:
  - pattern: exec(...)
  - pattern-not: exec("...")
- id: contrib.dlint.dlint-equivalent.insecure-os-exec-use
  message: The Python 'os' execution functions are not secure against maliciously
    constructed input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO106.md
  pattern-either:
  - patterns:
    - pattern: os.popen(...)
    - pattern-not: os.popen("...")
  - patterns:
    - pattern: os.popen2(...)
    - pattern-not: os.popen2("...")
  - patterns:
    - pattern: os.popen3(...)
    - pattern-not: os.popen3("...")
  - patterns:
    - pattern: os.popen4(...)
    - pattern-not: os.popen4("...")
  - patterns:
    - pattern: os.system(...)
    - pattern-not: os.system("...")
- id: contrib.dlint.dlint-equivalent.insecure-os-temp-use
  message: The Python 'os' tempnam|tmpnam functions are vulnerable to symlink attacks
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO106.md
  pattern-either:
  - pattern: os.tempnam(...)
  - pattern: os.tmpnam(...)
- id: javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    references:
    - https://cwe.mitre.org/data/definitions/522.html
  message: |
    Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.sign({password:...},...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $T = JWT.sign({password:...},...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = {password:...};
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = {password:...};
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = {password:...};
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = {password:...};
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P.password = ...;
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P.password = ...;
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = Object.assign(...,{password:...},...);
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = Object.assign(...,{password:...},...);
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = Object.assign(...,{password:...},...);
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = Object.assign(...,{password:...},...);
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.sign(Object.assign(...,{password:...},...),...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $T = JWT.sign(Object.assign(...,{password:...},...),...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.sign({$U:{password:...}},...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $T = JWT.sign({$U:{password:...}},...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = {$U:{password:...}};
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = {$U:{password:...}};
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = {$U:{password:...}};
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = {$U:{password:...}};
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P.$U.password = ...;
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P.$U.password = ...;
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = Object.assign(...,{$U:{password:...}},...);
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $P = Object.assign(...,{$U:{password:...}},...);
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = Object.assign(...,{$U:{password:...}},...);
      ...
      var $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $P = Object.assign(...,{$U:{password:...}},...);
      ...
      $T = JWT.sign($P,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
- id: contrib.dlint.dlint-equivalent.insecure-yaml-use
  message: The Python 'yaml' module is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO109.md
  patterns:
  - pattern: import yaml
  - pattern-either:
    - pattern: yaml.dump(...)
    - pattern: yaml.dump_all(...)
    - pattern: yaml.load(...)
    - pattern: yaml.load_all(...)
- id: contrib.dlint.dlint-equivalent.insecure-compile-use
  message: The Python 'compile' function is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO110.md
  patterns:
  - pattern: compile(...)
  - pattern-not: compile("...")
- id: contrib.dlint.dlint-equivalent.insecure-zipfile-use
  message: The Python 'zipfile' extract|extractall functions are vulnerable to arbitrary
    file overwrites
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO112.md
  pattern-either:
  - pattern: |
      $ZF = zipfile.ZipFile(...)
      ...
      $ZF.extract(...)
  - pattern: |
      $ZF = zipfile.ZipFile(...)
      ...
      $ZF.extractall(...)
- id: contrib.dlint.dlint-equivalent.insecure-tarfile-use
  message: The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary
    file overwrites
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO115.md
  pattern-either:
  - pattern: |
      $TF = tarfile.TarFile(...)
      ...
      $TF.extract(...)
  - pattern: |
      $TF = tarfile.TarFile(...)
      ...
      $TF.extractall(...)
  - pattern: |
      $TF = tarfile.open(...)
      ...
      $TF.extract(...)
  - pattern: |
      $TF = tarfile.open(...)
      ...
      $TF.extractall(...)
  - pattern: |
      with tarfile.TarFile(...) as $TF:
          ...
          $TF.extract(...)
  - pattern: |
      with tarfile.TarFile(...) as $TF:
          ...
          $TF.extractall(...)
  - pattern: |
      with tarfile.open(...) as $TF:
          ...
          $TF.extract(...)
  - pattern: |
      with tarfile.open(...) as $TF:
          ...
          $TF.extractall(...)
- id: contrib.dlint.dlint-equivalent.insecure-subprocess-use
  message: The Python 'subprocess' module called with 'shell=True' may allow for shell
    injection
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO116.md
  pattern-either:
  - patterns:
    - pattern: subprocess.call(..., shell=True, ...)
    - pattern: subprocess.call('...', ..., shell=True, ...)
  - patterns:
    - pattern: subprocess.check_call(..., shell=True, ...)
    - pattern: subprocess.check_call('...', ..., shell=True, ...)
  - patterns:
    - pattern: subprocess.check_output(..., shell=True, ...)
    - pattern: subprocess.check_output('...', ..., shell=True, ...)
  - patterns:
    - pattern: subprocess.Popen(..., shell=True, ...)
    - pattern: subprocess.Popen('...', ..., shell=True, ...)
  - patterns:
    - pattern: subprocess.run(..., shell=True, ...)
    - pattern: subprocess.run('...', ..., shell=True, ...)
- id: contrib.dlint.dlint-equivalent.insecure-dl-use
  message: The Python 'dl' module may cause segmentation faults or other incorrect
    behavior
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO117.md
  pattern: dl.$ANYTHING
- id: contrib.dlint.dlint-equivalent.insecure-gl-use
  message: The Python 'gl' module may cause core dumps or other unsafe behavior
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO118.md
  pattern: gl.$ANYTHING
- id: contrib.dlint.dlint-equivalent.insecure-shelve-use
  message: The Python 'shelve' module is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO119.md
  pattern: shelve.$ANYTHING
- id: contrib.dlint.dlint-equivalent.insecure-marshal-use
  message: The Python 'marshal' module is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO120.md
  pattern: marshal.$ANYTHING
- id: contrib.dlint.dlint-equivalent.insecure-tempfile-use
  message: The Python 'tempfile.mktemp' function allows for race conditions
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO121.md
  pattern: tempfile.mktemp(...)
- id: contrib.dlint.dlint-equivalent.insecure-ssl-use
  message: Weak or insecure 'ssl' module usage
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO122.md
  pattern-either:
  - pattern: ssl._create_unverified_context(...)
  - pattern: ssl._https_verify_certificates(enable=False)
  - pattern: ssl.CERT_NONE
  - pattern: ssl.CERT_OPTIONAL
  - pattern: ssl.PROTOCOL_SSLv2
  - pattern: ssl.PROTOCOL_SSLv23
  - pattern: ssl.PROTOCOL_SSLv3
  - pattern: ssl.PROTOCOL_TLS
- id: contrib.dlint.dlint-equivalent.insecure-requests-use
  message: The Python third-party 'requests' module used with SSL verification disabled
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO123.md
  pattern-either:
  - pattern: requests.request(..., verify=False, ...)
  - pattern: requests.get(..., verify=False, ...)
  - pattern: requests.options(..., verify=False, ...)
  - pattern: requests.head(..., verify=False, ...)
  - pattern: requests.post(..., verify=False, ...)
  - pattern: requests.put(..., verify=False, ...)
  - pattern: requests.patch(..., verify=False, ...)
  - pattern: requests.delete(..., verify=False, ...)
- id: contrib.dlint.dlint-equivalent.insecure-simplexmlrpcserver-use
  message: The Python 'xmlrpc' module used with 'allow_dotted_names' is not secure
    against maliciously constructed input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO124.md
  pattern-either:
  - pattern: xmlrpc.server.register_instance(..., allow_dotted_names=True, ...)
  - pattern: SimpleXMLRPCServer.register_instance(..., allow_dotted_names=True, ...)
- id: contrib.dlint.dlint-equivalent.insecure-commands-use
  message: The Python 'commands' module is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO125.md
  patterns:
  - pattern: commands.$ANYTHING(...)
  - pattern-not: commands.$ANYTHING("...")
- id: contrib.dlint.dlint-equivalent.insecure-popen2-use
  message: The Python 'popen2' module is not secure against maliciously constructed
    input
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO126.md
  patterns:
  - pattern: popen2.$ANYTHING(...)
  - pattern-not: popen2.$ANYTHING("...")
- id: contrib.dlint.dlint-equivalent.insecure-duo-client-use
  message: The Python third-party 'duo_client' module used with SSL verfication disabled
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO127.md
  pattern-either:
  - pattern: duo_client.Client(..., ca_certs="HTTP", ...)
  - pattern: duo_client.Client(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.AsyncDuoClient(..., ca_certs="HTTP", ...)
  - pattern: duo_client.AsyncDuoClient(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.Auth(..., ca_certs="HTTP", ...)
  - pattern: duo_client.Auth(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.AuthAPI(..., ca_certs="HTTP", ...)
  - pattern: duo_client.AuthAPI(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.Admin(..., ca_certs="HTTP", ...)
  - pattern: duo_client.Admin(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.AdminAPI(..., ca_certs="HTTP", ...)
  - pattern: duo_client.AdminAPI(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.Accounts(..., ca_certs="HTTP", ...)
  - pattern: duo_client.Accounts(..., ca_certs="DISABLE", ...)
  - pattern: duo_client.AccountsAPI(..., ca_certs="HTTP", ...)
  - pattern: duo_client.AccountsAPI(..., ca_certs="DISABLE", ...)
- id: contrib.dlint.dlint-equivalent.insecure-onelogin-attribute-use
  message: Weak or insecure 'onelogin' module attribute usage
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO129.md
  pattern-either:
  - pattern: onelogin.saml2.utils.OneLogin_Saml2_Constants.SHA1
  - pattern: onelogin.saml2.utils.OneLogin_Saml2_Constants.RSA_SHA1
  - pattern: onelogin.saml2.utils.OneLogin_Saml2_Constants.DSA_SHA1
  - pattern: onelogin.saml2.utils.OneLogin_Saml2_Constants.TRIPLEDES_CBC
- id: contrib.dlint.dlint-equivalent.insecure-hashlib-use
  message: Weak or insecure 'hashlib' module usage
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO130.md
  pattern-either:
  - pattern: hashlib.md5(...)
  - pattern: hashlib.sha1(...)
- id: contrib.dlint.dlint-equivalent.insecure-urllib3-warnings-use
  message: Warnings disabled on insecure network requests with Python 'urllib3' module
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO131.md
  pattern: urllib3.disable_warnings(...)
- id: contrib.dlint.dlint-equivalent.insecure-urllib3-connections-use
  message: The Python 'urllib3' module used with SSL verfication disabled
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO132.md
  pattern-either:
  - pattern: urllib3.PoolManager(..., cert_reqs="CERT_NONE", ...)
  - pattern: urllib3.PoolManager(..., cert_reqs="NONE", ...)
  - pattern: urllib3.PoolManager(..., cert_reqs=ssl.CERT_NONE, ...)
  - pattern: urllib3.ProxyManager(..., cert_reqs="CERT_NONE", ...)
  - pattern: urllib3.ProxyManager(..., cert_reqs="NONE", ...)
  - pattern: urllib3.ProxyManager(..., cert_reqs=ssl.CERT_NONE, ...)
  - pattern: urllib3.HTTPSConnectionPool(..., cert_reqs="CERT_NONE", ...)
  - pattern: urllib3.HTTPSConnectionPool(..., cert_reqs="NONE", ...)
  - pattern: urllib3.HTTPSConnectionPool(..., cert_reqs=ssl.CERT_NONE, ...)
  - pattern: urllib3.connection_from_url(..., cert_reqs="CERT_NONE", ...)
  - pattern: urllib3.connection_from_url(..., cert_reqs="NONE", ...)
  - pattern: urllib3.connection_from_url(..., cert_reqs=ssl.CERT_NONE, ...)
  - pattern: urllib3.proxy_from_url(..., cert_reqs="CERT_NONE", ...)
  - pattern: urllib3.proxy_from_url(..., cert_reqs="NONE", ...)
  - pattern: urllib3.proxy_from_url(..., cert_reqs=ssl.CERT_NONE, ...)
- id: contrib.dlint.dlint-equivalent.insecure-cryptography-attribute-use
  message: Weak or insecure 'cryptography' module attribute usage
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO134.md
  pattern-either:
  - pattern: cryptography.hazmat.primitives.hashes.MD5
  - pattern: cryptography.hazmat.primitives.hashes.SHA1
  - pattern: cryptography.hazmat.primitives.ciphers.modes.ECB
  - pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish
  - pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4
  - pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA
  - pattern: cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15
- id: contrib.dlint.dlint-equivalent.insecure-xmlsec-attribute-use
  message: Weak or insecure 'xmlsec' module attribute usage
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO136.md
  pattern-either:
  - pattern: xmlsec.constants.TransformDes3Cbc
  - pattern: xmlsec.constants.TransformKWDes3
  - pattern: xmlsec.constants.TransformDsaSha1
  - pattern: xmlsec.constants.TransformEcdsaSha1
  - pattern: xmlsec.constants.TransformRsaMd5
  - pattern: xmlsec.constants.TransformRsaRipemd160
  - pattern: xmlsec.constants.TransformRsaSha1
  - pattern: xmlsec.constants.TransformRsaPkcs1
  - pattern: xmlsec.constants.TransformMd5
  - pattern: xmlsec.constants.TransformRipemd160
  - pattern: xmlsec.constants.TransformSha1
- id: contrib.dlint.dlint-equivalent.insecure-itsdangerous-use
  message: The Python third-party 'itsdangerous' module used with 'none' signing algorithm
  languages:
  - python
  severity: WARNING
  metadata:
    source_rule_url: https://github.com/dlint-py/dlint/blob/master/docs/linters/DUO137.md
  pattern-either:
  - pattern: itsdangerous.signer.Signer(..., algorithm=itsdangerous.signer.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.signer.Signer(..., algorithm=itsdangerous.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.Signer(..., algorithm=itsdangerous.signer.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.Signer(..., algorithm=itsdangerous.NoneAlgorithm, ...)
  - pattern: itsdangerous.timed.TimestampSigner(..., algorithm=itsdangerous.signer.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.timed.TimestampSigner(..., algorithm=itsdangerous.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.TimestampSigner(..., algorithm=itsdangerous.signer.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.TimestampSigner(..., algorithm=itsdangerous.NoneAlgorithm,
      ...)
  - pattern: itsdangerous.jws.JSONWebSignatureSerializer(..., algorithm_name="none",
      ...)
  - pattern: itsdangerous.JSONWebSignatureSerializer(..., algorithm_name="none", ...)
- id: javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      JWT.verify($P, "...", ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.sign($P, "...", ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $T = JWT.verify($P, "...", ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      JWT.verify($P, JWK.asKey("..."), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $KEY = JWK.asKey("...");
      ...
      JWT.verify($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $T = JWT.sign($P, JWK.asKey("..."), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $T = JWT.verify($P, JWK.asKey("..."), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $KEY = JWK.asKey("...");
      ...
      var $T = JWT.sign($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $KEY = JWK.asKey("...");
      ...
      var $T = JWT.verify($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      JWT.verify($P, $SECRET, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.sign($P, $SECRET, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.verify($P, $SECRET, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      JWT.verify($P, JWK.asKey($SECRET), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $KEY = JWK.asKey($SECRET);
      ...
      JWT.verify($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.sign($P, JWK.asKey($SECRET), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $KEY = JWK.asKey($SECRET);
      ...
      var $T = JWT.sign($P, $KEY, ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $T = JWT.verify($P, JWK.asKey($SECRET), ...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $SECRET = "...";
      ...
      var $KEY = JWK.asKey($SECRET);
      ...
      var $T = JWT.verify($P, $KEY, ...);
- id: javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
  message: |
    Hardcoded secret used for Passport Strategy.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  severity: ERROR
  pattern-either:
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      var $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      var $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      new $F({secretOrKey: "..."}, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      var $P = {};
      ...
      $P.secretOrKey = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      var $P = {secretOrKey: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      var $S = "...";
      ...
      new $F({secretOrKey: $S}, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {secretOrKey: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $P = {};
      ...
      $P.secretOrKey = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $P = {secretOrKey: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      new $F({secretOrKey: $S}, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      var $P = {secretOrKey: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P = {secretOrKey: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      var $P = {};
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      var $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $P = {};
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      var $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      var $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      var $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      var $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $P = {};
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      var $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      var $P = {};
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      var $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      var $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $P = {};
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      var $P = {};
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      var $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      var $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      $P = {};
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      var $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      var $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      var $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {};
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |-
      var $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_feature_policy
  message: 'Feature-Policy header is present. More information: https://helmetjs.github.io/docs/feature-policy/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {featurePolicy: false}, ...)
  - pattern-either:
    - pattern: |
        featurePolicy(..., {features: ...}, ...)
    - pattern: |
        helmet.featurePolicy(..., {features: ...}, ...)
    - pattern: |
        helmet({featurePolicy: {features: ...}})
- id: javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    references:
    - https://cwe.mitre.org/data/definitions/522.html
  message: |
    Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.sign({password:...},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $T = $JWT.sign({password:...},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.sign({password:...},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = {password:...};
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = {password:...};
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = {password:...};
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = {password:...};
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = {password:...};
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = {password:...};
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P.password = ...;
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P.password = ...;
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P.password = ...;
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = Object.assign(...,{password:...},...);
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = Object.assign(...,{password:...},...);
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = Object.assign(...,{password:...},...);
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = Object.assign(...,{password:...},...);
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = Object.assign(...,{password:...},...);
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = Object.assign(...,{password:...},...);
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.sign(Object.assign(...,{password:...},...),...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $T = $JWT.sign(Object.assign(...,{password:...},...),...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.sign(Object.assign(...,{password:...},...),...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.sign({$U:{password:...}},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $T = $JWT.sign({$U:{password:...}},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.sign({$U:{password:...}},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = {$U:{password:...}};
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = {$U:{password:...}};
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = {$U:{password:...}};
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = {$U:{password:...}};
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = {$U:{password:...}};
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = {$U:{password:...}};
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P.$U.password = ...;
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P.$U.password = ...;
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P.$U.password = ...;
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = Object.assign(...,{$U:{password:...}},...);
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = Object.assign(...,{$U:{password:...}},...);
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $P = Object.assign(...,{$U:{password:...}},...);
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = Object.assign(...,{$U:{password:...}},...);
      ...
      var $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = Object.assign(...,{$U:{password:...}},...);
      ...
      $T = $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $P = Object.assign(...,{$U:{password:...}},...);
      ...
      $JWT.sign($P,...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $T = $JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
- id: javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
  message: |
    No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked.
    Consider using function as the `isRevoked` option.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  patterns:
  - pattern-inside: |
      ...
      $JWT = require('express-jwt');
      ...
  - pattern: $JWT(...)
  - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
  - pattern-not-inside: |-
      $OPTS = <... {isRevoked:...} ...>;
      ...
      $JWT($OPTS,...);
- id: java.lang.security.audit.permissive-cors.permissive-cors
  message: |
    https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS
    Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.
  metadata:
    asvs:
      section: 'V14: Configuration Verification Requirements'
      control_id: 14.4.8 Permissive CORS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x22-V14-Config.md#v144-http-security-headers-requirements
      version: '4'
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      HttpServletResponse $RES = ...;
      ...
      $RES.addHeader("=~/access-control-allow-origin/i", "=~/^*|null$/i");
  - pattern: |
      HttpServletResponse $RES = ...;
      ...
      $RES.setHeader("=~/access-control-allow-origin/i", "=~/^*|null$/i");
  - pattern: |
      ServerHttpResponse $RES = ...;
      ...
      $RES.getHeaders().add("=~/access-control-allow-origin/i", "=~/^*|null$/i");
  - pattern: |
      HttpHeaders $HEADERS = ...;
      ...
      $HEADERS.set("=~/access-control-allow-origin/i", "=~/^*|null$/i");
  - pattern: |
      ServerWebExchange $SWE = ...;
      ...
      $SWE.getResponse().getHeaders().add("Access-Control-Allow-Origin", "*");
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.addHeader("=~/access-control-allow-origin/i", "=~/^*|null$/i");
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.setHeader("=~/access-control-allow-origin/i", "=~/^*|null$/i");
        ...
      }
  - pattern: |
      $X $METHOD(...,ServerHttpResponse $RES,...) {
        ...
        $RES.getHeaders().add("=~/access-control-allow-origin/i", "=~/^*|null$/i");
        ...
      }
  - pattern: |
      $X $METHOD(...,ServerWebExchange $SWE,...) {
        ...
        $SWE.getResponse().getHeaders().add("=~/access-control-allow-origin/i", "=~/^*|null$/i");
        ...
      }
  - pattern: ResponseEntity.$RES().header("=~/access-control-allow-origin/i", "=~/^*|null$/i")
  - pattern: ServerResponse.$RES().header("=~/access-control-allow-origin/i", "=~/^*|null$/i")
- id: java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp: 'A6: Security Misconfiguration'
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.3 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    references:
    - https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application
  message: |
    Detected cookie without the SameSite attribute.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(..., HttpServletResponse $RESP, ...) {
        ...
        $RESP.setHeader("Set-Cookie", "=~/.*SameSite=.*/");
        ...
      }
  - pattern-either:
    - pattern: $RESP.addCookie(...);
    - pattern: $RESP.setHeader("Set-Cookie", ...);
- id: contrib.nodejsscan.error_disclosure.node_error_disclosure
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $ERR = $ERROR.stack;
        ...
        $RES.end($ERR);
    - pattern: |
        $ERR = $ERROR.stack;
        ...
        $RES.send($ERR);
    - pattern: |
        $RES.end($ERR.stack)
    - pattern: |
        $RES.send($ERR.stack)
  message: Error messages with stack traces can expose sensitive information about
    the application.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-209: Generation of Error Message Containing Sensitive Information'
- id: contrib.nodejsscan.error_disclosure.generic_error_disclosure
  patterns:
  - pattern-either:
    - pattern: |
        console.trace(...)
    - pattern: |
        try {
            ...
        } catch($ERR){
            console.error(<... $ERR ...>, ...);
        }
  message: Error messages with stack traces may expose sensitive information about
    the application.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-209: Generation of Error Message Containing Sensitive Information'
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_frame_guard
  message: 'X-Frame-Options header is present. More information: https://helmetjs.github.io/docs/frameguard/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {frameguard: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(hemlet())
    - pattern: |
        helmet.frameguard(...)
    - pattern: |
        frameguard(...)
    - pattern: |
        helmet({frameguard: ...})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_x_powered_by
  message: 'Default X-Powered-By is removed or modified. More information: https://helmetjs.github.io/docs/hide-powered-by/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {hidePoweredBy: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        app.disable('x-powered-by')
    - pattern: |
        helmet.hidePoweredBy(...)
    - pattern: |
        hidePoweredBy(...)
    - pattern: |
        helmet({hidePoweredBy: ...})
- id: java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.7 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf
    - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
  message: |
    An object-returning LDAP search will allow attackers to control the LDAP response. This could
    lead to Remote Code Execution.
  severity: WARNING
  pattern-either:
  - pattern: |
      new SearchControls($S, $CL, $TL, $AT, true, $DEREF)
  - pattern: |
      SearchControls $VAR = new SearchControls();
      ...
      $VAR.setReturningObjFlag(true);
  languages:
  - java
- id: java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_SPRING_JDBC
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.5 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
  message: |
    Possible JDBC injection detected. Use the parameterized query
    feature available in queryForObject instead of concatenating or formatting strings:
    'jdbc.queryForObject("select * from table where name = ?", Integer.class, parameterName);'
  patterns:
  - pattern-inside: |
      $JDBC = new JdbcTemplate(...);
      ...
  - pattern-either:
    - pattern: $JDBC.queryForObject($STR + $VAR, ...);
    - pattern: $JDBC.queryForObject(String.format(...), ...);
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.queryForObject($Q, ...);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.queryForObject($Q, ...);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.queryForObject($Q, ...);
    - pattern: $JDBC.queryForList($STR + $VAR);
    - pattern: $JDBC.queryForList(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.queryForList($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.queryForList($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.queryForList($Q, ...);
    - pattern: $JDBC.update($STR + $VAR);
    - pattern: $JDBC.update(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.update($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.update($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.update($Q, ...);
    - pattern: $JDBC.execute($STR + $VAR);
    - pattern: $JDBC.execute(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.execute($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.execute($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.execute($Q, ...);
    - pattern: $JDBC.insert($STR + $VAR);
    - pattern: $JDBC.insert(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.insert($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.insert($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.insert($Q, ...);
  severity: WARNING
  languages:
  - java
- id: contrib.nodejsscan.eval_drpc_deserialize.grpc_insecure_connection
  patterns:
  - pattern-inside: |
      require('grpc');
      ...
  - pattern-either:
    - pattern: |
        $GRPC($ADDR, ..., $CREDENTIALS.createInsecure(), ...);
    - pattern: |
        $CREDS = <... $CREDENTIALS.createInsecure() ...>;
        ...
        $GRPC($ADDR, ..., $CREDS, ...);
  message: Found an insecure gRPC connection. This creates a connection without encryption
    to a gRPC client/server. A malicious attacker could  tamper with the gRPC message,
    which could compromise the machine.
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: ERROR
  languages:
  - javascript
- id: java.lang.security.audit.ldap-injection.ldap-injection
  message: |
    Detected non-constant data passed into an LDAP query. If this data can be
    controlled by an external user, this is an LDAP injection.
    Ensure data passed to an LDAP query is not controllable; or properly sanitize
    the data.
  metadata:
    cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_INJECTION
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.7 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          InitialDirContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          DirContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          InitialLdapContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          LdapContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          LdapCtx $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          EventDirContext $CTX = ...;
          ...
        }
  - pattern: |
      $X $METHOD(...) {
        ...
        $CTX.search($Y,$INPUT,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $CTX.search($Y,"...",...);
        ...
      }
- id: java.lang.security.audit.formatted-sql-string.formatted-sql-string
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.5 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps
    - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  patterns:
  - pattern-not: $W.execute(<... "=~/.*TABLE *$/" ...>);
  - pattern-not: $W.execute(<... "=~/.*TABLE %s$/" ...>);
  - pattern-either:
    - pattern: $W.execute($X + $Y, ...);
    - pattern: |
        String $SQL = $X + $Y;
        ...
        $W.execute($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += $Y;
        ...
        $W.execute($SQL, ...);
    - pattern: $W.execute(String.format($X, ...), ...);
    - pattern: |
        String $SQL = String.format($X, ...);
        ...
        $W.execute($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += String.format(...);
        ...
        $W.execute($SQL, ...);
    - pattern: $W.executeQuery($X + $Y, ...);
    - pattern: |
        String $SQL = $X + $Y;
        ...
        $W.executeQuery($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += $Y;
        ...
        $W.executeQuery($SQL, ...);
    - pattern: $W.executeQuery(String.format($X, ...), ...);
    - pattern: |
        String $SQL = String.format($X, ...);
        ...
        $W.executeQuery($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += String.format(...);
        ...
        $W.executeQuery($SQL, ...);
    - pattern: $W.createQuery($X + $Y, ...);
    - pattern: |
        String $SQL = $X + $Y;
        ...
        $W.createQuery($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += $Y;
        ...
        $W.createQuery($SQL, ...);
    - pattern: $W.createQuery(String.format($X, ...), ...);
    - pattern: |
        String $SQL = String.format($X, ...);
        ...
        $W.createQuery($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += String.format(...);
        ...
        $W.createQuery($SQL, ...);
    - pattern: $W.query($X + $Y, ...);
    - pattern: |
        String $SQL = $X + $Y;
        ...
        $W.query($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += $Y;
        ...
        $W.query($SQL, ...);
    - pattern: $W.query(String.format($X, ...), ...);
    - pattern: |
        String $SQL = String.format($X, ...);
        ...
        $W.query($SQL, ...);
    - pattern: |
        String $SQL = $X;
        ...
        $SQL += String.format(...);
        ...
        $W.query($SQL, ...);
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
  message: |
    Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher.
    Upgrade to use AES.
    See https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA for more information.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
    references:
    - https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
  severity: WARNING
  pattern: $CIPHER.getInstance("=~/DESede.*/");
  fix: Cipher.getInstance("AES/GCM/NoPadding");
  languages:
  - java
- id: java.lang.security.audit.crypto.weak-hash.use-of-sha1
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  languages:
  - java
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
  pattern-either:
  - pattern: |
      MessageDigest $VAR = $MD.getInstance("SHA1");
  - pattern: |
      $DU.getSha1Digest().digest(...)
- id: java.lang.security.audit.crypto.weak-hash.use-of-md5
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  languages:
  - java
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
  pattern-either:
  - pattern: |
      MessageDigest $VAR = $MD.getInstance("MD5");
  - pattern: |
      $DU.getMd5Digest().digest(...)
- id: java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
  message: RSA keys should be at least 2048 bits based on NIST recommendation.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
  patterns:
  - pattern: |
      KeyPairGenerator $KEY = $G.getInstance("RSA");
      ...
      $KEY.initialize($BITS);
  - metavariable-comparison:
      metavariable: $BITS
      comparison: $BITS < 2048
- id: java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
  message: |
    DES is considered deprecated. AES is the recommended cipher.
    Upgrade to use AES.
    See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DES_USAGE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
  severity: WARNING
  pattern: $CIPHER.getInstance("=~/DES/.*/");
  fix: $CIPHER.getInstance("AES/GCM/NoPadding");
  languages:
  - java
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_dns_prefetch
  message: 'X-DNS-Prefetch-Control header is present and DNS Prefetch Control is enabled.
    More information: https://helmetjs.github.io/docs/dns-prefetch-control/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {dnsPrefetchControl: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.dnsPrefetchControl()
    - pattern: |
        dnsPrefetchControl()
    - pattern: |
        helmet.dnsPrefetchControl({ allow: false })
    - pattern: |
        helmet({dnsPrefetchControl: {allow: false}})
    - pattern: |
        dnsPrefetchControl({ allow: false })
- id: java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#ECB_MODE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
  message: |
    Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time
    which allows an attacker to intercept and replay the data. Further, ECB mode does not provide
    any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: |
      Cipher $VAR = $CIPHER.getInstance($MODE);
  - metavariable-regex:
      metavariable: $MODE
      regex: .*ECB.*
- id: java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
  message: |
    This socket is not encrypted.
    The traffic could be read by an attacker intercepting the network traffic.
    Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory'
    instead
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: new ServerSocket(...)
  - pattern: new Socket(...)
- id: java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
  pattern: new NullCipher(...);
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
  message: |
    NullCipher was detected. This will not encrypt anything;
    the cipher text will be the same as the plain text. Use
    a valid, secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING").
    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions
    for more information.
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
  message: |
    Initialization Vectors (IVs) for block ciphers should be randomly generated
    each time they are used. Using a static IV means the same plaintext
    encrypts to the same ciphertext every time, weakening the strength
    of the encryption.
  metadata:
    cwe: 'CWE-329: Not Using a Random IV with CBC Mode'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#STATIC_IV
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cwe.mitre.org/data/definitions/329.html
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      byte[] $IV = {
          ...
      };
      ...
      new IvParameterSpec($IV, ...);
  - pattern: |
      class $CLASS {
          byte[] $IV = {
              ...
          };
          ...
          $METHOD(...) {
              ...
              new IvParameterSpec($IV, ...);
              ...
          }
      }
- id: java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
    references:
    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https
  message: |
    Detected empty trust manager implementations. This is dangerous because it accepts any
    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore
    and TrustManagerFactory isntead.
    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https
    for more information.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        class $CLASS implements X509TrustManager {
          ...
        }
    - pattern-inside: |
        new X509TrustManager() {
          ...
        }
    - pattern-inside: |
        class $CLASS implements X509ExtendedTrustManager {
          ...
        }
    - pattern-inside: |
        new X509ExtendedTrustManager() {
          ...
        }
  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }
  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }
  - pattern-either:
    - pattern: public void checkClientTrusted(...) {}
    - pattern: public void checkServerTrusted(...) {}
    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }
- id: contrib.nodejsscan.good_anti_csrf.anti_csrf_control
  patterns:
  - pattern-inside: |
      $CSRUF = require('csurf');
      ...
  - pattern-either:
    - pattern: $X = csrf(...);
    - pattern: $X = csurf(...);
    - pattern: $APP.use(csrf(...));
    - pattern: $APP.use(csurf(...));
  message: This application has anti CSRF protection which prevents cross site request
    forgery attacks.
  languages:
  - javascript
  severity: WARNING
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_check_csp
  message: 'Content Security Policy header is present. More Information: https://helmetjs.github.io/docs/csp/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {contentSecurityPolicy: false}, ...)
  - pattern-either:
    - pattern: |
        helmet({contentSecurityPolicy: {directives: ...}})
    - pattern: |
        helmet.contentSecurityPolicy({directives: ...})
    - pattern: |
        csp({directives: ...})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_check_crossdomain
  message: 'X-Permitted-Cross-Domain-Policies header set to off. More information:
    https://helmetjs.github.io/docs/crossdomain/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {permittedCrossDomainPolicies: false}, ...)
  - pattern-either:
    - pattern: |
        permittedCrossDomainPolicies()
    - pattern: |
        permittedCrossDomainPolicies({ permittedPolicies: ... })
    - pattern: |
        helmet.permittedCrossDomainPolicies({ permittedPolicies: ... })
    - pattern: |
        helmet({permittedCrossDomainPolicies: { permittedPolicies: ... }})
    - pattern: |
        helmet.permittedCrossDomainPolicies()
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_check_expect_ct
  message: 'Expect-CT header is present. More information: https://helmetjs.github.io/docs/expect-ct/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {expectCt: false}, ...)
  - pattern-either:
    - pattern: |
        expectCt({maxAge: ...,})
    - pattern: |
        helmet.expectCt({maxAge: ...,})
    - pattern: |
        expectCt({enforce: ...,})
    - pattern: |
        hemlet.expectCt({enforce: ...,})
    - pattern: |
        helmet({expectCt: { enforce: ... }})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_hsts
  message: 'HSTS header is present. More information: https://helmetjs.github.io/docs/hsts/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {hsts: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.hsts(...)
    - pattern: |
        hsts({ maxAge: ...})
    - pattern: |
        helmet({hsts: ...})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_ienoopen
  message: 'X-Download-Options header is present. More information: https://helmetjs.github.io/docs/ienoopen/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {ieNoOpen: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.ieNoOpen()
    - pattern: |
        ieNoOpen()
    - pattern: |
        helmet({ieNoOpen: ...})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_nosniff
  message: 'Content-Type-Options header is present. More information: https://helmetjs.github.io/docs/dont-sniff-mimetype/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {noSniff: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.noSniff()
    - pattern: |
        noSniff()
    - pattern: |
        helmet({noSniff: ...})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_referrer_policy
  message: 'Referrer-Policy header is present. More information: https://helmetjs.github.io/docs/referrer-policy/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {referrerPolicy: false}, ...)
  - pattern-either:
    - pattern: |
        helmet.referrerPolicy(...)
    - pattern: |
        referrerPolicy(...)
    - pattern: |
        helmet({referrerPolicy: ...})
- id: contrib.nodejsscan.good_helmet_checks.helmet_header_xss_filter
  message: 'X-XSS-Protection header is present. More information: https://helmetjs.github.io/docs/xss-filter/'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-not: |
      $HELMET(..., {xssFilter: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.xssFilter(...)
    - pattern: |
        xssFilter(...)
    - pattern: |
        helmet({xssFilter: ...})
- id: contrib.nodejsscan.good_ratelimiting.rate_limit_control
  patterns:
  - pattern-either:
    - pattern: require("express-rate-limit");
    - pattern: require("express-limiter");
    - pattern: require("@authentication/rate-limit");
  message: This application has API rate limiting controls.
  languages:
  - javascript
  severity: WARNING
- id: java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DEFAULT_HTTP_CLIENT
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
  message: |
    DefaultHttpClient is deprecated. Further, it does not support connections
    using TLS1.2, which makes using DefaultHttpClient a security hazard.
    Use SystemDefaultHttpClient instead, which supports TLS1.2.
  severity: WARNING
  languages:
  - java
  pattern: new DefaultHttpClient(...);
  fix-regex:
    regex: DefaultHttpClient
    replacement: SystemDefaultHttpClient
- id: contrib.nodejsscan.jwt_express_hardcoded.jwt_express_hardcoded
  patterns:
  - pattern-inside: |
      $JWT = require('express-jwt');
      ...
  - pattern-either:
    - pattern: |
        $JWT(<... {secret: "..."} ...>,...);
    - pattern: |
        $SECRET = "...";
        ...
        $JWT(<... {secret: $SECRET} ...>,...);
    - pattern: |
        $OPTS = <... {secret: "..."} ...>;
        ...
        $JWT($OPTS,...);
    - pattern: |-
        $SECRET = "...";
        ...
        $OPTS = <... {secret: $SECRET} ...>;
        ...
        $JWT($OPTS,...);
  message: Hardcoded JWT secret or private key was found. Store it properly in  an
    environment variable.
  severity: ERROR
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.hardcoded_secrets.node_secret
  patterns:
  - pattern-not: secret = ''
  - pattern-not: SECRET = ''
  - pattern-not: api_secret = ''
  - pattern-not: API_SECRET = ''
  - pattern-not: $X['...'] = ''
  - pattern-either:
    - pattern: |
        secret = '...';
    - pattern: |
        SECRET = '...';
    - pattern: |
        api_secret = '...';
    - pattern: |
        API_SECRET = '...';
    - pattern: |
        $X['secret'] = '...';
    - pattern: |
        $X['SECRET'] = '...';
    - pattern: |
        $X['api_secret'] = '...';
    - pattern: |
        $X['apiSecret'] = '...';
    - pattern: |
        $X['API_SECRET'] = '...';
    - pattern: |
        $X.secret = '...';
    - pattern: |
        $X.SECRET = '...';
    - pattern: |
        $X.api_secret = '...';
    - pattern: |
        $X.apiSecret = '...';
    - pattern: |
        $X.API_SECRET = '...';
    - pattern: |
        $X('api_secret', '...')
    - pattern: |
        $X('apiSecret', '...')
    - pattern: |
        $X('API_SECRET', '...')
    - pattern: |
        $X('secret', '...')
    - pattern: |
        $X('SECRET', '...')
  message: A hardcoded secret is identified. Store it properly in an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: contrib.nodejsscan.hardcoded_secrets.node_username
  patterns:
  - pattern-not: username = ''
  - pattern-not: userName = ''
  - pattern-not: USERNAME = ''
  - pattern-not: user = ''
  - pattern-not: USER = ''
  - pattern-not: $X['...'] = ''
  - pattern-either:
    - pattern: |
        username = '...';
    - pattern: |
        userName = '...';
    - pattern: |
        USERNAME = '...';
    - pattern: |
        user = '...';
    - pattern: |
        USER = '...';
    - pattern: |
        $X['username'] = '...';
    - pattern: |
        $X['userName'] = '...';
    - pattern: |
        $X['USERNAME'] = '...';
    - pattern: |
        $X['user'] = '...';
    - pattern: |
        $X['USER'] = '...';
    - pattern: |
        $X.username = '...';
    - pattern: |
        $X.userName = '...';
    - pattern: |
        $X.USERNAME = '...';
    - pattern: |
        $X.user = '...';
    - pattern: |
        $X.USER = '...';
  message: A hardcoded username in plain text is identified. Store it properly in
    an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CUSTOM_MESSAGE_DIGEST
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms
  message: |
    Cryptographic algorithms are notoriously difficult to get right. By implementing
    a custom message digest, you risk introducing security issues into your program.
    Use one of the many sound message digests already available to you:
    MessageDigest sha256Digest = MessageDigest.getInstance("SHA256");
  severity: WARNING
  languages:
  - java
  pattern: |-
    class $CLASS extends MessageDigest {
      ...
    }
- id: contrib.nodejsscan.security_electronjs.electron_disable_websecurity
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {webSecurity: false}});
    - pattern: |
        var $X = {webPreferences: {webSecurity: false}};
  message: Disabling webSecurity will disable the same-origin policy and allows the
    execution of insecure code from any domain.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: yaml.kubernetes.best-practice.no-fractional-cpu-limits.no-fractional-cpu-limits
  patterns:
  - pattern-inside: |
      limits:
        ...
  - pattern: |
      cpu: $CPU_LIMIT
  - metavariable-regex:
      metavariable: $CPU_LIMIT
      regex: \d{0,3}m
  fix: 'cpu: 1000m'
  message: |
    When you set a fractional CPU limit on a container,
    the CPU cycles available will be throttled,
    even though most nodes can handle processes
    alternating between using 100% of the CPU.
  severity: WARNING
  languages:
  - yaml
- id: yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern: |
      image: ...
      ...
  - pattern-not: |
      image: ...
      ...
      securityContext:
        ...
        allowPrivilegeEscalation: false
  message: |
    Container allows for privilege escalation via setuid or setgid binaries.
    Add 'allowPrivilegeEscalation: false' in 'securityContext' to prevent this.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.privileged-container.privileged-container
  pattern-either:
  - patterns:
    - pattern-inside: |
        containers:
          ...
    - pattern: |
        image: ...
        ...
        securityContext:
          ...
          privileged: true
  - patterns:
    - pattern-inside: |
        spec:
          ...
    - pattern-not-inside: |
        image: ...
        ...
    - pattern: |
        privileged: true
  message: |
    Container or pod is running in privileged mode. This grants the
    container the equivalent of root capabilities on the host machine. This
    can lead to container escapes, privilege escalation, and other security
    concerns. Remove the 'privileged' key to disable this capability.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern: |
      image: ...
      ...
      securityContext:
        ...
        seccompProfile: unconfined
  message: |
    Container is explicitly disabling seccomp confinement. This runs the
    service in an unrestricted state. Remove 'seccompProfile: unconfined' to
    prevent this.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  languages:
  - yaml
  severity: WARNING
- id: contrib.nodejsscan.security_electronjs.electron_allow_http
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {allowRunningInsecureContent: true}});
    - pattern: |
        var $X = {webPreferences: {allowRunningInsecureContent: true}};
  message: Application can load content over HTTP and that makes the app vulnerable
    to Man in the middle attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
- id: contrib.nodejsscan.jwt_hardcoded.hardcoded_jwt_secret
  patterns:
  - pattern-either:
    - pattern: |
        $JWT = require("jsonwebtoken");
        ...
        $JWT.sign($P, "...", ...);
    - pattern: |
        $JWT = require("jsonwebtoken");
        ...
        $JWT.verify($P, "...", ...);
    - pattern: |
        $JWT = require("jsonwebtoken");
        ...
        $SECRET = "...";
        ...
        $JWT.sign($P, $SECRET, ...);
    - pattern: |
        $JWT = require("jsonwebtoken");
        ...
        $SECRET = "...";
        ...
        $JWT.verify($P, $SECRET, ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $JOSE.JWT.sign($P, "...", ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $JOSE.JWT.verify($P, "...", ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $JOSE.JWT.sign($P, $JOSE.JWK.asKey("..."), ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $JOSE.JWT.verify($P, $JOSE.JWK.asKey("..."), ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.sign($P, $SECRET, ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.verify($P, $SECRET, ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.sign($P, $JOSE.JWK.asKey($SECRET), ...);
    - pattern: |
        $JOSE = require("jose");
        ...
        $SECRET = "...";
        ...
        $JOSE.JWT.verify($P, $JOSE.JWK.asKey($SECRET), ...);
  message: Hardcoded JWT secret was found. Store it properly in an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: contrib.nodejsscan.security_electronjs.electron_blink_integration
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {enableBlinkFeatures: '...'}});
    - pattern: |
        var $X = {webPreferences: {enableBlinkFeatures: '...'}};
  message: Blink's expirimental features are enabled in this application. Some of
    the features may affect the security of the application.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: contrib.nodejsscan.logic_bypass.node_logic_bypass
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $REQ.$FOO.$BAR !== $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR === $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR >= $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR <= $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR < $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO.$BAR > $REQ.$ZOO.$ZAR
    - pattern: |
        $REQ.$FOO['...'] !== $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] === $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] >= $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] <= $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] < $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO['...'] > $REQ.$ZOO['...']
    - pattern: |
        $REQ.$FOO('...') !== $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') === $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') >= $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') <= $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') < $REQ.$ZOO('...')
    - pattern: |
        $REQ.$FOO('...') > $REQ.$ZOO('...')
  message: User controlled data is used for application business logic decision making.
    This expose protected data or functionality.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-807: Reliance on Untrusted Inputs in a Security Decision'
- id: contrib.nodejsscan.open_redirect.express_open_redirect
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X.redirect(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.redirect(..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.redirect(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$FOO ...>;
        ...
        $X.redirect(..., <... $INP ...>, ...);
  message: Untrusted user input in redirect() can result in Open Redirect vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
- id: contrib.nodejsscan.regex_injection.regex_injection_dos
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = new RegExp(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM.$BAR ...>;
        ...
        $RE = new RegExp(<... $INP ...>);
    - pattern: |
        new RegExp(<... $REQ.$PARAM ...>);
    - pattern: |
        new RegExp(<... $REQ.$PARAM.$BAR ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = $STR.search(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM.$FOO ...>;
        ...
        $RE = $STR.search(<... $INP ...>);
    - pattern: |
        $STR.search(<... $REQ.$PARAM ...>);
    - pattern: |
        $STR.search(<... $REQ.$PARAM.$BAR ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = $STR.match(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM.$FOO ...>;
        ...
        $RE = $STR.match(<... $INP ...>);
    - pattern: |
        $STR.match(<... $REQ.$PARAM ...>);
    - pattern: |
        $STR.match(<... $REQ.$PARAM.$BAR ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $RE = $STR.split(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$PARAM.$FOO ...>;
        ...
        $RE = $STR.split(<... $INP ...>);
    - pattern: |
        $STR.split(<... $REQ.$PARAM ...>);
    - pattern: |
        $STR.split(<... $REQ.$PARAM.$BAR ...>);
  message: User controlled data in RegExp() can make the application vulnerable to
    layer 7 DoS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
- id: contrib.nodejsscan.resolve_path_traversal.join_resolve_path_traversal
  patterns:
  - pattern-inside: |
      require('path');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PATH.join(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.join(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: $PATH.resolve(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.resolve(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
    - pattern: |-
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
  message: Path constructed with user input can result in Path Traversal. Ensure that
    user input does not reach `join()` or `resolve()`.
  languages:
  - javascript
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path
      Traversal)'
  severity: WARNING
- id: contrib.nodejsscan.security_electronjs.electron_nodejs_integration
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {nodeIntegration: true}});
    - pattern: |
        var $X = {webPreferences: {nodeIntegration: true}};
  message: Node integration exposes node.js APIs to the electron app and this can
    introduce remote code execution vulnerabilities to the application if the app
    is vulnerable to Cross Site Scripting (XSS).
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: contrib.nodejsscan.security_electronjs.electron_context_isolation
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {contextIsolation: false}});
    - pattern: |
        var $X = {webPreferences: {contextIsolation: false}};
  message: Disabling context isolation can introduce Prototype Pollution vulnerabilities.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: contrib.nodejsscan.security_electronjs.electron_experimental_features
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {experimentalFeatures: true}});
    - pattern: |
        var $X = {webPreferences: {experimentalFeatures: true}};
  message: Experimental features are not expected to be in production ready applications.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: contrib.nodejsscan.sql_injection.node_sqli_injection
  patterns:
  - pattern-either:
    - pattern: |
        $CON.query(<... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $CON.query(<... $REQ.$QUERY ...>, ...)
    - pattern: |
        $SQL = <... $REQ.$QUERY.$VAR ...>;
        ...
        $CON.query(<... $SQL ...>, ...);
    - pattern: |
        $SQL = <... $REQ.$QUERY ...>;
        ...
        $CON.query(<... $SQL ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $CON.query(<... $SQL ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $SQL = <... $INP ...>;
        ...
        $CON.query(<... $SQL ...>, ...);
  message: Untrusted input concatinated with raw SQL query can result in SQL Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
- id: contrib.nodejsscan.timing_attack_node.node_timing_attack
  patterns:
  - pattern-not: if ($Z == null) { ... };
  - pattern-not: if ($Z === null) { ... };
  - pattern-not: if ($Z != null) { ... };
  - pattern-not: if ($Z !== null) { ... };
  - pattern-not: if ($Q != undefined) { ... };
  - pattern-not: if ($Q !== undefined) { ... };
  - pattern-not: if ($Q == undefined) { ... };
  - pattern-not: if ($Q === undefined) { ... };
  - pattern-not: return $Y == null;
  - pattern-not: return $Y === null;
  - pattern-not: return $Y != null;
  - pattern-not: return $Y !== null;
  - pattern-not: return $Y == undefined;
  - pattern-not: return $Y === undefined;
  - pattern-not: return $Y != undefined;
  - pattern-not: return $Y !== undefined;
  - pattern-either:
    - pattern: |
        if (password == $X) {
            ...
        }
    - pattern: |
        if ($X == password) {
            ...
        }
    - pattern: |
        if (password === $X) {
            ...
        }
    - pattern: |
        if ($X === password) {
            ...
        }
    - pattern: |
        if (pass == $X) {
            ...
        }
    - pattern: |
        if ($X == pass) {
            ...
        }
    - pattern: |
        if (pass === $X) {
            ...
        }
    - pattern: |
        if ($X === pass) {
            ...
        }
    - pattern: |
        if (secret == $X) {
            ...
        }
    - pattern: |
        if ($X == secret) {
            ...
        }
    - pattern: |
        if (secret === $X) {
            ...
        }
    - pattern: |
        if ($X === secret) {
            ...
        }
    - pattern: |
        if (api == $X) {
            ...
        }
    - pattern: |
        if ($X == api) {
            ...
        }
    - pattern: |
        if (api === $X) {
            ...
        }
    - pattern: |
        if ($X === api) {
            ...
        }
    - pattern: |
        if (apiKey == $X) {
            ...
        }
    - pattern: |
        if ($X == apiKey) {
            ...
        }
    - pattern: |
        if (apiKey === $X) {
            ...
        }
    - pattern: |
        if ($X === apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret == $X) {
            ...
        }
    - pattern: |
        if ($X == apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret === $X) {
            ...
        }
    - pattern: |
        if ($X === apiSecret) {
            ...
        }
    - pattern: |
        if (token == $X) {
            ...
        }
    - pattern: |
        if ($X == token) {
            ...
        }
    - pattern: |
        if (token === $X) {
            ...
        }
    - pattern: |
        if ($X === token) {
            ...
        }
    - pattern: |
        if (hash == $X) {
            ...
        }
    - pattern: |
        if ($X == hash) {
            ...
        }
    - pattern: |
        if (hash === $X) {
            ...
        }
    - pattern: |
        if ($X === hash) {
            ...
        }
    - pattern: |
        if (auth_token == $X) {
            ...
        }
    - pattern: |
        if ($X == auth_token) {
            ...
        }
    - pattern: |
        if (auth_token === $X) {
            ...
        }
    - pattern: |
        if ($X === auth_token) {
            ...
        }
    - pattern: |
        if (password != $X) {
            ...
        }
    - pattern: |
        if ($X != password) {
            ...
        }
    - pattern: |
        if (password !== $X) {
            ...
        }
    - pattern: |
        if ($X !== password) {
            ...
        }
    - pattern: |
        if (pass != $X) {
            ...
        }
    - pattern: |
        if ($X != pass) {
            ...
        }
    - pattern: |
        if (pass !== $X) {
            ...
        }
    - pattern: |
        if ($X !== pass) {
            ...
        }
    - pattern: |
        if (secret != $X) {
            ...
        }
    - pattern: |
        if ($X != secret) {
            ...
        }
    - pattern: |
        if (secret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== secret) {
            ...
        }
    - pattern: |
        if (api != $X) {
            ...
        }
    - pattern: |
        if ($X != api) {
            ...
        }
    - pattern: |
        if (api !== $X) {
            ...
        }
    - pattern: |
        if ($X !== api) {
            ...
        }
    - pattern: |
        if (apiKey != $X) {
            ...
        }
    - pattern: |
        if ($X != apiKey) {
            ...
        }
    - pattern: |
        if (apiKey !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiKey) {
            ...
        }
    - pattern: |
        if (apiSecret != $X) {
            ...
        }
    - pattern: |
        if ($X != apiSecret) {
            ...
        }
    - pattern: |
        if (apiSecret !== $X) {
            ...
        }
    - pattern: |
        if ($X !== apiSecret) {
            ...
        }
    - pattern: |
        if (token != $X) {
            ...
        }
    - pattern: |
        if ($X != token) {
            ...
        }
    - pattern: |
        if (token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== token) {
            ...
        }
    - pattern: |
        if (hash != $X) {
            ...
        }
    - pattern: |
        if ($X != hash) {
            ...
        }
    - pattern: |
        if (hash !== $X) {
            ...
        }
    - pattern: |
        if ($X !== hash) {
            ...
        }
    - pattern: |
        if (auth_token != $X) {
            ...
        }
    - pattern: |
        if ($X != auth_token) {
            ...
        }
    - pattern: |
        if (auth_token !== $X) {
            ...
        }
    - pattern: |
        if ($X !== auth_token) {
            ...
        }
    - pattern: |
        return $X === auth_token;
    - pattern: |
        return auth_token === $X;
    - pattern: |
        return $X === token;
    - pattern: |
        return token === $X;
    - pattern: |
        return $X === hash;
    - pattern: |
        return hash === $X;
    - pattern: |
        return $X === password;
    - pattern: |
        return password === $X;
    - pattern: |
        return $X === pass;
    - pattern: |
        return pass === $X;
    - pattern: |
        return $X === apiKey;
    - pattern: |
        return apiKey === $X;
    - pattern: |
        return $X === apiSecret;
    - pattern: |
        return apiSecret === $X;
    - pattern: |
        return $X === api_key;
    - pattern: |
        return api_key === $X;
    - pattern: |
        return $X === api_secret;
    - pattern: |
        return api_secret === $X;
    - pattern: |
        return $X === secret;
    - pattern: |
        return secret === $X;
    - pattern: |
        return $X === api;
    - pattern: |
        return api === $X;
    - pattern: |
        return $X == auth_token;
    - pattern: |
        return auth_token == $X;
    - pattern: |
        return $X == token;
    - pattern: |
        return token == $X;
    - pattern: |
        return $X == hash;
    - pattern: |
        return hash == $X;
    - pattern: |
        return $X == password;
    - pattern: |
        return password == $X;
    - pattern: |
        return $X == pass;
    - pattern: |
        return pass == $X;
    - pattern: |
        return $X == apiKey;
    - pattern: |
        return apiKey == $X;
    - pattern: |
        return $X == apiSecret;
    - pattern: |
        return apiSecret == $X;
    - pattern: |
        return $X == api_key;
    - pattern: |
        return api_key == $X;
    - pattern: |
        return $X == api_secret;
    - pattern: |
        return api_secret == $X;
    - pattern: |
        return $X == secret;
    - pattern: |
        return secret == $X;
    - pattern: |
        return $X == api;
    - pattern: |
        return api == $X;
    - pattern: |
        return $X !== auth_token;
    - pattern: |
        return auth_token !== $X;
    - pattern: |
        return $X !== token;
    - pattern: |
        return token !== $X;
    - pattern: |
        return $X !== hash;
    - pattern: |
        return hash !== $X;
    - pattern: |
        return $X !== password;
    - pattern: |
        return password !== $X;
    - pattern: |
        return $X !== pass;
    - pattern: |
        return pass !== $X;
    - pattern: |
        return $X !== apiKey;
    - pattern: |
        return apiKey !== $X;
    - pattern: |
        return $X !== apiSecret;
    - pattern: |
        return apiSecret !== $X;
    - pattern: |
        return $X !== api_key;
    - pattern: |
        return api_key !== $X;
    - pattern: |
        return $X !== api_secret;
    - pattern: |
        return api_secret !== $X;
    - pattern: |
        return $X !== secret;
    - pattern: |
        return secret !== $X;
    - pattern: |
        return $X !== api;
    - pattern: |
        return api !== $X;
    - pattern: |
        return $X != auth_token;
    - pattern: |
        return auth_token != $X;
    - pattern: |
        return $X != token;
    - pattern: |
        return token != $X;
    - pattern: |
        return $X != hash;
    - pattern: |
        return hash != $X;
    - pattern: |
        return $X != password;
    - pattern: |
        return password != $X;
    - pattern: |
        return $X != pass;
    - pattern: |
        return pass != $X;
    - pattern: |
        return $X != apiKey;
    - pattern: |
        return apiKey != $X;
    - pattern: |
        return $X != apiSecret;
    - pattern: |
        return apiSecret != $X;
    - pattern: |
        return $X != api_key;
    - pattern: |
        return api_key != $X;
    - pattern: |
        return $X != api_secret;
    - pattern: |
        return api_secret != $X;
    - pattern: |
        return $X != secret;
    - pattern: |
        return secret != $X;
    - pattern: |
        return $X != api;
    - pattern: |
        return api != $X;
  message: 'String comparisons using ''==='', ''!=='', ''!='' and ''=='' is vulnerable
    to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/'
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-208: Observable Timing Discrepancy'
- id: contrib.nodejsscan.xml_entity_expansion_dos.node_entity_expansion
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $PARSER = new expat.Parser();
        ...
        $PARSER.write(..., <... $REQ.$QUERY ...>, ...);
    - pattern: |
        $PARSER = new expat.Parser();
        ...
        $PARSER.write(..., <... $REQ.$QUERY.$FOO ...>, ...);
    - pattern: |
        $PARSER = new expat.Parser();
        ...
        $PARSER.write(..., <... $REQ.$QUERY.$FOO.$FILE ...>, ...);
  message: User controlled data in XML Parsers can result in XML Internal Entity Processing
    vulnerabilities like in DoS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
- id: contrib.nodejsscan.xss_mustache_escape.xss_disable_mustache_escape
  pattern: $OBJ.escapeMarkup = false
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A7: Cross-Site Scripting XSS'
  message: Markup escaping disabled. This can be used with some template engines to
    escape disabling of HTML entities, which can lead to XSS attacks.
- id: python.lang.security.audit.dangerous-subprocess-use.dangerous-subprocess-use
  pattern-either:
  - patterns:
    - pattern-not: subprocess.$FUNC("...", ...)
    - pattern-not: subprocess.$FUNC(["...",...], ...)
    - pattern-not: subprocess.CalledProcessError(...)
    - pattern-not: subprocess.SubprocessError(...)
    - pattern: subprocess.$FUNC(...)
  - patterns:
    - pattern: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...)
    - pattern-not: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...)
  - patterns:
    - pattern: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...)
    - pattern-not: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)
  message: |
    Detected subprocess function '$FUNC' without a static string. If this data can be
    controlled by a malicious actor, it may be an instance of command injection.
    Audit the use of this call to ensure it is not controllable by an external resource.
    You may consider using 'shlex.escape()'.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess
    - https://docs.python.org/3/library/subprocess.html
    - https://docs.python.org/3/library/shlex.html
  languages:
  - python
  severity: WARNING
- id: contrib.nodejsscan.xss_serialize_js.xss_serialize_javascript
  patterns:
  - pattern-inside: |
      ...
      $S = require('serialize-javascript');
      ...
  - pattern-not-inside: escape(...)
  - pattern-not-inside: encodeURI(...)
  - pattern: |
      $S(..., {unsafe: true});
  message: Untrusted user input reaching `serialize-javascript` with `unsafe` attribute
    can cause Cross Site Scripting (XSS).
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page'
- id: javascript.jquery.security.audit.jquery-insecure-selector.jquery-insecure-selector
  message: User controlled data in a `$(...)` is an anti-pattern that can lead to
    XSS vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    - https://bugs.jquery.com/ticket/9521
  patterns:
  - pattern-either:
    - pattern: |
        $(<... window ...>)
    - pattern: |
        $(<... location ...>)
    - pattern: |
        $X = <... window ...>;
        ...
        $(<... $X ...>);
    - pattern: |
        $X = <... location ...>;
        ...
        $(<... $X ...>);
    - patterns:
      - pattern-either:
        - pattern-inside: |
            function $FUNC(..., $Y, ...) {
              ...
            }
        - pattern-inside: |
            function (..., $Y, ...) {
              ...
            }
        - pattern-inside: |
            function $FUNC(...,$Z,...) {
              ...
              $Y = <... $Z ...>;
              ...
            }
        - pattern-inside: |
            function (...,$Z,...) {
              ...
              $Y = <... $Z ...>;
              ...
            }
      - pattern-either:
        - pattern: |
            $(<... $Y ...>)
        - pattern: |
            $("..." + (<... $Y ...>))
        - pattern: |
            $((<... $Y ...>) + "...")
      - pattern-not-inside: |
          $JQUERY.each(function($INDEX, $Y) {
            ...
          })
  - pattern-not: |
      $(window)
  - pattern-not: |
      $(document)
  - pattern-not: |
      $(this)
- id: javascript.browser.security.insecure-document-method.insecure-document-method
  patterns:
  - pattern-either:
    - pattern: |
        $EL.innerHTML = $HTML;
    - pattern: |
        $EL.outerHTML = $HTML;
    - pattern: document.write(...)
  - pattern-not: |
      $EL.innerHTML = "...";
  - pattern-not: |
      $EL.outerHTML = "...";
  - pattern-not: document.write("...")
  message: |
    User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: generic.html-templates.security.var-in-script-src.var-in-script-src
  message: Detected a template variable used as the 'src' in a script tag. Although
    template variables are HTML escaped, HTML escaping does not always prevent malicious
    URLs from being injected and could results in a cross-site scripting (XSS) vulnerability.
    Prefer not to dynamically generate the 'src' attribute and use static URLs instead.
    If you must do this, carefully check URLs against an allowlist and be sure to
    URL-encode the result.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
  languages:
  - generic
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...>
  - pattern-not-inside: src = '...'
  - pattern-not-inside: src = "..."
  - pattern: '{{ ... }}'
- id: yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster
  pattern: |
    cluster:
      ...
      insecure-skip-tls-verify: true
  message: |
    Cluster is disabling TLS certificate verification when communicating with
    the server. This makes your HTTPS connections insecure. Remove the
    'insecure-skip-tls-verify: true' key to secure communication.
  metadata:
    references:
    - https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service
  pattern: |
    spec:
      ...
      insecureSkipTLSVerify: true
  message: |
    Service is disabling TLS certificate verification when communicating with
    the server. This makes your HTTPS connections insecure. Remove the
    'insecureSkipTLSVerify: true' key to secure communication.
  metadata:
    references:
    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io
  languages:
  - yaml
  severity: WARNING
- id: generic.nginx.security.insecure-redirect.insecure-redirect
  patterns:
  - pattern-either:
    - pattern: rewrite ... redirect
    - pattern: rewrite ... permanent
  - pattern-not-inside: rewrite ... https ... $host ... redirect
  - pattern-not-inside: rewrite ... https ... $host ... permanent
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  message: |
    Detected an insecure redirect in this nginx configuration.
    If no scheme is specified, nginx will forward the request with the
    incoming scheme. This could result in unencrypted communications.
    To fix this, include the 'https' scheme.
  languages:
  - generic
  severity: WARNING
- id: generic.nginx.security.missing-internal.missing-internal
  patterns:
  - pattern-inside: |
      location ... {
        ...
        ...
      }
  - pattern-not-inside: |
      location ... {
        ...
        internal;
        ...
      }
  - pattern: proxy_pass ...;
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: This location block contains a 'proxy_pass' directive but does not contain
    the 'internal' directive. The 'internal' directive restricts access to this location
    to internal requests. Without 'internal', an attacker could use your server for
    server-side request forgeries (SSRF). Include the 'internal' directive in this
    block to limit exposure.
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
    - https://nginx.org/en/docs/http/ngx_http_core_module.html#internal
- id: yaml.docker-compose.security.exposing-docker-socket-volume.exposing-docker-socket-volume
  patterns:
  - pattern-inside: |
      version: ...
      ...
  - pattern: |
      volumes:
        - ...
        - /var/run/docker.sock:/var/run/docker.sock
  message: |
    Exposing host's Docker socket to containers via a volume. The owner of this
    socket is root. Giving someone access to it is equivalent to giving
    unrestricted root access to your host. Remove 'docker.sock' from volumes to
    prevent this.
  metadata:
    references:
    - https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath
  patterns:
  - pattern-inside: |
      volumes:
        ...
  - pattern: |
      hostPath:
        ...
        path: /var/run/docker.sock
  message: |
    Exposing host's Docker socket to containers via a volume. The owner of this
    socket is root. Giving someone access to it is equivalent to giving
    unrestricted root access to your host. Remove 'docker.sock' from hostpath to
    prevent this.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.run-as-non-root.run-as-non-root
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern: |
      image: ...
      ...
  - pattern-not: |
      image: ...
      ...
      securityContext:
        ...
        runAsNonRoot: true
  message: |
    Container allows for running applications as root. This can result in
    privilege escalation attacks. Add 'runAsNonRoot: true' in 'securityContext'
    to prevent this.
  metadata:
    references:
    - https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.writable-filesystem-container.writable-filesystem-container
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern: |
      image: ...
      ...
  - pattern-not: |
      image: ...
      ...
      securityContext:
        ...
        readOnlyRootFilesystem: true
  message: |
    Container is running with a writable root filesystem. This may
    allow malicious applications to download and run additional payloads, or
    modify container files. If an application inside a container has to save
    something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true'
    to this container to prevent this.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://blog.atomist.com/security-of-docker-kubernetes/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only
  languages:
  - yaml
  severity: WARNING
- id: java.lang.security.audit.xss.jsp.no-scriptlets.no-scriptlets
  message: |
    JSP scriptlet detected. Scriptlets are difficult to use securely and
    are considered bad practice. See https://stackoverflow.com/a/3180202.
    Instead, consider migrating to JSF or using the Expression Language
    '${...}' with the escapeXml function in your JSP files.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    references:
    - https://stackoverflow.com/a/3180202
    - https://stackoverflow.com/a/4948856
  pattern-regex: \<\%[^\@].*
  paths:
    include:
    - '*.jsp'
  languages:
  - regex
  severity: WARNING
- id: python.django.security.audit.xss.template-autoescape-off.template-autoescape-off
  message: |
    Detected a template block where autoescaping is explicitly
    disabled with '{% autoescape off %}'. This allows rendering of raw HTML
    in this segment. Turn autoescaping on to prevent cross-site scripting (XSS).
    If you must do this, consider instead, using `mark_safe` in Python code.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{%\s+autoescape\s+off\s+%}'
- id: python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq
  message: |
    Detected a template variable where autoescaping is explicitly
    disabled with '| safeseq' filter. This allows rendering of raw HTML
    in this segment. Ensure no user data is rendered here, otherwise this
    is a cross-site scripting (XSS) vulnerability. If you must do this,
    use `mark_safe` in your Python code.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{{.*?\|\s+safeseq(\s+}})?'
- id: python.django.security.audit.xss.template-href-var.template-href-var
  message: |
    Detected a template variable used in an anchor tag with
    the 'href' attribute. This allows a malicious actor to
    input the 'javascript:' URI and is subject to cross-
    site scripting (XSS) attacks. Use the 'url' template tag
    to safely generate a URL. You may also consider setting
    the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url
    - https://content-security-policy.com/
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: .*href\s*=\s*[\"\']?{{\s*.*
- id: python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe
  message: Detected a segment of a Flask template where autoescaping is explicitly
    disabled with '| safe' filter. This allows rendering of raw HTML in this segment.
    Ensure no user data is rendered here, otherwise this is a cross-site scripting
    (XSS) vulnerability.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{{.*?\|\s*safe(\s*}})?'
- id: javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
  message: |
    Detected a unescaped variables using '&attributes'.
    If external data can reach these locations,
    your application is exposed to a cross-site scripting (XSS)
    vulnerability. If you must do this, ensure no external data
    can reach this location.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://pugjs.org/language/attributes.html#attributes
  languages:
  - regex
  paths:
    include:
    - '*.pug'
  severity: WARNING
  pattern-regex: .*&attributes.*
- id: javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
  message: |
    Detected a template variable used in a script tag.
    Although template variables are HTML escaped, HTML
    escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this
    data on the rendered page, consider placing it in the HTML
    portion (outside of a script tag). Alternatively, use a
    JavaScript-specific encoder, such as the one available
    in OWASP ESAPI.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
  languages:
  - regex
  paths:
    include:
    - '*.pug'
  severity: WARNING
  pattern-either:
  - pattern-regex: script\s*=[A-Za-z0-9]+
  - pattern-regex: script\s*=.*["']\s*\+.*
  - pattern-regex: script\s*=[^'"]+\+.*
  - pattern-regex: script\(.*?\)\s*=\s*[A-Za-z0-9]+
  - pattern-regex: script\(.*?\)\s*=\s*.*["']\s*\+.*
  - pattern-regex: script\(.*?\)\s*=\s*[^'"]+\+.*
- id: javascript.express.security.audit.xss.pug.var-in-href.var-in-href
  message: |
    Detected a template variable used in an anchor tag with
    the 'href' attribute. This allows a malicious actor to
    input the 'javascript:' URI and is subject to cross-
    site scripting (XSS) attacks. If using a relative URL,
    start with a literal forward slash and concatenate the URL,
    like this: a(href='/'+url). You may also consider setting
    the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://github.com/pugjs/pug/issues/2952
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
  languages:
  - regex
  paths:
    include:
    - '*.pug'
  severity: WARNING
  pattern-regex: a\(.*href=[^'"].*\)
- id: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
  message: |
    Detected an explicit unescape in an EJS template, using
    '<%- ... %>' If external data can reach these locations,
    your application is exposed to a cross-site scripting (XSS)
    vulnerability. Use '<%= ... %>' to escape this data. If you
    need escaping, ensure no external data can reach this location.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/
  languages:
  - regex
  paths:
    include:
    - '*.ejs'
    - '*.html'
  severity: WARNING
  pattern-regex: <%-((?!include).)*?%>
  fix-regex:
    regex: <%-(.*?)%>
    replacement: <%=\1%>
- id: javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
  message: |
    Detected a template variable used in an anchor tag with
    the 'href' attribute. This allows a malicious actor to
    input the 'javascript:' URI and is subject to cross-
    site scripting (XSS) attacks. If using a relative URL,
    start with a literal forward slash and concatenate the URL,
    like this: href='/<%= link %>'. You may also consider setting
    the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
  languages:
  - regex
  paths:
    include:
    - '*.ejs'
    - '*.html'
  severity: WARNING
  pattern-regex: <a.*href\s*=[^>]*?[^\/&=]<%.*?%>.*?>
- id: javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
  message: |
    Detected an explicit unescape in a Mustache template, using
    triple braces '{{{...}}}' or ampersand '&'. If external data
    can reach these locations,
    your application is exposed to a cross-site scripting (XSS)
    vulnerability. If you must do this, ensure no external data
    can reach this location.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://github.com/janl/mustache.js/#variables
  languages:
  - regex
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  pattern-either:
  - pattern-regex: '{{{((?!include).)*?}}}'
  - pattern-regex: '{{[^}]*&[^}]*}}'
- id: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2
  message: |
    Detected direct use of jinja2. If not done properly,
    this may bypass HTML escaping which opens up the application to
    cross-site scripting (XSS) vulnerabilities. Prefer using the Flask
    method 'render_template()' and templates with a '.html' extension
    in order to prevent XSS.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://jinja.palletsprojects.com/en/2.11.x/api/#basics
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: jinja2.Environment(...)
  - pattern: jinja2.Template.render(...)
  - patterns:
    - pattern-inside: |
        $TEMPLATE = $ENV.get_template(...)
        ...
    - pattern: $TEMPLATE.render(...)
  - patterns:
    - pattern-inside: |
        $TEMPLATE = jinja2.Template(...)
        ...
    - pattern: $TEMPLATE.render(...)
- id: javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
  message: |
    Detected a template variable used in an anchor tag with
    the 'href' attribute. This allows a malicious actor to
    input the 'javascript:' URI and is subject to cross-
    site scripting (XSS) attacks. If using a relative URL,
    start with a literal forward slash and concatenate the URL,
    like this: href='/{{link}}'. You may also consider setting
    the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
  languages:
  - regex
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  pattern-regex: <a.*href\s*=(\s|['"])*?{{.*?}}.*
- id: javascript.browser.security.new-function-detected.new-function-detected
  patterns:
  - pattern-not: |
      $FUNC = new Function('...');
      ...
      $FUNC();
  - pattern: |
      $FUNC = new Function(...);
      ...
      $FUNC();
  message: |
    Detected the use of new Function(), which can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
  languages:
  - javascript
  severity: WARNING
- id: go.lang.security.audit.dangerous-command-write.dangerous-command-write
  patterns:
  - pattern: |
      $CW.Write($BYTE)
  - pattern-inside: |
      $CW,$ERR := $CMD.StdinPipe()
      ...
  - pattern-not: |
      $CW.Write("...")
  - pattern-not: |
      $CW.Write([]byte("..."))
  - pattern-not: |
      $CW.Write([]byte("..."+"..."))
  - pattern-not-inside: |
      $BYTE = []byte("...");
      ...
  - pattern-not-inside: |
      $BYTE = []byte("..."+"...");
      ...
  - pattern-inside: |
      import "os/exec"
      ...
  message: |
    Detected non-static command inside Write. Audit the input to '$CW.Write'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  severity: WARNING
  languages:
  - go
- id: contrib.nodejsscan.exec_os_command.generic_os_command_exec
  patterns:
  - pattern-inside: |
      require('child_process');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $EXEC.exec(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $EXEC.exec(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $EXEC.execSync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $EXEC.execSync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $EXEC.exec(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $EXEC.exec(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $EXEC.execSync(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $EXEC.execSync(..., <... $INP ...>, ...);
  message: User controlled data in 'child_process.exec()' can result in Remote OS
    Command Execution.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: ruby.rails.security.audit.xss.templates.avoid-content-tag.avoid-content-tag
  message: |
    'content_tag' exhibits unintuitive escaping behavior and may accidentally
    expose your application to cross-site scripting. If using Rails 2, only
    attribute values are escaped. If using Rails 3, content and attribute values
    are escaped. Tag and attribute names are never escaped. Because of this,
    it is recommended to use 'html_safe' if you must render raw HTML data.
  metadata:
    source-rule-url: https://brakemanscanner.org/docs/warning_types/content_tag/
    references:
    - https://brakemanscanner.org/docs/warning_types/content_tag/
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern: content_tag
- id: ruby.rails.security.audit.xss.templates.alias-for-html-safe.alias-for-html-safe
  message: |-
    The syntax `<%== ... %>` is an alias for `html_safe`. This means the
    content inside these tags will be rendered as raw HTML. This may expose
    your application to cross-site scripting. If you need raw HTML, prefer
    using the more explicit `html_safe` and be sure to correctly sanitize
    variables using a library such as DOMPurify.
  metadata:
    references:
    - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027
    - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  pattern: <%== ... %>
- id: ruby.rails.security.audit.xss.templates.dangerous-link-to.dangerous-link-to
  message: |
    Detected a template variable used in 'link_to'. This will
    generate dynamic data in the 'href' attribute.
    This allows a malicious actor to
    input the 'javascript:' URI and is subject to cross-
    site scripting (XSS) attacks. If using a relative URL,
    start with a literal forward slash and concatenate the URL,
    like this: 'link_to "Here", "/"+@link'. You may also consider
    setting the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#cross-site-scripting-xss
    - https://brakemanscanner.org/docs/warning_types/link_to_href/
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern-not-inside: link_to ... "/" + ... @$VAR
  - pattern-not-inside: link_to ... '/' + ... @$VAR
  - pattern: link_to ... @$VAR
- id: ruby.rails.security.audit.xss.templates.unquoted-attribute.unquoted-attribute
  message: |
    Detected a unquoted template variable as an attribute. If unquoted, a
    malicious actor could inject custom JavaScript handlers. To fix this,
    add quotes around the template expression, like this: "<%= expr %>".
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#unquoted-attributes
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <$TAG ...>
  - pattern-not-inside: ="..."
  - pattern-not-inside: ='...'
  - pattern: <%= ... %>
  fix-regex:
    regex: <%=(.*?)%>
    replacement: '"<%=\1%>"'
- id: ruby.rails.security.audit.xss.templates.avoid-raw.avoid-raw
  message: |-
    'raw' renders raw HTML, as the name implies. This means that normal
    HTML escaping is bypassed. If user data can be controlled here, this
    exposes your application to cross-site scripting (XSS). If you need to
    do this, be sure to correctly sanitize the data using a library such as
    DOMPurify.
  metadata:
    references:
    - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===
    - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern: raw
- id: java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
  patterns:
  - pattern-either:
    - pattern: $RUNTIME.exec($X + $Y);
    - pattern: $RUNTIME.exec(String.format(...));
    - pattern: $RUNTIME.loadLibrary($X + $Y);
    - pattern: $RUNTIME.loadLibrary(String.format(...));
    - patterns:
      - pattern-either:
        - pattern: |
            $RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
        - pattern: |
            $RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
        - pattern: |
            $RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
        - patterns:
          - pattern-either:
            - pattern: |
                $RUNTIME.exec($CMD,"-c",$ARG,...)
            - pattern: |
                $RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)
            - pattern: |
                $RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
              ...
      - pattern-not-inside: |
          $ARG = "...";
          ...
      - pattern-not: |
          $RUNTIME.exec("...","...","...",...)
      - pattern-not: |
          $RUNTIME.exec(new String[]{"...","...","...",...},...)
      - pattern-not: |
          $RUNTIME.exec(Arrays.asList("...","...","...",...),...)
  - pattern-inside: |
      $TYPE $RUNTIME = Runtime.getRuntime(...);
      ...
  message: |
    A formatted or concatenated string was detected as input to a java.lang.Runtime call.
    This is dangerous if a variable is controlled by user input and could result in a
    command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
  patterns:
  - pattern-either:
    - pattern: |
        $SHELL.parse(...)
    - pattern: |
        $SHELL.evaluate(...)
    - pattern: |
        $SHELL.parseClass(...)
  - pattern-either:
    - pattern-inside: |
        groovy.lang.GroovyShell $SHELL = ...;
        ...
    - pattern-inside: |
        groovy.lang.GroovyClassLoader $SHELL = ...;
        ...
  - pattern-not: |
      $SHELL.parse("...",...)
  - pattern-not: |
      $SHELL.evaluate("...",...)
  - pattern-not: |
      $SHELL.parseClass("...",...)
  message: |
    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#GROOVY_SHELL
  languages:
  - java
  severity: WARNING
- id: java.lang.security.audit.weak-ssl-context.weak-ssl-context
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source_rule_url: https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT
    references:
    - https://tools.ietf.org/html/rfc7568
    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html
  message: |
    An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use SSLContext.getInstance("TLSv1.2") for the best security.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not: SSLContext.getInstance("TLSv1.3")
  - pattern-not: SSLContext.getInstance("TLSv1.2")
  - pattern: SSLContext.getInstance("...")
  fix-regex:
    regex: (.*?)\.getInstance\(.*?\)
    replacement: \1.getInstance("TLSv1.2")
- id: java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
  pattern-either:
  - patterns:
    - pattern: |
        new ProcessBuilder($CMD,...)
    - pattern-not-inside: |
        $CMD = "...";
        ...
    - pattern-not-inside: |
        $CMD = Arrays.asList("...",...);
        ...
    - pattern-not-inside: |
        $CMD = new String[]{"...",...};
        ...
    - pattern-not: |
        new ProcessBuilder("...",...)
    - pattern-not: |
        new ProcessBuilder(new String[]{"...",...},...)
    - pattern-not: |
        new ProcessBuilder(Arrays.asList("...",...),...)
  - patterns:
    - pattern: |
        $PB.command($CMD,...)
    - pattern-inside: |
        $TYPE $PB = new ProcessBuilder(...);
        ...
    - pattern-not-inside: |
        $CMD = "...";
        ...
    - pattern-not-inside: |
        $CMD = Arrays.asList("...",...);
        ...
    - pattern-not-inside: |
        $CMD = new String[]{"...",...};
        ...
    - pattern-not: |
        $PB.command("...",...)
    - pattern-not: |
        $PB.command(new String[]{"...",...},...)
    - pattern-not: |
        $PB.command(Arrays.asList("...",...),...)
  - patterns:
    - pattern-either:
      - pattern: |
          new ProcessBuilder("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
      - pattern: |
          new ProcessBuilder(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
      - pattern: |
          new ProcessBuilder(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
      - patterns:
        - pattern-either:
          - pattern: |
              new ProcessBuilder($CMD,"-c",$ARG,...)
          - pattern: |
              new ProcessBuilder(Arrays.asList($CMD,"-c",$ARG,...),...)
          - pattern: |
              new ProcessBuilder(new String[]{$CMD,"-c",$ARG,...},...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
            ...
    - pattern-not-inside: |
        $ARG = "...";
        ...
    - pattern-not: |
        new ProcessBuilder("...","...","...",...)
    - pattern-not: |
        new ProcessBuilder(new String[]{"...","...","...",...},...)
    - pattern-not: |
        new ProcessBuilder(Arrays.asList("...","...","...",...),...)
  - patterns:
    - pattern-either:
      - pattern: |
          $PB.command("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
      - pattern: |
          $PB.command(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
      - pattern: |
          $PB.command(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
      - patterns:
        - pattern-either:
          - pattern: |
              $PB.command($CMD,"-c",$ARG,...)
          - pattern: |
              $PB.command(Arrays.asList($CMD,"-c",$ARG,...),...)
          - pattern: |
              $PB.command(new String[]{$CMD,"-c",$ARG,...},...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
            ...
    - pattern-inside: |
        $TYPE $PB = new ProcessBuilder(...);
        ...
    - pattern-not-inside: |
        $ARG = "...";
        ...
    - pattern-not: |
        $PB.command("...","...","...",...)
    - pattern-not: |
        $PB.command(new String[]{"...","...","...",...},...)
    - pattern-not: |
        $PB.command(Arrays.asList("...","...","...",...),...)
  message: |
    A formatted or concatenated string was detected as input to a ProcessBuilder call.
    This is dangerous if a variable is controlled by user input and could result in a
    command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - java
- id: java.jax-rs.security.insecure-resteasy.insecure-resteasy-deserialization
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://access.redhat.com/blogs/766093/posts/3162112
  message: |
    When a Restful webservice endpoint is configured to use wildcard mediaType {*/*} as a value for the @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution when calling the $Y.getObject method.
  patterns:
  - pattern-either:
    - pattern: |
        @Consumes({"application/x-java-serialized-object"})
    - pattern: |
        @Consumes({"*/*"})
    - pattern: |
        @Consumes("*/*")
    - pattern: |
        @Consumes({MediaType.WILDCARD_TYPE})
- id: java.jax-rs.security.insecure-resteasy.default-resteasy-provider-abuse
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://access.redhat.com/blogs/766093/posts/3162112
  message: |
    When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution.
  patterns:
  - pattern-either:
    - pattern: |
        @Path("...")
        public $RETURNTYPE $METHOD(...) { ...}
  - pattern-not-inside: |
      @Path("...")
      @Consumes(...)
      public $RETURNTYPE $METHOD(...) { ...}
- id: java.jjwt.security.jwt-none-alg.jjwt-none-alg
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - java
  severity: ERROR
  patterns:
  - pattern: |
      io.jsonwebtoken.Jwts.builder();
  - pattern-not-inside: |-
      $RETURNTYPE $FUNC(...) {
        ...
        $JWTS.signWith(...);
        ...
      }
- id: java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
  pattern: |
    <spring:eval ... expression=...>
  message: |
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
  severity: WARNING
  languages:
  - generic
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#JSP_SPRING_EVAL
  paths:
    include:
    - '*.jsp'
- id: terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume
  languages:
  - generic
  message: |
    An EBS volume is configured without encryption enabled.
  paths:
    include:
    - '*.tf'
  patterns:
  - pattern: resource "aws_ebs_volume" "..."
  - pattern-not-inside: |
      resource "aws_ebs_volume" "..." {... encrypted=true ...}
  - pattern-inside: |
      resource "aws_ebs_volume" "..." {...}
  severity: WARNING
- id: go.lang.security.audit.dangerous-exec-command.dangerous-exec-command
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            exec.Command($CMD,...)
        - pattern: |
            exec.CommandContext($CTX,$CMD,...)
      - pattern-not: |
          exec.Command("...",...)
      - pattern-not: |
          exec.CommandContext($CTX,"...",...)
    - patterns:
      - pattern-either:
        - pattern: |
            exec.Command("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$CMD,...)
        - pattern: |
            exec.CommandContext($CTX,"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$CMD,...)
      - pattern-not: |
          exec.Command("...","...","...",...)
      - pattern-not: |
          exec.CommandContext($CTX,"...","...","...",...)
  - pattern-inside: |
      import "os/exec"
      ...
  - pattern-not-inside: |
      $CMD,$ERR := exec.LookPath("...");
      ...
  - pattern-not-inside: |
      $CMD = "...";
      ...
  message: |
    Detected non-static command inside Command. Audit the input to 'exec.Command'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
  patterns:
  - pattern-either:
    - pattern: |
        $SMTH.MethodByName($NAME,...)
    - pattern: |
        $SMTH.FieldByName($NAME,...)
  - pattern-not: |
      $SMTH.MethodByName("...",...)
  - pattern-not: |
      $SMTH.FieldByName("...",...)
  - pattern-inside: |
      import "reflect"
      ...
  message: |
    If an attacker can supply values that the application then uses to determine which method or field to invoke,
    the potential exists for the attacker to create control flow paths through the application
    that were not intended by the application developers.
    This attack vector may allow the attacker to bypass authentication or access control checks
    or otherwise cause the application to behave in an unexpected manner.
  metadata:
    cwe: 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
      Reflection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.dangerous-syscall-exec.dangerous-syscall-exec
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          syscall.$METHOD($BIN,...)
      - pattern-not: |
          syscall.$METHOD("...",...)
      - pattern-not-inside: |
          $BIN,$ERR := exec.LookPath("...");
          ...
      - pattern-not-inside: |
          $BIN = "...";
          ...
    - patterns:
      - pattern: |
          syscall.$METHOD($BIN,$ARGS,...)
      - pattern-not: |
          syscall.$METHOD($BIN,[]string{"...",...},...)
      - pattern-not-inside: |
          $ARGS := []string{"...",...};
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
          $ARGS = []string{$CMD,...};
          ...
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
          $ARGS = []string{$CMD,...};
          ...
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: |
              syscall.$METHOD($BIN,[]string{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$EXE,...},...)
          - pattern-not: |
              syscall.$METHOD($BIN,[]string{"...","...","...",...},...)
        - patterns:
          - pattern: |
              syscall.$METHOD($BIN,$ARGS,...)
          - pattern-either:
            - pattern-inside: |
                $ARGS := []string{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$EXE,...};
                ...
            - pattern-inside: |
                $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
                ...
                $ARGS = []string{$CMD,"-c",$EXE,...};
                ...
            - pattern-inside: |
                $CMD,$ERR := exec.LookPath("=~/(sh|bash|ksh|csh|tcsh|zsh)/");
                ...
                $ARGS = []string{$CMD,"-c",$EXE,...};
                ...
          - pattern-not-inside: |
              $ARGS := []string{"...","...","...",...};
              ...
          - pattern-not-inside: |
              $CMD = "...";
              ...
              $ARGS = []string{$CMD,"...","...",...};
              ...
          - pattern-not-inside: |
              $CMD,$ERR := exec.LookPath("...");
              ...
              $ARGS = []string{$CMD,"...","...",...};
              ...
  - pattern-inside: |
      import "syscall"
      ...
  - metavariable-regex:
      metavariable: $METHOD
      regex: (Exec|ForkExec)
  message: |
    Detected non-static command inside Exec. Audit the input to 'syscall.Exec'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          exec.Cmd {...,Path: $CMD,...}
      - pattern-not: |
          exec.Cmd {...,Path: "...",...}
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
    - patterns:
      - pattern: |
          exec.Cmd {...,Args: $ARGS,...}
      - pattern-not: |
          exec.Cmd {...,Args: []string{...},...}
      - pattern-not-inside: |
          $ARGS = []string{"...",...};
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
          $ARGS = []string{$CMD,...};
          ...
      - pattern-not-inside: |
          $CMD = exec.LookPath("...");
          ...
          $ARGS = []string{$CMD,...};
          ...
    - patterns:
      - pattern: |
          exec.Cmd {...,Args: []string{$CMD,...},...}
      - pattern-not: |
          exec.Cmd {...,Args: []string{"...",...},...}
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
    - patterns:
      - pattern-either:
        - pattern: |
            exec.Cmd {...,Args: []string{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$EXE,...},...}
        - patterns:
          - pattern: |
              exec.Cmd {...,Args: []string{$CMD,"-c",$EXE,...},...}
          - pattern-inside: |
              $CMD,$ERR := exec.LookPath("=~/(sh|bash|ksh|csh|tcsh|zsh)/");
              ...
      - pattern-not: |
          exec.Cmd {...,Args: []string{"...","...","...",...},...}
      - pattern-not-inside: |
          $EXE = "...";
          ...
  - pattern-inside: |
      import "os/exec"
      ...
  message: |
    Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - go
- id: python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...):
            ...
            $SESSION = requests.Session(...)
            ...
            $SESSION.$W($URL, ...)
      - pattern: |
          def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...):
            ...
            $SESSION = requests.Session(...)
            ...
            $SESSION.request($METHOD, $URL, ...)
  - patterns:
    - pattern-inside: |
        $SESSION = requests.Session(...)
        ...
    - pattern-either:
      - pattern: $SESSION.$W("=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
      - pattern: |
          $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"
          ...
          $SESSION.$W($URL, ...)
      - pattern: $SESSION.request($METHOD, "=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
      - pattern: |
          $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"
          ...
          $SESSION.request($METHOD, $URL, ...)
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  message: |
    Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
  languages:
  - python
  severity: ERROR
- id: python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process
  message: |
    Found dynamic content when spawning a process. This is dangerous if external
    data can reach this function call because it allows a malicious actor to
    execute commands. Ensure no external data reaches here.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
  languages:
  - python
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-not: os.$METHOD("...", ...)
    - pattern: os.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe|startfile)
  - patterns:
    - pattern-not: os.$METHOD("...", ["...","...",...],...)
    - pattern: os.$METHOD("=~/(.*)(sh|bash|ksh|csh|tcsh|zsh)/",["-c",$CMD,...],...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe|startfile)
  - patterns:
    - pattern-not: os.$METHOD($MODE, "...", ...)
    - pattern: os.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe)
  - patterns:
    - pattern-not: os.$METHOD($MODE, "...", ["...","...",...], ...)
    - pattern: os.$METHOD($MODE,"=~/(.*)(sh|bash|ksh|csh|tcsh|zsh)/",["-c",$CMD,...],...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe)
- id: python.flask.security.flask-api-method-string-format.flask-api-method-string-format
  patterns:
  - pattern-either:
    - pattern: |
        def $METHOD(...,$ARG,...):
          ...
          $STRING = "...".format(...,$ARG,...)
          ...
          ... = requests.$REQMETHOD($STRING,...)
    - pattern: |
        def $METHOD(...,$ARG,...):
          ...
          ... = requests.$REQMETHOD("...".format(...,$ARG,...),...)
  - pattern-inside: |
      class $CLASS(...):
        method_decorators = ...
        ...
  message: |
    Method $METHOD in API controller $CLASS provides user arg $ARG to requests method $REQMETHOD
  severity: ERROR
  languages:
  - python
#- id: typescript.react.security.audit.react-css-injection.react-css-injection
#  patterns:
#  - pattern-either:
#    - pattern-inside: |
#        import $STYLE from "...";
#        ...
#    - pattern-inside: |
#        $STYLE = $METHOD(...);
#        ...
#    - pattern-inside: |
#        function $FUNC(...,{$STYLE},...) {
#          ...
#        }
#    - pattern-inside: |
#        function $FUNC(...,$STYLE,...) {
#          ...
#        }
#  - pattern-inside: |
#      <$EL style={$STYLE} />
#  - pattern-not-inside: |
#      <$EL style={{$X:...}} />
#  - pattern: $STYLE
#  message: |
#    User controlled data in a `style` attribute is an anti-pattern that can lead to XSS vulnerabilities
#  metadata:
#    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
#      Scripting'')'
#    owasp: 'A7: Cross-site Scripting (XSS)'
#  languages:
#  - typescript
#  - javascript
#  severity: WARNING
- id: typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
  patterns:
  - pattern-inside: |
      import styled from 'styled-components';
      ...
  - pattern-not-inside: |
      import { keyframes } from 'styled-components';
      ...
      $STYLE = keyframes(...);
      ...
  - pattern-either:
    - pattern-inside: |
        $STYLE = $METHOD(...);
        ...
    - pattern-inside: |
        function $FUNC(...,{$STYLE},...) {
          ...
        }
    - pattern-inside: |
        function $FUNC(...,$STYLE,...) {
          ...
        }
    - pattern-inside: |
        function $FUNC(...,{$INPUT},...) {
          ...
          $STYLE = <... $INPUT ...>;
          ...
        }
    - pattern-inside: |
        function $FUNC(...,$INPUT,...) {
          ...
          $STYLE = <... $INPUT ...>;
          ...
        }
  - pattern: |
      styled.$EL`...${$STYLE}...`
  message: |
    User controlled data in a styled component's css is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://styled-components.com/docs/advanced#security
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.nestjs.security.audit.nestjs-header-cors-any.nestjs-header-cors-any
  pattern-either:
  - pattern: |
      class $CN {
          @Header("=~/[Aa][Cc][Cc][Ee][Ss][Ss]-[Cc][Oo][Nn][Tt][Rr][Oo][Ll]-[Aa][Ll][Ll][Oo][Ww]-[Oo][Rr][Ii][Gg][Ii][Nn]/", '*')
          $FN(...) {
              ...
          }
      }
  - pattern: |
      NestFactory.create($MODULE, {cors: true})
  - pattern: |
      NestFactory.create($MODULE, {cors: {origin: '*'}})
  - pattern: |
      $APP.enableCors()
  - pattern: |
      $APP.enableCors({origin: '*'})
  message: |
    Access-Control-Allow-Origin response header is set to "*". This will disable CORS Same Origin Policy restrictions.
  metadata:
    asvs:
      section: 'V14: Configuration Verification Requirements'
      control_id: 14.4.8 Permissive CORS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x22-V14-Config.md#v144-http-security-headers-requirements
      version: '4'
  languages:
  - typescript
  severity: WARNING
- id: generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash
  pattern-regex: \$2[aby]?\$[\d]+\$[./A-Za-z0-9]{53}
  languages:
  - regex
  message: bcrypt hash detected
  severity: ERROR
- id: generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token
  pattern-regex: _authToken=(\w{8})-(\w{4})-(\w{4})-(\w{4})-(\w{12})$
  languages:
  - regex
  message: NPM registry authentication token detected
  paths:
    include:
    - '*npmrc*'
  severity: ERROR
- id: generic.secrets.security.detected-etc-shadow.detected-etc-shadow
  pattern-regex: root:[x!*]*:[0-9]*:[0-9]*
  languages:
  - regex
  message: linux shadow file detected
  severity: ERROR
- id: generic.secrets.security.detected-sql-dump.detected-sql-dump
  pattern-regex: Dumping data for table `.*`
  languages:
  - regex
  message: SQL dump detected
  severity: ERROR
- id: generic.dockerfile.best-practice.missing-pip-no-cache-dir.missing-pip-no-cache-dir
  severity: INFO
  languages:
  - generic
  patterns:
  - patterns:
    - pattern: |
        RUN ... $PIP install ... $SOMETHING
    - pattern-not-inside: |
        RUN ... $PIP install ... --no-cache-dir
    - pattern-not-inside: |
        RUN ... $PIP install . ... $SOMETHING
    - pattern-not-inside: |
        ENV PIP_NO_CACHE_DIR=...
        ...
        ...
        ...
    - pattern-not-inside: |
        ENV PIP_NO_CACHE_DIR ...
        ...
        ...
        ...
  - metavariable-regex:
      metavariable: $PIP
      regex: (pip|pip2|pip3|python -m pip)
  message: |
    This '$PIP install' is missing '--no-cache-dir'. This flag prevents
    package archives from being kept around, thereby reducing image size.
    Add '--no-cache-dir'.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3042
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3042
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: go.jwt-go.security.jwt.hardcoded-jwt-key
  metadata:
    cwe: 'CWE-798: Use of Hard-coded Credentials'
    owasp: 'A2: Broken Authentication'
  pattern-either:
  - pattern: |
      $X = []byte("...")
      ...
      $Y := $TOKEN.SignedString($X)
  - pattern: |
      $TOKEN.SignedString([]byte("..."))
  message: JWT token is hardcoded
  languages:
  - go
  severity: WARNING
- id: javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
  message: |
    Detected eval(variable), which could allow a malicious actor to run arbitrary code.
  patterns:
  - pattern-either:
    - pattern: eval($OBJ)
    - pattern: window.eval($OBJ)
    - pattern: Function(...,$OBJ)
    - pattern: new Function(...,$OBJ)
  - pattern-not: eval("...")
  - pattern-not: window.eval("...")
  - pattern-not: Function(...,"...")
  - pattern-not: new Function(...,"...")
  - pattern-not-inside: |
      $OBJ = "..."
      ...
      $SOMETHING(..., $OBJ, ...)
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.best-practice.zlib-async-loop.zlib-async-loop
  patterns:
  - pattern-either:
    - pattern-inside: |
        for (...) {
            ...
        }
    - pattern-inside: |
        while (...) {
            ...
        }
    - pattern-inside: |
        do {
            ...
        } while (...)
    - pattern-inside: |
        $SMTH.forEach(...)
    - pattern-inside: |
        $SMTH.map(...)
    - pattern-inside: |
        $SMTH.reduce(...)
    - pattern-inside: |
        $SMTH.reduceRight(...)
  - pattern: zlib.$METHOD(...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^.+$(?<!Sync)
  message: |
    Creating and using a large number of zlib objects simultaneously
    can cause significant memory fragmentation. It is strongly recommended
    that the results of compression operations be cached or made synchronous
    to avoid duplication of effort.
  metadata:
    references:
    - https://nodejs.org/api/zlib.html#zlib_threadpool_usage_and_performance_considerations
  severity: WARNING
  languages:
  - js
- id: javascript.lang.security.detect-child-process.detect-child-process
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
  message: |
    Detected non-literal calls to $EXEC(). This could lead to a command
    injection vulnerability.
  patterns:
  - pattern-either:
    - pattern: exec($CMD,...)
    - pattern: execSync($CMD,...)
    - pattern: spawn($CMD,...)
    - pattern: spawnSync($CMD,...)
  - pattern-not-inside: $EXEC("...",...)
  - pattern-not-inside: $EXEC(["...",...],...)
  - pattern-not-inside: |
      $CMD = "..."
      ...
  - pattern-not-inside: |
      $CMD = ["...",...]
      ...
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  message: |
    Detected non-literal calls to Deno.run(). This could lead to a command
    injection vulnerability.
  pattern-either:
  - patterns:
    - pattern: |
        Deno.run({cmd: [$CMD,...]},...)
    - pattern-not-inside: |
        $CMD = "..."
        ...
    - pattern-not: |
        Deno.run({cmd: ["...",...]},...)
  - patterns:
    - pattern-either:
      - pattern: |
          Deno.run({cmd: ["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...]},...)
      - patterns:
        - pattern: |
            Deno.run({cmd: [$CMD,"-c",$ARG,...]},...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
            ...
    - pattern-not: |
        Deno.run({cmd: [$CMD,"-c","...",...]},...)
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.browser.security.insecure-innerhtml.insecure-innerhtml
  patterns:
  - pattern: |
      $EL.innerHTML = $HTML;
  - pattern-not: |
      $EL.innerHTML = "...";
  message: |
    User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key
  pattern-regex: sk_live_[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Stripe API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: javascript.browser.security.eval-detected.eval-detected
  patterns:
  - pattern-not: eval("...")
  - pattern: eval(...)
  message: |
    Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.2.4 Dynamic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing
      version: '4'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: yaml.kubernetes.security.hostipc-pod.hostipc-pod
  patterns:
  - pattern-inside: |
      spec:
        ...
  - pattern: |
      hostIPC: true
  message: |
    Pod is sharing the host IPC namespace. This allows container processes
    to communicate with processes on the host which reduces isolation and
    bypasses container protection models. Remove the 'hostIPC' key to disable
    this functionality.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.hostnetwork-pod.hostnetwork-pod
  patterns:
  - pattern-inside: |
      spec:
        ...
  - pattern: |
      hostNetwork: true
  message: |
    Pod may use the node network namespace. This gives the pod access to the
    loopback device, services listening on localhost, and could be used to
    snoop on network activity of other pods on the same node. Remove the
    'hostNetwork' key to disable this functionality.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.hostpid-pod.hostpid-pod
  patterns:
  - pattern-inside: |
      spec:
        ...
  - pattern: |
      hostPID: true
  message: |
    Pod is sharing the host process ID namespace. When paired with ptrace
    this can be used to escalate privileges outside of the container. Remove
    the 'hostPID' key to disable this functionality.
  metadata:
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
  languages:
  - yaml
  severity: WARNING
- id: javascript.jquery.security.audit.jquery-insecure-method.jquery-insecure-method
  message: User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that
    can lead to XSS vulnerabilities
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
    - https://bugs.jquery.com/ticket/9521
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: $.$METHOD($VAR,...)
      - pattern: $(...).$METHOD($VAR,...)
      - pattern: jQuery.$METHOD($VAR,...)
      - pattern: jQuery(...).$METHOD($VAR,...)
    - pattern-not: $.$METHOD("...",...)
    - pattern-not: $(...).$METHOD("...",...)
    - pattern-not: jQuery.$METHOD("...",...)
    - pattern-not: jQuery(...).$METHOD("...",...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(html|append|prepend|wrap|wrapInner|wrapAll|before|after|globalEval|getScript)$
  - patterns:
    - pattern-either:
      - pattern: $(...).$METHOD($VAR,...)
      - pattern: jQuery(...).$METHOD($VAR,...)
    - pattern-not: $("...",...).$METHOD(...)
    - pattern-not: jQuery("...",...).$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(appendTo|insertAfter|insertBefore|prependTo)$
- id: go.lang.security.audit.sqli.pg-orm-sqli.pg-orm-sqli
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: |
        $DB.$INTFUNC1(...).$METHOD(..., $X + $Y, ...).$INTFUNC2(...)
    - pattern: |
        $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
    - pattern-inside: |
        $DB = pg.Connect(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *pg.DB, ...) {
          ...
        }
  - pattern-not: |
      $DB.$INTFUNC1(...).$METHOD(..., "..." + "...", ...).$INTFUNC2(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Where|WhereOr|Join|GroupExpr|OrderExpr|ColumnExpr)$
  languages:
  - go
  message: |
    Detected string concatenation with a non-literal variable in a go-pg ORM
    SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    do not use strings concatenated with user-controlled input.
    Instead, use parameterized statements.
  metadata:
    references:
    - https://pg.uptrace.dev/queries/
  severity: WARNING
- id: python.lang.security.dangerous-globals-use.dangerous-globals-use
  patterns:
  - pattern-either:
    - pattern: globals().get(...)
    - pattern: locals().get(...)
    - pattern: globals()[...]
    - pattern: locals()[...]
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $G = globals()
            ...
        - pattern-inside: |
            $G = locals()
            ...
      - pattern-either:
        - pattern: $G.get(...)
        - pattern: $G[...]
    - pattern: $FUNC.__globals__[...]
  - pattern-not: globals().get("...")
  - pattern-not: locals().get("...")
  - pattern-not: globals()["..."]
  - pattern-not: locals()["..."]
  - pattern-not: $G.get("...")
  - pattern-not: $G.get["..."]
  - pattern-not: $G["..."]
  - pattern-not: $FUNC.__globals__["..."]
  - pattern-not-inside: globals()[...] = ...
  - pattern-not-inside: locals()[...] = ...
  - pattern-not-inside: $G[...] = ...
  - pattern-not-inside: $FUNC.__globals__[...] = ...
  message: |
    Found non static data as an index to 'globals()'. This is extremely
    dangerous because it allows an attacker to execute arbitrary code
    on the system. Refactor your code not to use 'globals()'.
  metadata:
    cwe: 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186
  severity: WARNING
  languages:
  - python
- id: meta.empty_message.empty-message
  message: |
    You have an empty message
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern: |
      message: ""
  severity: WARNING
- id: meta.no_language.no-language-field
  message: |
    Please include a language field for your rule!
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern: $RULE
  - pattern-not: |
      ...
      languages: ...
  severity: WARNING
- id: go.lang.security.audit.sqli.gosql-sqli.gosql-sqli
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $DB.$METHOD(..., $X + $Y, ...)
    - pattern: $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
  - pattern-either:
    - pattern-inside: |
        $DB, ... = sql.Open(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *sql.DB, ...) {
          ...
        }
  - pattern-not: $DB.$METHOD(..., "..." + "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|ExecContent|Query|QueryContext|QueryRow|QueryRowContext)$
  languages:
  - go
  message: |
    Detected string concatenation with a non-literal variable in a "database/sql"
    Go SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries or prepared statements instead.
    You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.
  metadata:
    references:
    - https://golang.org/pkg/database/sql/
  severity: WARNING
- id: ajinabraham.njsscan.good_anti_csrf.anti_csrf_control
  patterns:
  - pattern-inside: |
      $CSRUF = require('csurf')
      ...
  - pattern-either:
    - pattern: $X = csrf(...)
    - pattern: $X = csurf(...)
    - pattern: $APP.use(csrf(...))
    - pattern: $APP.use(csurf(...))
  message: This application has anti CSRF protection which prevents cross site request
    forgery attacks.
  languages:
  - javascript
  severity: INFO
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_check_csp
  message: 'Content Security Policy header is present. More Information: https://helmetjs.github.io/docs/csp/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {contentSecurityPolicy: false}, ...)
  - pattern-either:
    - pattern: |
        helmet({contentSecurityPolicy: {directives: ...}})
    - pattern: |
        helmet.contentSecurityPolicy({directives: ...})
    - pattern: |
        csp({directives: ...})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_check_crossdomain
  message: 'X-Permitted-Cross-Domain-Policies header set to off. More information:
    https://helmetjs.github.io/docs/crossdomain/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {permittedCrossDomainPolicies: false}, ...)
  - pattern-either:
    - pattern: |
        permittedCrossDomainPolicies()
    - pattern: |
        permittedCrossDomainPolicies({ permittedPolicies: ... })
    - pattern: |
        helmet.permittedCrossDomainPolicies({ permittedPolicies: ... })
    - pattern: |
        helmet({permittedCrossDomainPolicies: { permittedPolicies: ... }})
    - pattern: |
        helmet.permittedCrossDomainPolicies()
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_check_expect_ct
  message: 'Expect-CT header is present. More information: https://helmetjs.github.io/docs/expect-ct/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {expectCt: false}, ...)
  - pattern-either:
    - pattern: |
        expectCt({maxAge: ...,})
    - pattern: |
        helmet.expectCt({maxAge: ...,})
    - pattern: |
        expectCt({enforce: ...,})
    - pattern: |
        hemlet.expectCt({enforce: ...,})
    - pattern: |
        helmet({expectCt: { enforce: ... }})
- id: javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
  message: Detected a template variable used as the 'src' in a script tag. Although
    template variables are HTML escaped, HTML escaping does not always prevent malicious
    URLs from being injected and could results in a cross-site scripting (XSS) vulnerability.
    Prefer not to dynamically generate the 'src' attribute and use static URLs instead.
    If you must do this, carefully check URLs against an allowlist and be sure to
    URL-encode the result.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
  languages:
  - generic
  paths:
    include:
    - '*.ejs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...>
  - pattern-either:
    - pattern-inside: src = '...'
    - pattern-inside: src = "..."
  - pattern: <% ... >
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_feature_policy
  message: 'Feature-Policy header is present. More information: https://helmetjs.github.io/docs/feature-policy/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {featurePolicy: false}, ...)
  - pattern-either:
    - pattern: |
        featurePolicy(..., {features: ...}, ...)
    - pattern: |
        helmet.featurePolicy(..., {features: ...}, ...)
    - pattern: |
        helmet({featurePolicy: {features: ...}})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_frame_guard
  message: 'X-Frame-Options header is present. More information: https://helmetjs.github.io/docs/frameguard/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {frameguard: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(hemlet())
    - pattern: |
        helmet.frameguard(...)
    - pattern: |
        frameguard(...)
    - pattern: |
        helmet({frameguard: ...})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_dns_prefetch
  message: 'X-DNS-Prefetch-Control header is present and DNS Prefetch Control is enabled.
    More information: https://helmetjs.github.io/docs/dns-prefetch-control/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {dnsPrefetchControl: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.dnsPrefetchControl()
    - pattern: |
        dnsPrefetchControl()
    - pattern: |
        helmet.dnsPrefetchControl({ allow: false })
    - pattern: |
        helmet({dnsPrefetchControl: {allow: false}})
    - pattern: |
        dnsPrefetchControl({ allow: false })
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_x_powered_by
  message: 'Default X-Powered-By is removed or modified. More information: https://helmetjs.github.io/docs/hide-powered-by/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {hidePoweredBy: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        app.disable('x-powered-by')
    - pattern: |
        helmet.hidePoweredBy(...)
    - pattern: |
        hidePoweredBy(...)
    - pattern: |
        helmet({hidePoweredBy: ...})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_hsts
  message: 'HSTS header is present. More information: https://helmetjs.github.io/docs/hsts/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {hsts: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.hsts(...)
    - pattern: |
        hsts({ maxAge: ...})
    - pattern: |
        helmet({hsts: ...})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_ienoopen
  message: 'X-Download-Options header is present. More information: https://helmetjs.github.io/docs/ienoopen/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {ieNoOpen: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.ieNoOpen()
    - pattern: |
        ieNoOpen()
    - pattern: "helmet({ieNoOpen: ...})  \n"
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_nosniff
  message: 'Content-Type-Options header is present. More information: https://helmetjs.github.io/docs/dont-sniff-mimetype/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {noSniff: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.noSniff()
    - pattern: |
        noSniff()
    - pattern: |
        helmet({noSniff: ...})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_referrer_policy
  message: 'Referrer-Policy header is present. More information: https://helmetjs.github.io/docs/referrer-policy/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {referrerPolicy: false}, ...)
  - pattern-either:
    - pattern: |
        helmet.referrerPolicy(...)
    - pattern: |
        referrerPolicy(...)
    - pattern: |
        helmet({referrerPolicy: ...})
- id: ajinabraham.njsscan.good_helmet_checks.helmet_header_xss_filter
  message: 'X-XSS-Protection header is present. More information: https://helmetjs.github.io/docs/xss-filter/'
  languages:
  - javascript
  severity: INFO
  patterns:
  - pattern-not: |
      $HELMET(..., {xssFilter: false}, ...)
  - pattern-either:
    - pattern: |
        $APP.use(helmet())
    - pattern: |
        helmet.xssFilter(...)
    - pattern: |
        xssFilter(...)
    - pattern: |
        helmet({xssFilter: ...})
- id: ajinabraham.njsscan.good_ratelimiting.rate_limit_control
  patterns:
  - pattern-either:
    - pattern: require("express-rate-limit")
    - pattern: require("express-limiter")
    - pattern: require("@authentication/rate-limit")
  message: This application has API rate limiting controls.
  languages:
  - javascript
  severity: INFO
- id: meta.no_message.no-message
  message: |
    Include a message to explain what the rule does
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern: $RULE
  - pattern-not: |
      ...
      message: ...
  severity: WARNING
- id: javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
  message: |
    Make sure that unverified user data can not reach vm.runInContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern: $VM.runInContext($CODE,...)
  - pattern-not: $VM.runInContext("...",...)
  - pattern-not-inside: |
      $CODE = "...";
      ...
- id: javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
  message: |
    Make sure that unverified user data can not reach vm.runInNewContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern: $VM.runInNewContext($CODE,...)
  - pattern-not: $VM.runInNewContext("...",...)
  - pattern-not-inside: |
      $CODE = "...";
      ...
- id: ruby.lang.security.timing-attack.timing-attack
  message: |
    Checks for unsafe use of method http_basic_authenticate_with, which is vulnerable to timing attacks as it
    does not use constant-time checking when comparing passwords. Affected Rails versions include:
    5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1. Avoid this function if possible.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_basic_auth_timing_attack.rb
    - https://groups.google.com/g/rubyonrails-security/c/ANv0HDHEC3k/m/mt7wNGxbFQAJ
  languages:
  - ruby
  severity: ERROR
  pattern: http_basic_authenticate_with ...
- id: ruby.lang.security.nested-attributes.nested-attributes
  message: |
    Checks for models that enable nested attributes. A vulnerability in nested_attributes_for results in an attacker
    begin able to change parameters apart from the ones intended by the developer. Affected Ruby verions: 3.0.0, 2.3.9.
    Fix: don't use accepts_nested_attributes_for or upgrade Ruby version.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_nested_attributes.rb
    - https://groups.google.com/g/rubyonrails-security/c/-fkT0yja_gw/discussion
  languages:
  - ruby
  severity: WARNING
  pattern: accepts_nested_attributes_for
- id: ruby.lang.security.file-disclosure.file-disclosure
  message: |
    Special requests can determine whether a file exists on a filesystem that's outside the Ruby app's
    root directory. To fix this, set config.serve_static_assets = false.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb
    - https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ
  languages:
  - ruby
  severity: ERROR
  pattern: config.serve_static_assets = true
- id: ruby.lang.security.model-attributes-attr-protected.model-attributes-attr-protected
  message: |
    Checks for models that use attr_protected, as use of allowlist instead of denylist is better practice.
    Attr_protected was also found to be vulnerable to bypass. The fixed versions of Ruby are: 3.2.12, 3.1.11, 2.3.17.
    To prevent bypass, use attr_accessible instead.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attributes.rb
    - https://groups.google.com/g/rubyonrails-security/c/AFBKNY7VSH8/discussion
  languages:
  - ruby
  severity: WARNING
  pattern: attr_protected
- id: javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
  message: |
    Avoiding SQL string concatenation: untrusted input concatinated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://sequelize.org/master/manual/raw-queries.html
  severity: WARNING
  languages:
  - javascript
  pattern-either:
  - pattern: |
      $DATABASE.sequelize.query(`...${...}...`, ...)
  - pattern: |
      $QUERY = `...${...}...`
      ...
      $DATABASE.sequelize.query($QUERY, ...)
  - pattern: |
      $DATABASE.sequelize.query($SQL + $VALUE, ...)
  - pattern: |
      $QUERY = $SQL + $VALUE
      ...
      $DATABASE.sequelize.query($QUERY, ...)
- id: yaml.docker-compose.security.no-new-privileges.no-new-privileges
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
  - pattern-not: |
      $SERVICE:
        ...
        image: ...
        ...
        security_opt:
          - ...
          - no-new-privileges:true
  message: |
    Service '$SERVICE' allows for privilege escalation via setuid or setgid
    binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
  metadata:
    references:
    - https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/
    - https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag
  languages:
  - yaml
  severity: WARNING
- id: yaml.docker-compose.security.seccomp-confinement-disabled.seccomp-confinement-disabled
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
        ...
        security_opt:
          - ...
          - seccomp:unconfined
  message: |
    Service '$SERVICE' is explicitly disabling seccomp confinement. This runs
    the service in an unrestricted state. Remove 'seccomp:unconfined' to prevent this.
  metadata:
    references:
    - https://docs.docker.com/engine/security/seccomp/
  languages:
  - yaml
  severity: WARNING
- id: yaml.docker-compose.security.selinux-separation-disabled.selinux-separation-disabled
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
        ...
        security_opt:
          - ...
          - label:disable
  message: |
    Service '$SERVICE' is explicitly disabling SELinux separation. This runs the
    service as an unconfined type. Remove 'label:disable' to prevent this.
  metadata:
    references:
    - https://www.projectatomic.io/blog/2016/03/dwalsh_selinux_containers/
    - https://docs.docker.com/engine/reference/run/#security-configuration
  languages:
  - yaml
  severity: WARNING
- id: yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
        ...
  - pattern-not: |
      $SERVICE:
        ...
        image: ...
        ...
        read_only: true
  message: |
    Service '$SERVICE' is running with a writable root filesystem. This may
    allow malicious applications to download and run additional payloads, or
    modify container files. If an application inside a container has to save
    something temporarily consider using a tmpfs. Add 'read_only: true' to this
    service to prevent this.
  metadata:
    references:
    - https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir
    - https://blog.atomist.com/security-of-docker-kubernetes/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only
  languages:
  - yaml
  severity: WARNING
- id: kotlin.lang.security.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
  message: |
    A formatted or concatenated string was detected as input to a java.lang.Runtime call.
    This is dangerous if a variable is controlled by user input and could result in a
    command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.
  severity: WARNING
  languages:
  - kt
  pattern-either:
  - pattern: $RUNTIME.exec($X + $Y)
  - pattern: $RUNTIME.exec(String.format(...))
  - pattern: $RUNTIME.loadLibrary($X + $Y)
  - pattern: $RUNTIME.loadLibrary(String.format(...))
- id: meta.identical_id.identical-id
  message: |
    you use multiple times the same id
  severity: ERROR
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern-inside: |
      - id: $X
        ...
      ...
      - id: $X
        ...
  - pattern: |
      id: $X
- id: meta.identical_pattern.identical-pattern
  message: |
    you use multiple times the same pattern
  severity: ERROR
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern-inside: |
      ...
      - pattern: $X
      ...
      - pattern: $X
      ...
  - pattern: |
      pattern: $X
- id: meta.unsatisfiable.unsatisfiable-rule
  message: |
    You can not use $A and not $A together; this will always be empty
  severity: ERROR
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern-inside: |
      ...
      - pattern: $A
      ...
  - pattern: |
      pattern-not: $A
- id: ocaml.lang.correctness.useless_let.useless-let
  pattern: let $X = $E in $X
  message: Useless let
  languages:
  - ocaml
  severity: ERROR
- id: java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
  message: |
    Using CBC with PKCS5Padding is susceptible to padding orcale attacks. A malicious actor
    could discern the difference between plaintext with valid or invalid padding. Further,
    CBC mode does not include any integrity checks. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
    Use 'AES/GCM/NoPadding' instead.
  metadata:
    cwe: 'CWE-696: Incorrect Behavior Order'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE
    references:
    - https://capec.mitre.org/data/definitions/463.html
  severity: WARNING
  fix: $CIPHER.getInstance("AES/GCM/NoPadding");
  languages:
  - java
  pattern: $CIPHER.getInstance("=~/.*\/CBC\/PKCS5Padding/");
- id: python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli
  languages:
  - python
  message: |
    Detected string concatenation with a non-literal variable in a asyncpg
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries or prepared statements instead.
    You can create parameterized queries like so:
    'conn.fetch("SELECT $1 FROM table", value)'.
    You can also create prepared statements with 'Connection.prepare':
    'stmt = conn.prepare("SELECT $1 FROM table")
     await stmt.fetch(user_value)'
  metadata:
    references:
    - https://github.com/MagicStack/asyncpg
    - https://magicstack.github.io/asyncpg/current/
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $CONN.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CONN.$METHOD(..., $X + $Y, ...)
    - pattern: $CONN.$METHOD(..., '...'.format(...), ...)
    - pattern: $CONN.$METHOD(..., '...' % (...), ...)
    - pattern: $CONN.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = await asyncpg.connect(...)
        ...
    - pattern-inside: |
        async with asyncpg.create_pool(...) as $CONN:
            ...
    - pattern-inside: |
        async with $POOL.acquire(...) as $CONN:
            ...
    - pattern-inside: |
        $CONN = await $POOL.acquire(...)
        ...
    - pattern-inside: |
        def $FUNCNAME(..., $CONN: Connection, ...):
            ...
  - pattern-not: $CONN.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CONN.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CONN.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(fetch|fetchrow|fetchval|execute|executemany|prepare|cursor|copyfromquery)$
  severity: WARNING
- id: python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
  languages:
  - python
  message: |
    Detected string concatenation with a non-literal variable in a psycopg2
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries or prepared statements instead.
    You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example:
    'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'
  metadata:
    references:
    - https://www.psycopg.org/docs/sql.html
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $CUR.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CUR.$METHOD(..., $X + $Y, ...)
    - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
    - pattern: $CUR.$METHOD(..., '...' % (...), ...)
    - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = psycopg2.connect(...)
        ...
        $CUR = $CONN.cursor(...)
        ...
    - pattern-inside: |
        $CONN = psycopg2.connect(...)
        ...
        with $CONN.cursor(...) as $CUR:
          ...
  - pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CUR.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(execute|executemany|mogrify)$
  severity: WARNING
- id: python.lang.security.use-defused-xml.use-defused-xml
  fix-regex:
    regex: xml
    replacement: defusedxml
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    references:
    - https://docs.python.org/3/library/xml.html
    - https://github.com/tiran/defusedxml
  message: |
    Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)
    attacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.
    See https://github.com/tiran/defusedxml for more information.
  languages:
  - python
  severity: ERROR
  pattern: import xml
- id: python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument
  message: |
    Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if
    a real password is not supplied.
  languages:
  - python
  severity: WARNING
  pattern: |
    def $FUNC(..., password="...", ...):
      ...
- id: python.django.performance.access-foreign-keys.access-foreign-keys
  pattern: $X.user.id
  message: You should use ITEM.user_id rather than ITEM.user.id to prevent running
    an extra query.
  languages:
  - python
  severity: WARNING
- id: ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $CON.$METHOD($QUERY)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY.concat(..., $X, ...)
            ...
        - pattern-inside: |
            $QUERY << $X
            ...
      - pattern-not-inside: |
          $QUERY << '...'
          ...
      - pattern-not-inside: |
          $QUERY.concat("...")
          ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $CON.$METHOD(..., $X + $Y, ...)
    - pattern: $CON.$METHOD(..., $X.concat($Y), ...)
    - pattern: $CON.$METHOD(..., $X << $Y, ...)
  - pattern-either:
    - pattern-inside: |
        $CON = PG.connect(...)
        ...
    - pattern-inside: |
        $CON = PG::Connection.open(...)
        ...
    - pattern-inside: |
        $CON = PG::Connection.new(...)
        ...
  - pattern-not: $CON.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CON.$METHOD(..., "...".concat("..."), ...)
  - pattern-not: $CON.$METHOD(..., "..." << "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(exec|exec_params|exec_prepared)$
  languages:
  - ruby
  message: |
    Detected string concatenation with a non-literal variable in a pg
    Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries or prepared statements instead.
    You can use parameterized queries like so:
        `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`
    And you can use prepared statements with `exec_prepared`.
  metadata:
    references:
    - https://www.rubydoc.info/gems/pg/PG/Connection
  severity: WARNING
- id: go.lang.security.audit.sqli.pgx-sqli.pgx-sqli
  languages:
  - go
  message: |
    Detected string concatenation with a non-literal variable in a pgx
    Go SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries instead. You can use parameterized queries like so:
    (`SELECT $1 FROM table`, `data1)
  metadata:
    references:
    - https://github.com/jackc/pgx
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $DB.$METHOD(..., $X + $Y, ...)
    - pattern: $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
  - pattern-either:
    - pattern-inside: |
        $DB, ... = pgx.Connect(...)
        ...
    - pattern-inside: |
        $DB, ... = pgx.NewConnPool(...)
        ...
    - pattern-inside: |
        $DB, ... = pgx.ConnectConfig(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *pgx.Conn, ...) {
          ...
        }
  - pattern-not: $DB.$METHOD(..., "..." + "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|ExecEx|Query|QueryEx|QueryRow|QueryRowEx)$
  severity: WARNING
- id: python.lang.security.audit.sqli.pg8000-sqli.pg8000-sqli
  languages:
  - python
  message: |
    Detected string concatenation with a non-literal variable in a pg8000
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries or prepared statements instead.
    You can create parameterized queries like so:
    'conn.run("SELECT :value FROM table", value=myvalue)'.
    You can also create prepared statements with 'conn.prepare':
    'conn.prepare("SELECT (:v) FROM table")'
  metadata:
    references:
    - https://github.com/tlocke/pg8000
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $CONN.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CONN.$METHOD(..., $X + $Y, ...)
    - pattern: $CONN.$METHOD(..., '...'.format(...), ...)
    - pattern: $CONN.$METHOD(..., '...' % (...), ...)
    - pattern: $CONN.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = pg8000.native.Connection(...)
        ...
    - pattern-inside: |
        $CONN = pg8000.dhapi.connect(...)
        ...
    - pattern-inside: |
        $CONN1 = pg8000.connect(...)
        ...
        $CONN = $CONN1.cursor(...)
        ...
    - pattern-inside: |
        $CONN = pg8000.connect(...)
        ...
  - pattern-not: $CONN.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CONN.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CONN.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(run|execute|executemany|prepare)$
  severity: WARNING
- id: python.lang.security.audit.sqli.aiopg-sqli.aiopg-sqli
  languages:
  - python
  message: |
    Detected string concatenation with a non-literal variable in an aiopg
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    use parameterized queries instead.
    You can create parameterized queries like so:
    'cur.execute("SELECT %s FROM table", (user_value,))'.
  metadata:
    references:
    - https://github.com/aio-libs/aiopg
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $CUR.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CUR.$METHOD(..., $X + $Y, ...)
    - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
    - pattern: $CUR.$METHOD(..., '...' % (...), ...)
    - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = await aiopg.connect(...)
        ...
        $CUR = await $CONN.cursor(...)
        ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        async with $POOL.acquire(...) as $CONN:
          ...
          async with $CONN.cursor(...) as $CUR:
            ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        with (await $POOL.cursor(...)) as $CUR:
          ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        async with $POOL as $CONN:
          ...
          $CUR = await $CONN.cursor(...)
          ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        async with $POOL.cursor(...) as $CUR:
          ...
  - pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CUR.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(execute)$
  severity: WARNING
- id: dgryski.semgrep-go.unixnano.not-after
  patterns:
  - pattern: $T1.UnixNano() <= $T2.UnixNano()
  message: |
    unless checking for wall clock inconsistencies, use !$T1.After($T2)
  languages:
  - go
  severity: ERROR
- id: generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key
  pattern-regex: da2-[a-z0-9]{26}
  languages:
  - regex
  message: AWS AppSync GraphQL Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: dgryski.semgrep-go.unixnano.not-before
  patterns:
  - pattern: $T1.UnixNano() >= $T2.UnixNano()
  message: |
    unless checking for wall clock inconsistencies, use !$T1.Before($T2)
  languages:
  - go
  severity: ERROR
- id: python.lang.correctness.return-in-init.return-in-init
  patterns:
  - pattern-inside: |
      class $A(...):
          ...
  - pattern-inside: |
      def __init__(...):
          ...
  - patterns:
    - pattern: return ...
    - pattern-not: return
    - pattern-not: return None
  message: '`return` should never appear inside a class __init__ function. This will
    cause a runtime error.'
  languages:
  - python
  severity: ERROR
- id: python.lang.correctness.return-in-init.yield-in-init
  patterns:
  - pattern-inside: |
      class $A(...):
          ...
  - pattern-inside: |
      def __init__(...):
          ...
  - pattern-either:
    - pattern: yield ...
    - pattern: yield
  message: '`yield` should never appear inside a class __init__ function. This will
    cause a runtime error.'
  languages:
  - python
  severity: ERROR
- id: javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
  message: |
    Detected non-literal calls to $EXEC(). This could lead to a command
    injection vulnerability.
  patterns:
  - pattern-either:
    - pattern: spawn(...)
    - pattern: spawnSync(...)
    - pattern: $CP.spawn(...)
    - pattern: $CP.spawnSync(...)
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", $ARG, ...],...)
        - patterns:
          - pattern: $EXEC($CMD,["-c", $ARG, ...],...)
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
              ...
      - pattern-not: |
          $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", "...", ...],...)
    - patterns:
      - pattern-either:
        - pattern: |
            $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",[$ARG, ...],...)
        - patterns:
          - pattern: $EXEC($CMD,[$ARG, ...],...)
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
              ...
      - pattern-not: |
          $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["...", ...],...)
  - pattern-not-inside: |
      $ARG = "..."
      ...
  - pattern-either:
    - pattern-inside: |
        require('child_process')
        ...
    - pattern-inside: |
        import 'child_process'
        ...
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: python.lang.compatibility.python37.python37-compatibility-httpsconn
  pattern: http.client.HTTPSConnection(blocksize=$X,...)
  message: HTTPSConnection blocksize keyword argument is Python 3.7+ only
  languages:
  - python
  severity: ERROR
- id: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.DES.new(...)
    - pattern: Crypto.Cipher.DES.new(...)
  message: |
    Detected DES cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://tools.ietf.org/html/rfc5469
  severity: WARNING
  languages:
  - python
- id: java.jboss.security.seam-log-injection.seam-log-injection
  patterns:
  - pattern: |
      $LOG.$INFO($X + $Y,...)
  - pattern-either:
    - pattern-inside: |
        import org.jboss.seam.log.Log;
        ...
    - pattern-inside: |
        org.jboss.seam.log.Log $LOG = ...;
        ...
  - metavariable-regex:
      metavariable: $INFO
      regex: (debug|error|fatal|info|trace|warn)
  languages:
  - java
  message: |
    Seam Logging API support an expression language to introduce bean property to log messages.
    The expression language can also be the source to unwanted code execution.
    In this context, an expression is built with a dynamic value.
    The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SEAM_LOG_INJECTION
  severity: ERROR
- id: ajinabraham.njsscan.xss_serialize_js.xss_serialize_javascript
  patterns:
  - pattern-inside: |
      $S = require('serialize-javascript')
      ...
  - pattern-not-inside: escape(...)
  - pattern-not-inside: encodeURI(...)
  - pattern: |
      $S(..., {unsafe: true})
  message: Untrusted user input reaching `serialize-javascript` with `unsafe` attribute
    can cause Cross Site Scripting (XSS).
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page'
- id: go.lang.security.zip.path-traversal-inside-zip-extraction
  message: File traversal when extracting zip archive
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    source_rule_url: https://github.com/securego/gosec/issues/205
  languages:
  - go
  severity: WARNING
  pattern: |
    reader, $ERR := zip.OpenReader($ARCHIVE)
    ...
    for _, $FILE := range reader.File {
      ...
      path := filepath.Join($TARGET, $FILE.Name)
      ...
    }
- id: go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure
  message: |
    SSLv3 is insecure because it has known vulnerabilities.
    Starting with go1.14, SSLv3 will be removed. Instead, use
    'tls.VersionTLS13'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls_config.go
    references:
    - https://golang.org/doc/go1.14#crypto/tls
    - https://www.us-cert.gov/ncas/alerts/TA14-290A
  languages:
  - go
  severity: ERROR
  fix-regex:
    regex: VersionSSL30
    replacement: VersionTLS13
  pattern: 'tls.Config{..., MinVersion: $TLS.VersionSSL30, ...}'
- id: javascript.lang.correctness.no-replaceall.no-replaceall
  message: |
    The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, "good") instead of mystring.replaceAll("bad", "good") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)
  severity: WARNING
  languages:
  - javascript
  - typescript
  pattern: $STRING.replaceAll("...",$NEW)
- id: generic.dockerfile.best-practice.avoid-yum-update.avoid-yum-update
  severity: INFO
  languages:
  - generic
  message: |
    Packages in base images should be up-to-date, removing the need for
    'yum update'. If packages are out-of-date, consider contacting the
    base image maintainer.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3031
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3031
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern: yum update
- id: ruby.lang.security.dangerous-subshell.dangerous-subshell
  patterns:
  - pattern-either:
    - pattern: |
        `...#{$VAL}...`
  - pattern-not: |
      `...#{"..."}...`
  - pattern-not-inside: |
      $VAL = "..."
      ...
  message: |
    Detected non-static command inside `...`.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - ruby
- id: generic.dockerfile.best-practice.avoid-zypper-update.avoid-zypper-update
  severity: INFO
  languages:
  - generic
  message: |
    Packages in base images should be up-to-date, removing the need for
    'zypper update'. If packages are out-of-date, consider contacting the
    base image maintainer.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3035
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3035
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern: zypper update
- id: dgryski.semgrep-go.marshaljson.marshal-json-pointer-receiver
  patterns:
  - pattern-either:
    - pattern: func ($T *$TYPE) MarshalJSON() ($DATA []byte, $ERR error)
    - pattern: func ($T *$TYPE) MarshalJSON() ([]byte, error)
  message: 'MarshalJSON with a pointer receiver has surprising results: https://github.com/golang/go/issues/22967'
  languages:
  - go
  severity: ERROR
- id: generic.dockerfile.security.missing-user.missing-user
  patterns:
  - pattern-either:
    - pattern: CMD ...
    - pattern: ENTRYPOINT ...
  - pattern-not-inside: |
      USER $USER
      ...
      ...
  message: By not specifying a USER, a programs in the container may run as 'root'.
    This is a security hazard. If an attacker can control a process running as root,
    they may have control over the container. Ensure that the last USER in a Dockerfile
    is a USER other than 'root'.
  severity: ERROR
  languages:
  - generic
  paths:
    include:
    - '*Dockerfile*'
    - '*dockerfile*'
- id: kotlin.lang.security.cookie-missing-secure-flag.cookie-missing-secure-flag
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
  message: |
    A cookie was detected without setting the 'secure' flag. The 'secure' flag
    for cookies prevents the client from transmitting the cookie over insecure
    channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
  severity: WARNING
  languages:
  - kt
  patterns:
  - pattern-not-inside: |
      $COOKIE.setValue("")
      ...
  - pattern-either:
    - pattern: $COOKIE.setSecure(false)
    - patterns:
      - pattern-not-inside: |
          $COOKIE.setSecure(...)
          ...
      - pattern: $RESPONSE.addCookie($COOKIE)
- id: generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
  patterns:
  - pattern-either:
    - pattern: |
        proxy_http_version 1.1 ...;
        ...
        proxy_set_header Upgrade ...;
        ...
        proxy_set_header Connection ...;
    - pattern: |
        proxy_set_header Upgrade ...;
        ...
        proxy_set_header Connection ...;
        ...
        proxy_http_version 1.1 ...;
    - pattern: |
        proxy_set_header Upgrade ...;
        ...
        proxy_http_version 1.1 ...;
        ...
        proxy_set_header Connection ...;
  - pattern-inside: |
      location ... {
        ...
      }
  languages:
  - generic
  severity: WARNING
  message: 'Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading
    HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which
    can allow a bypass of reverse proxy access controls,and lead to long-lived, unrestricted
    HTTP traffic directly to back-end servers. To mitigate: WebSocket support required:
    Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket).
    WebSocket support not required: Do not forward Upgrade headers.'
  metadata:
    references:
    - https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c
- id: java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
  pattern: management.endpoints.web.exposure.include=*
  message: |
    Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others.
    Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk.
  severity: WARNING
  languages:
  - generic
  paths:
    include:
    - '*properties'
  metadata:
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints
    - https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785
- id: kotlin.lang.security.cookie-missing-httponly.cookie-missing-httponly
  metadata:
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
  message: |
    A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag
    for cookies instructs the browser to forbid client-side scripts from reading the
    cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
  severity: WARNING
  languages:
  - kt
  patterns:
  - pattern-not-inside: |
      $COOKIE.setValue("")
      ...
  - pattern-either:
    - pattern: $COOKIE.setHttpOnly(false)
    - patterns:
      - pattern-not-inside: |
          $COOKIE.setHttpOnly(...)
          ...
      - pattern: $RESPONSE.addCookie($COOKIE)
- id: go.lang.security.audit.database.string-formatted-query.string-formatted-query
  languages:
  - go
  message: |
    String-formatted SQL query detected. This could lead to SQL injection if
    the string is not sanitized properly. Audit this call to ensure the
    SQL is not manipulatable by external data.
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    source-rule-url: https://github.com/securego/gosec
  patterns:
  - pattern-not-inside: |
      $VAR = "..." + "..."
      ...
      $OBJ.$SINK(..., $VAR, ...)
  - pattern-either:
    - pattern: $OBJ.Exec("..." + $X)
    - pattern: $OBJ.ExecContext($CTX, "..." + $X)
    - pattern: $OBJ.Query("..." + $X)
    - pattern: $OBJ.QueryContext($CTX, "..." + $X)
    - pattern: $OBJ.QueryRow("..." + $X)
    - pattern: $OBJ.QueryRow($CTX, "..." + $X)
    - pattern: $OBJ.QueryRowContext($CTX, "..." + $X)
    - pattern: $OBJ.Exec(fmt.$P("...", ...))
    - pattern: $OBJ.ExecContext($CTX, fmt.$P("...", ...))
    - pattern: $OBJ.Query(fmt.$P("...", ...))
    - pattern: $OBJ.QueryContext($CTX, fmt.$P("...", ...))
    - pattern: $OBJ.QueryRow(fmt.$P("...", ...))
    - pattern: $OBJ.QueryRow($CTX, fmt.$P("...", ...))
    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P("...", ...))
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Exec($QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Query($QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.ExecContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($QUERY)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($CTX, $QUERY)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRowContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Exec($OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Query($OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.ExecContext($CTX, $OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryContext($CTX, $OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($OTHER)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($CTX, $OTHER)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRowContext($CTX, $OTHER, ...)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.Exec($QUERY, ...)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.Query($QUERY, ...)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.ExecContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.QueryContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.QueryRow($QUERY)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.QueryRow($CTX, $QUERY)
    - pattern: |
        $QUERY = "..." + $X
        ...
        $OBJ.QueryRowContext($CTX, $QUERY, ...)
- id: javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect
  patterns:
  - pattern-either:
    - pattern-inside: |
        $UNK = query.$B;
        ...
    - pattern-inside: |
        $UNK = $A.query.$B;
        ...
    - pattern-inside: |
        $UNK = req.$SOMETHING;
        ...
  - pattern: $RES.redirect(..., <... $UNK ...>, ...)
  message: |
    It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure
    '$UNK' is not externally controlled, otherwise this is an open redirect.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      version: '4'
  severity: WARNING
  languages:
  - javascript
- id: python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host
  message: Running flask app with host 0.0.0.0 could expose the server publicly.
  metadata:
    cwe: 'CWE-668: Exposure of Resource to Wrong Sphere'
    owasp: 'A6: Security Misconfiguration'
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: app.run(..., host="0.0.0.0", ...)
  - pattern: app.run(..., "0.0.0.0", ...)
- id: javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
  message: |
    The object is passed strictly to jsonwebtoken.sign(...)
    Make sure that sensitive information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      $JWT = require('jsonwebtoken');
      ...
  - pattern-either:
    - pattern-inside: function (...,$INPUT,...) {...}
    - pattern-inside: function $F(...,$INPUT,...) {...}
  - pattern: $JWT.sign($INPUT,...)
- id: java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
  severity: ERROR
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf
  message: |
    XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity
    attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities" to false.
  pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
    true);
  languages:
  - java
- id: java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
  severity: WARNING
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser
  message: |
    XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity
    vulnerabilities. Explicitly disable external entities by setting "javax.xml.stream.isSupportingExternalEntities" to false.
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        ...
      }
  - pattern-either:
    - pattern: $XMLFACTORY = $W.newFactory(...);
    - pattern: $XMLFACTORY = new XMLInputFactory(...);
  languages:
  - java
- id: java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled
  message: |
    CSRF is disabled for this configuration. This is a security risk.
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_PROTECTION_DISABLED
    asvs:
      section: V4 Access Control
      control_id: 4.2.2 CSRF
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control
      version: '4'
  severity: WARNING
  languages:
  - java
  pattern: $OBJ.csrf(...).disable(...)
- id: generic.dockerfile.best-practice.avoid-dnf-update.avoid-dnf-update
  severity: INFO
  languages:
  - generic
  message: |
    Packages in base images should be up-to-date, removing the need for
    'dnf update'. If packages are out-of-date, consider contacting the
    base image maintainer.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3039
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3039
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern: dnf update
- id: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.XOR.new(...)
    - pattern: Crypto.Cipher.XOR.new(...)
  message: |
    Detected XOR cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption
  severity: WARNING
  languages:
  - python
- id: javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
  message: |
    Make sure that unverified user data can not reach the XML Parser,
    as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('xml2json');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $EXPAT.toJson(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $EXPAT.toJson(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $EXPAT.toJson(<... $INPUT ...>,...);
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $EXPAT.toJson(<... $INPUT ...>,...);
- id: javascript.express.security.express-expat-xxe.express-expat-xxe
  message: |
    Make sure that unverified user data can not reach the XML Parser,
    as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('node-expat');
      ...
  - pattern-inside: |
      ...
      require('express');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern-inside: |
        ...
        $PARSER = new $EXPAT.Parser(...);
        ...
    - pattern-inside: |
        ...
        $PARSER = new Parser(...);
        ...
  - pattern-either:
    - pattern: $PARSER.parse(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PARSER.parse(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PARSER.parse(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PARSER.parse(<... $INPUT ...>,...);
    - pattern: $PARSER.write(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PARSER.write(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PARSER.write(<... $INPUT ...>,...);
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PARSER.write(<... $INPUT ...>,...);
- id: javascript.angular.security.detect-angular-open-redirect.detect-angular-open-redirect
  message: |
    Use of $window.location.href can lead to open-redirect if user input is used for redirection.
  languages:
  - javascript
  metadata:
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      version: '4'
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
  severity: ERROR
  pattern-either:
  - pattern: |
      $SOURCE = $INPUT;
      $window.location.href = $SOURCE + $STATICVALUE;
  - pattern: |
      $window.location.href = $SOURCE + $STATICVALUE;
- id: javascript.browser.security.open-redirect.js-open-redirect
  message: |
    Possible open redirect
  metadata:
    cwe: 'CWE-601: URL Redirection to Untrusted Site (Open Redirect)'
    owasp: 'A1: Injection'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      version: '4'
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        window.location.replace($URL)
    - pattern: |
        location.replace($URL)
    - pattern: |
        window.location.href = $URL
    - pattern: |
        location.href = $URL
  - pattern-not: |
      window.location.href = "..."
  - pattern-not: |
      location.href = "..."
  - pattern-not: |
      location.replace("...")
  - pattern-not: window.location.replace("...")
- id: javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
  message: |
    Detected the decoding of a JWT token without a verify step.
    JWT tokens must be verified before use, otherwise the token's
    integrity is unknown. This means a malicious actor could forge
    a JWT token with any claims. Call '.verify()' before using the token.
  metadata:
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        $JWT.decode(...);
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        return $JWT.decode(...);
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        if(<... $JWT.decode(...) ...>) {
            ...
        }
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        return {$P: $JWT.decode(...)};
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        $X = {$P: $JWT.decode(...)};
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        $FUNC({$P: $JWT.decode(...)});
    - pattern: |
        var $JWT = require('jsonwebtoken');
        ...
        return $FUNC({$P: $JWT.decode(...)});
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      $JWT.verify(...);
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      return $JWT.verify(...);
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      if(<... $JWT.verify(...) ...>) {
          ...
      }
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      return {$P: $JWT.verify(...)};
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      $X = {$P: $JWT.verify(...)};
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      $FUNC({$P: $JWT.verify(...)});
  - pattern-not-inside: |
      var $JWT = require('jsonwebtoken');
      ...
      return $FUNC({$P: $JWT.verify(...)});
- id: typescript.react.security.audit.react-http-leak.react-http-leak
  pattern-either:
  - patterns:
    - pattern: |
        <$EL codebase=... />
    - metavariable-regex:
        metavariable: $EL
        regex: applet|object
    - pattern-not: |
        <$EL codebase="..." />
  - patterns:
    - pattern: |
        <$EL cite=... />
    - metavariable-regex:
        metavariable: $EL
        regex: blockquote|del|ins|q
    - pattern-not: |
        <$EL cite="..." />
  - patterns:
    - pattern: |
        <$EL longdesc=... />
    - metavariable-regex:
        metavariable: $EL
        regex: frame|iframe|img
    - pattern-not: |
        <$EL longdesc="..." />
  - patterns:
    - pattern: |
        <$EL src={$INJECT} />
    - metavariable-regex:
        metavariable: $EL
        regex: frame|iframe|img|input|script|audio|source|track|embed|video
    - pattern-not: |
        <$EL src="..." />
    - pattern-not-inside: |
        import $INJECT from "...";
        ...
  - patterns:
    - pattern: |
        <$EL usemap=... />
    - metavariable-regex:
        metavariable: $EL
        regex: img|input|object
    - pattern-not: |
        <$EL usemap="..." />
  - patterns:
    - pattern: |
        <$EL formaction=... />
    - metavariable-regex:
        metavariable: $EL
        regex: button|input
    - pattern-not: |
        <$EL formaction="..." />
  - patterns:
    - pattern: |
        <$EL srcset=... />
    - metavariable-regex:
        metavariable: $EL
        regex: img|source
    - pattern-not: |
        <$EL srcset="..." />
  - patterns:
    - pattern: |
        <$EL archive=... />
    - metavariable-regex:
        metavariable: $EL
        regex: object|applet
    - pattern-not: |
        <$EL archive="..." />
  - patterns:
    - pattern: |
        <body background=... />
    - pattern-not: |
        <body background="..." />
  - patterns:
    - pattern: |
        <form action=... />
    - pattern-not: |
        <form action="..." />
  - patterns:
    - pattern: |
        <head profile=... />
    - pattern-not: |
        <head profile="..." />
  - patterns:
    - pattern: |
        <object $ATTR=... />
    - metavariable-regex:
        metavariable: $ATTR
        regex: classid|data
    - pattern-not: |
        <object $ATTR="..." />
  - patterns:
    - pattern: |
        <video poster=... />
    - pattern-not: |
        <video poster="..." />
  - patterns:
    - pattern: |
        <command icon=... />
    - pattern-not: |
        <command icon="..." />
  - patterns:
    - pattern: |
        <html manifest=... />
    - pattern-not: |
        <html manifest="..." />
  - patterns:
    - pattern: |
        <meta content=... />
    - pattern-not: |
        <meta content="..." />
  message: This HTML element '$EL' and attribute '$ATTR' together may load an external
    resource. This means that if dynamic content can enter this attribute it may be
    possible for an attacker to send HTTP requests to unintended locations which may
    leak data about your users. If this element is reaching out to a known host, consider
    hardcoding the host (or loading from a configuration) and appending the dynamic
    path. See https://github.com/cure53/HTTPLeaks for more information.
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    references:
    - https://github.com/cure53/HTTPLeaks
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
  message: |
    Avoiding SQL string concatenation: untrusted input concatinated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complexe SQL composition, use SQL Expression Langague or SQL Statements and Expressions API.
  metadata:
    cwe: |
      CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
    owasp: 'A1: Injection'
    references:
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column
  severity: ERROR
  languages:
  - python
  pattern-either:
  - pattern: |
      $CONNECTION.execute( $SQL + ... )
  - pattern: |
      $CONNECTION.execute( $SQL % (...) )
  - pattern: |
      $CONNECTION.execute( $SQL.format(...) )
  - pattern: |
      $CONNECTION.execute(f"...{...}...")
  - pattern: |
      $QUERY = $SQL + ...
      ...
      $CONNECTION.execute($QUERY)
  - pattern: |
      $QUERY = $SQL % (...)
      ...
      $CONNECTION.execute($QUERY)
  - pattern: |
      $QUERY = $SQL.format(...)
      ...
      $CONNECTION.execute($QUERY)
  - pattern: |
      $QUERY = f"...{...}..."
      ...
      $CONNECTION.execute($QUERY)
- id: go.template.security.insecure-types.go-insecure-templates
  patterns:
  - pattern-inside: |
      import "html/template"
      ...
  - pattern-either:
    - pattern: var $VAR template.HTML = $EXP
    - pattern: var $VAR template.CSS = $EXP
    - pattern: var $VAR template.HTMLAttr = $EXP
    - pattern: var $VAR template.JS = $EXP
    - pattern: var $VAR template.JSStr = $EXP
    - pattern: var $VAR template.Srcset = $EXP
  message: |
    usage of insecure template types. They are documented as a security risk. See https://golang.org/pkg/html/template/#HTML.
  severity: WARNING
  metadata:
    references:
    - https://golang.org/pkg/html/template/#HTML
    - https://twitter.com/empijei/status/1275177219011350528
  languages:
  - go
- id: go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - go
  severity: ERROR
  patterns:
  - pattern-inside: |
      import "github.com/dgrijalva/jwt-go"
      ...
  - pattern-either:
    - pattern: |
        jwt.SigningMethodNone
    - pattern: jwt.UnsafeAllowNoneSignatureType
- id: go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified
  message: |
    Detected the decoding of a JWT token without a verify step.
    Don't use `ParseUnverified` unless you know what you're doing
    This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it.
  metadata:
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-inside: |
      import "github.com/dgrijalva/jwt-go"
      ...
  - pattern: |
      $JWT.ParseUnverified(...)
- id: go.otto.security.audit.dangerous-execution.dangerous-execution
  message: |
    Detected non-static script inside otto VM. Audit the input to 'VM.Run'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  patterns:
  - pattern-inside: |
      $VM = otto.New(...)
      ...
  - pattern-not: $VM.Run("...", ...)
  - pattern: $VM.Run(...)
  languages:
  - go
- id: go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
  metadata:
    cwe: 'CWE-300: Channel Accessible by Non-Endpoint'
    references:
    - https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption
  message: 'Found an insecure gRPC connection using ''grpc.WithInsecure()''. This
    creates a connection without encryption to a gRPC server. A malicious attacker
    could tamper with the gRPC message, which could compromise the machine. Instead,
    establish a secure connection with an SSL certificate using the ''grpc.WithTransportCredentials()''
    function. You can create a create credentials using a ''tls.Config{}'' struct
    with ''credentials.NewTLS()''. The final fix looks like this: ''grpc.WithTransportCredentials(credentials.NewTLS(<config>))''.'
  languages:
  - go
  severity: ERROR
  pattern: $GRPC.Dial($ADDR, ..., $GRPC.WithInsecure(...), ...)
  fix-regex:
    regex: (.*)WithInsecure\(.*?\)
    replacement: \1WithTransportCredentials(credentials.NewTLS(<your_tls_config_here>))
- id: go.lang.correctness.useless-eqeq.eqeq-is-bad
  patterns:
  - pattern-not-inside: assert(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: useless comparison operation `$X == $X` or `$X != $X`
  languages:
  - go
  severity: ERROR
- id: go.lang.correctness.useless-eqeq.hardcoded-eq-true-or-false
  patterns:
  - pattern-either:
    - pattern: if (true) { ... }
    - pattern: if (false) { ... }
  message: useless if statement, always the same behavior
  languages:
  - go
  severity: ERROR
- id: go.lang.correctness.overflow.overflow.integer-overflow-int16
  message: Potential Integer overflow made by strconv.Atoi result conversion to int16
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern: |
      $F, $ERR := strconv.Atoi($NUM)
      ...
      int16($F)
  - metavariable-comparison:
      metavariable: $NUM
      comparison: $NUM > 32767 or $NUM < -32768
      strip: true
- id: go.lang.correctness.overflow.overflow.integer-overflow-int32
  message: Potential Integer overflow made by strconv.Atoi result conversion to int32
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern: |
      $F, $ERR := strconv.Atoi($NUM)
      ...
      int32($F)
  - metavariable-comparison:
      metavariable: $NUM
      comparison: $NUM > 2147483647 or $NUM < -2147483648
      strip: true
- id: go.lang.best-practice.channel-guarded-with-mutex.channel-guarded-with-mutex
  pattern-either:
  - pattern: |
      $MUX.Lock()
      $VALUE <- $CHANNEL
      $MUX.Unlock()
  - pattern: |
      $MUX.Lock()
      $VALUE = <- $CHANNEL
      $MUX.Unlock()
  message: |
    Detected a channel guarded with a mutex. Channels already have
    an internal mutex, so this is unnecessary. Remove the mutex.
    See https://hackmongo.com/page/golang-antipatterns/#guarded-channel
    for more information.
  languages:
  - go
  severity: WARNING
- id: go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type
  message: |
    Semgrep could not determine that the argument to 'template.HTML()'
    is a constant. 'template.HTML()' and similar does not escape contents.
    Be absolutely sure there is no user-controlled data in this
    template. If user data can reach this template, you may have
    a XSS vulnerability. Instead, do not use this function and
    use 'template.Execute()'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://golang.org/pkg/html/template/#HTML
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/vulnerability/xss/xss.go#L33
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-not: template.$ANY("..." + "...")
  - pattern-not: template.$ANY("...")
  - pattern-either:
    - pattern: template.HTML(...)
    - pattern: template.CSS(...)
    - pattern: template.HTMLAttr(...)
    - pattern: template.JS(...)
    - pattern: template.JSStr(...)
    - pattern: template.Srcset(...)
    - pattern: template.URL(...)
- id: go.lang.best-practice.hidden-goroutine.hidden-goroutine
  patterns:
  - pattern-not: |
      func $FUNC(...) {
        go func() {
          ...
        }(...)
        $MORE
      }
  - pattern: |
      func $FUNC(...) {
        go func() {
          ...
        }(...)
      }
  message: |
    Detected a hidden goroutine. Function invocations are expected to synchronous,
    and this function will execute asynchronously because all it does is call a
    goroutine. Instead, remove the internal goroutine and call the function using 'go'.
  languages:
  - go
  severity: WARNING
- id: go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb
  message: Detected a possible denial-of-service via a zip bomb attack. By limiting
    the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size.
    Refer to https://bomb.codes/ to learn more about this attack and other ways to
    mitigate it.
  severity: WARNING
  languages:
  - go
  patterns:
  - pattern-either:
    - pattern: io.Copy(...)
    - pattern: io.CopyBuffer(...)
  - pattern-either:
    - pattern-inside: |
        gzip.NewReader(...)
        ...
    - pattern-inside: |
        zlib.NewReader(...)
        ...
    - pattern-inside: |
        zlib.NewReaderDict(...)
        ...
    - pattern-inside: |
        bzip2.NewReader(...)
        ...
    - pattern-inside: |
        flate.NewReader(...)
        ...
    - pattern-inside: |
        flate.NewReaderDict(...)
        ...
    - pattern-inside: |
        lzw.NewReader(...)
        ...
    - pattern-inside: |
        tar.NewReader(...)
        ...
    - pattern-inside: |
        zip.NewReader(...)
        ...
    - pattern-inside: |
        zip.OpenReader(...)
        ...
  fix-regex:
    regex: (.*)(Copy|CopyBuffer)\((.*?),(.*?)(\)|,.*\))
    replacement: \1CopyN(\3, \4, 1024*1024*256)
  metadata:
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
    source-rule-url: https://github.com/securego/gosec
    references:
    - https://bomb.codes/
    - https://golang.org/pkg/io/#CopyN
    - https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go
- id: go.lang.security.bad_tmp.bad-tmp-file-creation
  message: File creation in shared tmp directory without using ioutil.Tempfile
  languages:
  - go
  severity: WARNING
  metadata:
    cwe: 'CWE-377: Insecure Temporary File'
    source_rule_url: https://github.com/securego/gosec
  pattern-either:
  - pattern: ioutil.WriteFile("=~//tmp/.*$/", ...)
  - pattern: os.Create("=~//tmp/.*$/", ...)
- id: go.lang.security.audit.reflect-makefunc.reflect-makefunc
  message: |
    'reflect.MakeFunc' detected. This will sidestep protections that are
    normally afforded by Go's type system. Audit this call and be sure that
    user input cannot be used to affect the code generated by MakeFunc;
    otherwise, you will have a serious security vulnerability.
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
  severity: WARNING
  pattern: reflect.MakeFunc(...)
  languages:
  - go
- id: go.lang.security.audit.unsafe.use-of-unsafe-block
  message: |
    Using the unsafe package in Go gives you low-level memory management and
    many of the strengths of the C language but also gives flexibility to the attacker
    of your application.
  languages:
  - go
  severity: WARNING
  metadata:
    cwe: 'CWE-242: Use of Inherently Dangerous Function'
    source_rule_url: https://github.com/securego/gosec/blob/master/rules/unsafe.go
  pattern: unsafe.$FUNC(...)
- id: go.lang.security.audit.xss.import-text-template.import-text-template
  message: |
    'text/template' does not escape HTML content. If you need
    to escape HTML content, use 'html/template' instead.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://www.veracode.com/blog/secure-development/use-golang-these-mistakes-could-compromise-your-apps-security
  severity: WARNING
  pattern: |
    import "text/template"
  languages:
  - go
- id: go.lang.security.audit.xss.no-printf-in-responsewriter.no-printf-in-responsewriter
  message: |
    Detected 'printf' or similar in 'http.ResponseWriter.write()'.
    This bypasses HTML escaping that prevents cross-site scripting
    vulnerabilities. Instead, use the 'html/template' package
    to render data to users.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern: |
      $WRITER.Write(<... fmt.$PRINTF(...) ...>, ...)
  languages:
  - go
- id: go.lang.security.audit.xss.no-io-writestring-to-responsewriter.no-io-writestring-to-responsewriter
  message: |
    Detected 'io.WriteString()' writing directly to 'http.ResponseWriter'.
    This bypasses HTML escaping that prevents cross-site scripting
    vulnerabilities. Instead, use the 'html/template' package
    to render data to users.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    - https://golang.org/pkg/io/#WriteString
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern-not: io.WriteString($WRITER, "...")
  - pattern: io.WriteString($WRITER, $STRING)
  languages:
  - go
- id: go.lang.security.audit.xss.no-interpolation-js-template-string.no-interpolation-js-template-string
  message: Detected template variable interpolation in a JavaScript template string.
    This is potentially vulnerable to cross-site scripting (XSS) attacks because a
    malicious actor has control over JavaScript but without the need to use escaped
    characters. Instead, obtain this variable outside of the template string and ensure
    your template is properly escaped.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://github.com/golang/go/issues/9200#issuecomment-66100328
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
  languages:
  - generic
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... ... ... ... ... </script>
  - pattern: '` ... {{ ... }} ...`'
- id: go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter
  message: |
    Detected 'Fprintf' or similar writing to 'http.ResponseWriter'.
    This bypasses HTML escaping that prevents cross-site scripting
    vulnerabilities. Instead, use the 'html/template' package
    to render data to users.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern-not: fmt.$PRINTF($WRITER, "...")
  - pattern: fmt.$PRINTF($WRITER, ...)
  languages:
  - go
- id: go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
  message: |
    Detected directly writing or similar in 'http.ResponseWriter.write()'.
    This bypasses HTML escaping that prevents cross-site scripting
    vulnerabilities. Instead, use the 'html/template' package
    and render data using 'template.Execute()'.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern: $WRITER.Write(...)
  - pattern-not: $WRITER.Write([]byte("..."))
  languages:
  - go
- id: go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure
  patterns:
  - pattern-not-inside: |
      http.Cookie{
        ...,
        Secure: true,
        ...,
      }
  - pattern: |
      http.Cookie{
        ...,
      }
  message: |
    A session cookie was detected without setting the 'Secure' flag.
    The 'secure' flag for cookies prevents the client from transmitting
    the cookie over insecure channels such as HTTP.  Set the 'Secure'
    flag by setting 'Secure' to 'true' in the Options struct.
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go
    - https://golang.org/src/net/http/cookie.go
  fix-regex:
    regex: (Secure\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf
  patterns:
  - pattern-inside: |
      func $FUNC(..., $W http.ResponseWriter, ...) {
          ...
      }
  - pattern-inside: |
      ...
      var $T = "..."
      ...
      $W.Write([]byte(fmt.$PRINTF($T, ...)), ...)
  - pattern-either:
    - pattern: |
        $PARAMS = r.URL.Query()
        ...
        $DATA, $ERR := $PARAMS[...]
        ...
        $INTERM = $ANYTHING(..., $DATA, ...)
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $PARAMS = r.URL.Query()
        ...
        $DATA, $ERR := $PARAMS[...]
        ...
        $INTERM = $DATA[...]
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $DATA, $ERR := r.URL.Query()[...]
        ...
        $INTERM = $DATA[...]
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $DATA, $ERR := r.URL.Query()[...]
        ...
        $INTERM = $ANYTHING(..., $DATA, ...)
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $PARAMS = r.URL.Query()
        ...
        $DATA, $ERR := $PARAMS[...]
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $DATA, ...)))
  message: |
    Found data going from url query parameters into formatted data written to ResponseWriter.
    This could be XSS and should not be done. If you must do this, ensure your data is
    sanitized or escaped.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (''XSS'')'
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace
  message: |
    Detected a potentially dynamic ClientTrace. This occurred because semgrep could not
    find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because
    they deserialize function code to run when certain Request events occur, which could lead
    to code being run without your knowledge. Ensure that your ClientTrace is statically defined.
  metadata:
    cwe: 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://github.com/returntocorp/semgrep-rules/issues/518
  patterns:
  - pattern-not-inside: |
      ...
      &httptrace.ClientTrace { ... }
      ...
  - pattern: httptrace.WithClientTrace($ANY, $TRACE)
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces
  message: Listening on 0.0.0.0 or empty string could unexpectedly expose the server
    publicly as it binds to all available interfaces
  languages:
  - go
  severity: WARNING
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://github.com/securego/gosec
  pattern-either:
  - pattern: tls.Listen($NETWORK, "=~/^0.0.0.0:.*$/", ...)
  - pattern: net.Listen($NETWORK, "=~/^0.0.0.0:.*$/", ...)
  - pattern: tls.Listen($NETWORK, "=~/^:.*$/", ...)
  - pattern: net.Listen($NETWORK, "=~/^:.*$/", ...)
- id: go.lang.security.audit.net.formatted-template-string.formatted-template-string
  message: |
    Found a formatted template string passed to 'template.HTML()'.
    'template.HTML()' does not escape contents. Be absolutely sure
    there is no user-controlled data in this template. If user data
    can reach this template, you may have a XSS vulnerability.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A1: Injection'
    references:
    - https://golang.org/pkg/html/template/#HTML
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-not: template.HTML("..." + "...")
  - pattern-either:
    - pattern: template.HTML($T + $X, ...)
    - pattern: template.HTML(fmt.$P("...", ...), ...)
    - pattern: |
        $T = "..."
        ...
        $T = $FXN(..., $T, ...)
        ...
        template.HTML($T, ...)
    - pattern: |
        $T = fmt.$P("...", ...)
        ...
        template.HTML($T, ...)
    - pattern: |
        $T, $ERR = fmt.$P("...", ...)
        ...
        template.HTML($T, ...)
    - pattern: |
        $T = $X + $Y
        ...
        template.HTML($T, ...)
    - pattern: |
        $T = "..."
        ...
        $OTHER, $ERR = fmt.$P(..., $T, ...)
        ...
        template.HTML($OTHER, ...)
- id: go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly
  patterns:
  - pattern-not-inside: |
      http.Cookie{
        ...,
        HttpOnly: true,
        ...,
      }
  - pattern: |
      http.Cookie{
        ...,
      }
  message: |
    A session cookie was detected without setting the 'HttpOnly' flag.
    The 'HttpOnly' flag for cookies instructs the browser to forbid
    client-side scripts from reading the cookie which mitigates XSS
    attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true'
    in the Cookie.
  metadata:
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go
    - https://golang.org/src/net/http/cookie.go
  fix-regex:
    regex: (HttpOnly\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion
  message: |
    `MinVersion` is missing from this TLS configuration. The default
    value is TLS1.0 which is considered insecure. Explicitly set the
    `MinVersion` to a secure version of TLS, such as `VersionTLS13`.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls_config.go
    references:
    - https://golang.org/doc/go1.14#crypto/tls
    - https://golang.org/pkg/crypto/tls/#:~:text=MinVersion
    - https://www.us-cert.gov/ncas/alerts/TA14-290A
  languages:
  - go
  severity: ERROR
  patterns:
  - pattern: tls.Config{...}
  - pattern-not-inside: 'tls.Config{..., MinVersion: ..., ...}'
  fix-regex:
    regex: Config\s*\{
    replacement: 'Config{MinVersion: SSL.VersionTLS13,'
- id: go.lang.security.audit.net.pprof.pprof-debug-exposure
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://github.com/securego/gosec#available-rules
    references:
    - https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/
  message: |
    The profiling 'pprof' endpoint is automatically exposed on /debug/pprof.
    This could leak information about the server.
    Instead, use `import "net/http/pprof"`. See
    https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/
    for more information and mitigation.
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-inside: |
      import _ "net/http/pprof"
      ...
  - pattern-inside: |
      func $ANY(...) {
        ...
      }
  - pattern-not: http.ListenAndServe("=~/^localhost.*/", ...)
  - pattern-not: http.ListenAndServe("=~/^127[.]0[.]0[.]1.*/", ...)
  - pattern: http.ListenAndServe(...)
- id: go.lang.security.audit.net.use-tls.use-tls
  pattern: http.ListenAndServe($ADDR, $HANDLER)
  fix: http.ListenAndServeTLS($ADDR, certFile, keyFile, $HANDLER)
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://golang.org/pkg/net/http/#ListenAndServeTLS
  message: Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead.
    See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.
  languages:
  - go
  severity: WARNING
- id: go.lang.security.audit.crypto.tls.tls-with-insecure-cipher
  message: |
    Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak.
    Use the function 'tls.CipherSuites()' to get a list of good cipher suites.
    See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites
    for why and what other cipher suites to use.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A9: Using Components with Known Vulnerabilities'
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls.go
    references:
    - https://golang.org/pkg/crypto/tls/#InsecureCipherSuites
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_RC4_128_SHA,...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_AES_128_CBC_SHA256,...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,...}}
  - pattern: |
      tls.CipherSuite{..., TLS_RSA_WITH_RC4_128_SHA ,...}
  - pattern: |
      tls.CipherSuite{..., TLS_RSA_WITH_AES_128_CBC_SHA256 ,...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_ECDSA_WITH_RC4_128_SHA ,...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_RC4_128_SHA ,...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 ,...}
  - pattern: tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 ,...}
- id: go.lang.security.audit.crypto.math_random.math-random-used
  metadata:
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation
  message: Do not use `math/rand`. Use `crypto/rand` instead.
  languages:
  - go
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-inside: |
        import mrand "math/rand"
        ...
    - pattern-either:
      - pattern: mrand.Int()
      - pattern: mrand.Read(...)
  - patterns:
    - pattern-inside: |
        import "math/rand"
        ...
    - pattern-not-inside: |
        import "crypto/rand"
        ...
    - pattern-either:
      - pattern: rand.Int()
      - pattern: rand.Read(...)
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
  pattern-either:
  - pattern: |
      md5.New()
  - pattern: |
      md5.Sum(...)
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
  pattern-either:
  - pattern: |
      sha1.New()
  - pattern: |
      sha1.Sum(...)
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES
  message: |
    Detected DES cipher algorithm which is insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
  pattern-either:
  - pattern: |
      des.NewTripleDESCipher(...)
  - pattern: |
      des.NewCipher(...)
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4
  message: |
    Detected RC4 cipher algorithm which is insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
  pattern: rc4.NewCipher(...)
- id: go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key
  message: |
    Disabled host key verification detected. This allows man-in-the-middle
    attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do
    host key verification.
    See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/
    to learn more about the problem and how to fix it.
  metadata:
    cwe: 'CWE-322: Key Exchange without Entity Authentication'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/securego/gosec
    references:
    - https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/
    - https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d
  languages:
  - go
  severity: WARNING
  pattern: ssh.InsecureIgnoreHostKey()
- id: go.lang.security.audit.crypto.bad_imports.insecure-module-used
  message: Detected use of an insecure cryptographic hashing method. This method is
    known to be broken and easily compromised. Use SHA256 or SHA3 instead.
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec
    references:
    - https://godoc.org/golang.org/x/crypto/sha3
  languages:
  - go
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-inside: |
        import "crypto/md5"
        ...
    - pattern: |
        md5.$FUNC(...)
  - patterns:
    - pattern-inside: |
        import "crypto/des"
        ...
    - pattern: |
        des.$FUNC(...)
  - patterns:
    - pattern-inside: |
        import "crypto/sha1"
        ...
    - pattern: |
        sha1.$FUNC(...)
  - patterns:
    - pattern-inside: |
        import "crypto/rc4"
        ...
    - pattern: |
        rc4.$FUNC(...)
  - patterns:
    - pattern-inside: |
        import "net/http/cgi"
        ...
    - pattern: |
        cgi.$FUNC(...)
- id: go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key
  message: RSA keys should be at least 2048 bits
  languages:
  - go
  severity: WARNING
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/rsa.go
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
  patterns:
  - pattern-either:
    - pattern: |
        rsa.GenerateKey(..., $BITS)
    - pattern: |
        rsa.GenerateMultiPrimeKey(..., $BITS)
  - metavariable-comparison:
      metavariable: $BITS
      comparison: $BITS < 2048
- id: go.lang.maintainability.useless-ifelse.useless-if-conditional
  patterns:
  - pattern-either:
    - pattern: |-
        if ($X) {
            ...
        } else if ($X) {
            ...
        }
  message: |
    Detected an if block that checks for the same condition on both branches (`$X`)
  languages:
  - go
  severity: WARNING
- id: go.lang.maintainability.useless-ifelse.useless-if-body
  patterns:
  - pattern: |-
      if ($X) {
          $S
      } else {
          $S
      }
  message: |
    Detected identical if-statement bodies. Is this intentional?
  languages:
  - go
  severity: WARNING
- id: go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly
  patterns:
  - pattern-not-inside: |
      &sessions.Options{
        ...,
        HttpOnly: true,
        ...,
      }
  - pattern: |
      &sessions.Options{
        ...,
      }
  message: |
    A session cookie was detected without setting the 'HttpOnly' flag.
    The 'HttpOnly' flag for cookies instructs the browser to forbid
    client-side scripts from reading the cookie which mitigates XSS
    attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true'
    in the Options struct.
  metadata:
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69
  fix-regex:
    regex: (HttpOnly\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: go.gorilla.security.audit.handler-attribute-read-from-multiple-sources.handler-attribute-read-from-multiple-sources
  metadata:
    cwe: 'CWE-289: Authentication Bypass by Alternate Name'
    owasp: 'A2: Broken Authentication'
    owaspapi: 'API1: Broken Object Level Authorization'
  patterns:
  - pattern-inside: |
      func $HANDLER(..., $R *http.Request, ...) {
        ...
      }
  - pattern-either:
    - pattern: |
        $A = $X.$ATT
        ...
        $B = $Y.$ATT
    - pattern: $A = $X.$ATT || $Y.$ATT
  message: 'Attribute $ATT is read from two different sources: ''$X.$ATT'' and ''$Y.$ATT''.
    Make sure this is intended, as this could cause logic bugs if they are treated
    as if they are the same object.'
  languages:
  - go
  severity: WARNING
- id: contrib.nodejsscan.tls_node.node_curl_ssl_verify_disable
  patterns:
  - pattern: |
      $X(..., {SSL_VERIFYPEER : 0}, ...)
  message: SSL Certificate verification for node-curl is disabled.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-599: Missing Validation of OpenSSL Certificate'
- id: go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure
  patterns:
  - pattern-not-inside: |
      &sessions.Options{
        ...,
        Secure: true,
        ...,
      }
  - pattern: |
      &sessions.Options{
        ...,
      }
  message: |
    A session cookie was detected without setting the 'Secure' flag.
    The 'secure' flag for cookies prevents the client from transmitting
    the cookie over insecure channels such as HTTP.  Set the 'Secure'
    flag by setting 'Secure' to 'true' in the Options struct.
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69
  fix-regex:
    regex: (Secure\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: contrib.nodejsscan.buffer_noassert.buffer_noassert
  pattern-either:
  - pattern: $OBJ.readUInt8(..., true)
  - pattern: $OBJ.readUInt16LE(..., true)
  - pattern: $OBJ.readUInt16BE(..., true)
  - pattern: $OBJ.readUInt32LE(..., true)
  - pattern: $OBJ.readUInt32BE(..., true)
  - pattern: $OBJ.readInt8(..., true)
  - pattern: $OBJ.readInt16LE(..., true)
  - pattern: $OBJ.readInt16BE(..., true)
  - pattern: $OBJ.readInt32LE(..., true)
  - pattern: $OBJ.readInt32BE(..., true)
  - pattern: $OBJ.readFloatLE(..., true)
  - pattern: $OBJ.readFloatBE(..., true)
  - pattern: $OBJ.readDoubleLE(..., true)
  - pattern: $OBJ.readDoubleBE(..., true)
  - pattern: $OBJ.writeUInt8(..., true)
  - pattern: $OBJ.writeUInt16LE(..., true)
  - pattern: $OBJ.writeUInt16BE(..., true)
  - pattern: $OBJ.writeUInt32LE(..., true)
  - pattern: $OBJ.writeUInt32BE(..., true)
  - pattern: $OBJ.writeInt8(..., true)
  - pattern: $OBJ.writeInt16LE(..., true)
  - pattern: $OBJ.writeInt16BE(..., true)
  - pattern: $OBJ.writeInt32LE(..., true)
  - pattern: $OBJ.writeInt32BE(..., true)
  - pattern: $OBJ.writeFloatLE(..., true)
  - pattern: $OBJ.writeFloatBE(..., true)
  - pattern: $OBJ.writeDoubleLE(..., true)
  - pattern: $OBJ.writeDoubleBE(..., true)
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
  message: Detected usage of noassert in Buffer API, which allows the offset the be
    beyond the end of the buffer. This could result in writing or reading beyond the
    end of the buffer.
- id: contrib.nodejsscan.jwt_not_revoked.jwt_not_revoked
  patterns:
  - pattern-inside: |
      $JWT = require('express-jwt');
      ...
  - pattern: $JWT(...)
  - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
  - pattern-not-inside: |-
      $OPTS = <... {isRevoked:...} ...>;
      ...
      $JWT($OPTS,...);
  message: No token revoking configured for `express-jwt`. A leaked token could still
    be used and unable to be revoked. Consider using function as the `isRevoked` option.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.ssrf_playwright.playwright_ssrf
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.goto(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluate($CODE,..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluate($CODE,..., <... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateHandle($CODE,..., <... $REQ.$QUERY.$FOO ...>, ...)
    - pattern: $PAGE.evaluateHandle($CODE,..., <... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>, ...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY.$FOO ...>, ...)
    - pattern: $CONTEXT.addInitScript(<... $REQ.$BODY ...>,...)
    - pattern: $CONTEXT.addInitScript(<... $REQ.$BODY.$FOO ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate($CODE,..., <... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate($CODE,..., <... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle($CODE,..., <... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle($CODE,..., <... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $CONTEXT.addInitScript($INPUT,...);
  message: If unverified user data can reach the `puppeteer` methods it can result
    in Server-Side Request Forgery vulnerabilities.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
- id: contrib.nodejsscan.nosql_injection.node_nosqli_js_injection
  patterns:
  - pattern-either:
    - pattern: |
        $OBJ.$FUNC({$where: <... $REQ.$FOO.$BAR ...>}, ...);
    - pattern: |
        $OBJ.$FUNC({$where: <... $REQ.$QUERY ...>}, ...);
    - pattern: |
        $NSQL = <... $REQ.$QUERY.$...>;
        ...
        $OBJ.$FUNC({$where: <... $NSQL ...>}, ...);
    - pattern: |
        $NSQL = <... $REQ.$QUERY ...>;
        ...
        $OBJ.$FUNC({$where: <... $NSQL ...>}, ...);
    - pattern: |
        $INP = $REQ.$FOO.$BAR;
        ...
        $QRY = {$where: <... $INP ...>};
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...);
    - pattern: |
        $INP = $REQ.$FOO;
        ...
        $QRY = {$where: <... $INP ...>};
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...);
    - pattern: |
        $QRY["$where"] = <... $REQ.$FOO ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...);
    - pattern: |
        $QRY["$where"] = <... $REQ.$FOO.$BAR ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...);
    - pattern: |
        $INP = $REQ.$FOO;
        ...
        $QRY["$where"] = <... $INP ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...);
    - pattern: |
        $INP = $REQ.$FOO.$BAR;
        ...
        $QRY["$where"] = <... $INP ...>;
        ...
        $OBJ.$FUNC(<... $QRY ...>, ...);
  message: Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript
    Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
- id: contrib.nodejsscan.nosql_find_injection.node_nosqli_injection
  patterns:
  - pattern-either:
    - pattern: |
        $OBJ.findOne({$KEY : <... $REQ.$FOO.$BAR ...> }, ...);
    - pattern: |
        $OBJ.findOne({$KEY: <... $REQ.$FOO ...> }, ...);
    - pattern: |
        $INP = <... $REQ.$FOO.$BAR ...>;
        ...
        $OBJ.findOne({$KEY : <... $INP ...> }, ...);
    - pattern: |
        $INP = <... $REQ.$FOO ...>;
        ...
        $OBJ.findOne({$KEY: <... $INP ...> }, ...);
    - pattern: |
        $QUERY = {$KEY: <... $REQ.$FOO.$BAR ...>};
        ...
        $OBJ.findOne($QUERY, ...);
    - pattern: |
        $QUERY = {$KEY: <... $REQ.$FOO ...>};
        ...
        $OBJ.findOne($QUERY, ...);
    - pattern: |
        $INP = <... $REQ.$FOO.$BAR ...>;
        ...
        $QUERY = {$KEY : <... $INP ...> };
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...);
    - pattern: |
        $INP = <... $REQ.$FOO ...>;
        ...
        $QUERY = {$KEY : <... $INP ...> };
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...);
    - pattern: |
        $QUERY[$KEY] = <... $REQ.$FOO.$BAR ...>;
        ...
        $OBJ.findOne($QUERY, ...);
    - pattern: |
        $QUERY[$KEY] = <... $REQ.$FOO ...>;
        ...
        $OBJ.findOne($QUERY, ...);
    - pattern: |
        $INP = <... $REQ.$FOO.$BAR ...>;
        ...
        $QUERY[$KEY] = <... $INP ...>;
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...);
    - pattern: |
        $INP = <... $REQ.$FOO ...>;
        ...
        $QUERY[$KEY] = <... $INP ...>;
        ...
        $OBJ.findOne(<... $QUERY  ...>, ...);
  message: Untrusted user input in findOne() function can result in NoSQL Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
- id: contrib.nodejsscan.hardcoded_secrets.node_password
  patterns:
  - pattern-not: password = ''
  - pattern-not: PASSWORD = ''
  - pattern-not: PASS = ''
  - pattern-not: pass = ''
  - pattern-not: $X[...] = ''
  - pattern-either:
    - pattern: |
        password = '...';
    - pattern: |
        PASSWORD = '...';
    - pattern: |
        PASS = '...';
    - pattern: |
        pass = '...';
    - pattern: |
        $X['pass'] = '...';
    - pattern: |
        $X['password'] = '...';
    - pattern: |
        $X['PASS'] = '...';
    - pattern: |
        $X['PASSWORD'] = '...';
    - pattern: |
        $X.pass = '...';
    - pattern: |
        $X.password = '...';
    - pattern: |
        $X.PASS = '...';
    - pattern: |
        $X.PASSWORD = '...';
  message: A hardcoded password in plain text is identified. Store it properly in
    an environment variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: contrib.nodejsscan.tls_node.node_tls_reject
  patterns:
  - pattern-either:
    - pattern: |
        $X.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
    - pattern: |
        $X.env['NODE_TLS_REJECT_UNAUTHORIZED']= '0'
  message: Setting 'NODE_TLS_REJECT_UNAUTHORIZED' to 0 will allow node server to accept
    self signed certificates and is not a secure behaviour.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-295: Improper Certificate Validation'
- id: contrib.nodejsscan.hardcoded_secrets.node_api_key
  patterns:
  - pattern-not: api_key = ''
  - pattern-not: apiKey = ''
  - pattern-not: API_KEY = ''
  - pattern-not: $X['...'] = ''
  - pattern-either:
    - pattern: |
        api_key = '...';
    - pattern: |
        apiKey = '...';
    - pattern: |
        API_KEY = '...';
    - pattern: |
        $X['api_key'] = '...';
    - pattern: |
        $X['apiKey'] = '...';
    - pattern: |
        $X['API_KEY'] = '...';
    - pattern: |
        $X.api_key = '...';
    - pattern: |
        $X.apiKey = '...';
    - pattern: |
        $X.API_KEY = '...';
    - pattern: |
        $X('api_key', '...')
    - pattern: |
        $X('apiKey', '...')
    - pattern: |
        $X('API_KEY', '...')
  message: A hardcoded API Key is identified. Store it properly in an environment
    variable.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-798: Use of Hard-coded Credentials'
- id: contrib.nodejsscan.host_header_injection.host_header_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X = <... "=~/.*http[s]*:///" + $REQ.host ...>;
    - pattern: |
        $X = <... "=~/.*http[s]*:///" + $REQ["host"] ...>;
    - pattern: |
        $X = <... "=~/.*http[s]*:///" + $REQ("host") ...>;
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ.host ...>};
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ["host"] ...>};
    - pattern: |
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ("host") ...>};
    - pattern: |
        $Z = $REQ.host;
        ...
        $X = <... "=~/.*http[s]*:///" + $Z ...>;
    - pattern: |
        $Z = $REQ["host"];
        ...
        $X = <... "=~/.*http[s]*:///" + $Z ...>;
    - pattern: |
        $Z = $REQ("host");
        ...
        $X = <... "=~/.*http[s]*:///" + $Z ...>;
    - pattern: |
        $Z = $REQ.host;
        ...
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ.host ...>};
    - pattern: |
        $Z = $REQ["host"];
        ...
        $X = { $Y: <... "=~/.*http[s]*:///" + $Z ...>};
    - pattern: |
        $Z = $REQ("host");
        ...
        $X = { $Y: <... "=~/.*http[s]*:///" + $REQ("host") ...>};
  message: Using untrusted Host header for generating dynamic URLs can result in web
    cache and or password reset poisoning.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-20: Improper Input Validation'
- id: contrib.nodejsscan.ssrf_wkhtmltoimage.wkhtmltoimage_ssrf
  patterns:
  - pattern-inside: |
      require('wkhtmltoimage');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.generate(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.generate(<... $INP ...>, ...);
    - pattern: |
        $PKG.generate(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.generate(<... $REQ.$VAR.$FOO ...>, ...)
  message: User controlled URL reached to `wkhtmltoimage` can result in Server Side
    Request Forgery (SSRF).
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
- id: contrib.nodejsscan.ssrf_wkhtmltopdf.wkhtmltopdf_ssrf
  patterns:
  - pattern-inside: |
      require('wkhtmltopdf');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        wkhtmltopdf(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        wkhtmltopdf(<... $INP ...>, ...);
    - pattern: |
        wkhtmltopdf(<... $REQ.$VAR ...>, ...)
    - pattern: |
        wkhtmltopdf(<... $REQ.$VAR.$FOO ...>, ...)
  message: User controlled URL reached to `wkhtmltopdf` can result in Server Side
    Request Forgery (SSRF).
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
- id: contrib.nodejsscan.server_side_template_injection.server_side_template_injection
  patterns:
  - pattern-either:
    - pattern-inside: |
        require('handlebars');
        ...
    - pattern-inside: |
        require('pug');
        ...
    - pattern-inside: |
        require('hamljs');
        ...
    - pattern-inside: |
        require('ejs');
        ...
    - pattern-inside: |
        require('squirrelly');
        ...
    - pattern-inside: |
        require('eta');
        ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $HB.compile(..., <... $REQ.$FOO ...>, ...)
    - pattern: |
        $HB.compile(..., <... $REQ.$FOO.$BAR ...>, ...)
    - pattern: |
        $X = <... $REQ.$FOO ...>;
        ...
        $HB.compile(..., <... $X ...>, ...);
    - pattern: |
        $X = <... $REQ.$FOO.$BAR ...>;
        ...
        $HB.compile(..., <... $X ...>, ...);
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO ...>, ...);
        ...
        $HB.compile(..., <... $X ...>, ...);
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO.$BAR ...>, ...);
        ...
        $HB.compile(..., <... $X ...>, ...);
    - pattern: |
        $HB.Compile(..., <... $REQ.$FOO ...>, ...)
    - pattern: |
        $HB.Compile(..., <... $REQ.$FOO.$BAR ...>, ...)
    - pattern: |
        $X = <... $REQ.$FOO ...>;
        ...
        $HB.Compile(..., <... $X ...>, ...);
    - pattern: |
        $X = <... $REQ.$FOO.$BAR ...>;
        ...
        $HB.Compile(..., <... $X ...>, ...);
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO ...>, ...);
        ...
        $HB.Compile(..., <... $X ...>, ...);
    - pattern: |
        $X = $SOURCE.replace('...', <... $REQ.$FOO.$BAR ...>, ...);
        ...
        $HB.Compile(..., <... $X ...>, ...);
  message: Untrusted user input in templating engine's compile() function can result
    in Remote Code Execution via server side template injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.xxe_node.node_xxe
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $LIBXML.parseXmlString(..., <... $REQ.$QUERY.$VAR.$FILE ...>, ...)
    - pattern: |
        $LIBXML.parseXmlString(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $LIBXML.parseXmlString(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR.$FILE ...>; ... $LIBXML.parseXmlString(..., <... $FOO ...>, ...);
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR ...>; ... $LIBXML.parseXmlString(..., <... $FOO ...>, ...);
    - pattern: |
        $FOO = <... $REQ.$QUERY ...>; ... $LIBXML.parseXmlString(..., <... $FOO ...>, ...);
    - pattern: |
        $LIBXML.parseXml(..., <... $REQ.$QUERY.$VAR.$FILE ...>, ...)
    - pattern: |
        $LIBXML.parseXml(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $LIBXML.parseXml(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR.$FILE ...>; ... $LIBXML.parseXml(..., <... $FOO ...>, ...);
    - pattern: |
        $FOO = <... $REQ.$QUERY.$VAR ...>; ... $LIBXML.parseXml(..., <... $FOO ...>, ...);
    - pattern: |
        $FOO = <... $REQ.$QUERY ...>;
        ...
        $LIBXML.parseXml(..., <... $FOO ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxParser();
        ...
        $PARSER.parseString(..., <... $REQ.$QUERY ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxParser();
        ...
        $PARSER.parseString(..., <... $REQ.$QUERY.$BAR ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxParser();
        ...
        $PARSER.parseString(..., <... $REQ.$QUERY.$BAR.$FILE ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser();
        ...
        $PARSER.push(..., <... $REQ.$QUERY ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser();
        ...
        $PARSER.push(..., <... $REQ.$QUERY.$FOO ...> , ...);
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser();
        ...
        $PARSER.push(..., <... $REQ.$QUERY.$FOO.$FILE ...> , ...);
    - pattern: |
        $PARSER = new libxmljs.SaxParser();
        ...
        $FOO = <... $REQ.$QUERY ...>;
        ...
        $PARSER.parseString(..., <... $FOO ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxParser();
        ...
        $FOO = <... $REQ.$QUERY.$BAR ...>;
        ...
        $PARSER.parseString(..., <... $FOO ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxParser();
        ...
        $FOO = <... $REQ.$QUERY.$BAR.$FILE ...>;
        ...
        $PARSER.parseString(..., <... $FOO ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser();
        ...
        $FOO = <... $REQ.$QUERY ...>;
        ...
        $PARSER.push(..., <... $FOO ...>, ...);
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser();
        ...
        $FOO = <... $REQ.$QUERY.$BAR ...>;
        ...
        $PARSER.push(..., <... $FOO ...> , ...);
    - pattern: |
        $PARSER = new libxmljs.SaxPushParser();
        ...
        $FOO = <... $REQ.$QUERY.$BAR.$FILE ...>;
        ...
        $PARSER.push(..., <... $FOO ...> , ...);
  message: User controlled data in XML parsers can result in XML External or Internal
    Entity (XXE) Processing vulnerabilities
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
- id: contrib.nodejsscan.regex_dos.regex_dos
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $REGEX.test(<... $REQ ...>)
    - pattern: |
        $REGEX.test(<... $REQ.$QUERY ...>)
    - pattern: |
        $REGEX.test(<... $REQ.$BODY.$PARAM ...>)
    - pattern: |
        $INP = <... $REQ ...>;
        ...
        $REGEX.test(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $REGEX.test(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$BODY.$PARAM ...>;
        ...
        $REGEX.test(<... $INP ...>);
    - pattern: |
        /.../g.exec(<... $REQ ...>)
    - pattern: |
        /.../g.exec(<... $REQ.$QUERY ...>)
    - pattern: |
        /.../.exec(<... $REQ.$BODY.$PARAM ...>)
    - pattern: |
        $INP = <... $REQ ...>;
        ...
        /.../.exec(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        /.../.exec(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$BODY.$PARAM ...>;
        ...
        /.../.exec(<... $INP ...>);
    - pattern: |
        $RE = /.../;
        ...
        $RE.exec(<... $REQ ...>);
    - pattern: |
        $RE = /.../;
        ...
        $RE.exec(<... $REQ.$QUERY ...>);
    - pattern: |
        $RE = /.../;
        ...
        $RE.exec(<... $REQ.$BODY.$PARAM ...>);
  message: Ensure that the regex used to compare with user supplied input is safe
    from regular expression denial of service.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-185: Incorrect Regular Expression'
- id: contrib.nodejsscan.eval_deserialize.serializetojs_deserialize
  patterns:
  - pattern-inside: |
      require('serialize-to-js');
      ...
  - pattern: |
      $X.deserialize(...)
  message: User controlled data in 'unserialize()' or 'deserialize()' function can
    result in Object Injection or Remote Code Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
- id: contrib.nodejsscan.eval_deserialize.node_deserialize
  patterns:
  - pattern-inside: |
      require('node-serialize');
      ...
  - pattern: |
      $X.unserialize(...)
  message: User controlled data in 'unserialize()' or 'deserialize()' function can
    result in Object Injection or Remote Code Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
- id: contrib.nodejsscan.eval_sandbox.sandbox_code_injection
  patterns:
  - pattern-inside: |
      require('sandbox');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $S.run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $S.run(<... $CODE ...>,...);
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...);
    - pattern: |
        $S.run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $S.run(<... $CODE ...>,...);
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$BODY ...>,...);
    - pattern: |-
        $CODE = <... $REQ.$BODY ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...);
  message: Unrusted data in `sandbox` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.ssrf_node.node_ssrf
  patterns:
  - pattern-either:
    - pattern-inside: |
        require('request');
        ...
    - pattern-inside: |
        require('axios');
        ...
    - pattern-inside: |
        require('needle');
        ...
    - pattern-inside: |
        require('bent');
        ...
    - pattern-inside: |
        require('urllib');
        ...
    - pattern-inside: |
        require('net');
        ...
    - pattern-inside: |
        require('https');
        ...
    - pattern-inside: |
        require('superagent');
        ...
    - pattern-inside: |
        require('got');
        ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $PKG.get(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.get(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.post(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.post(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.put(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.put(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        needle("=~/[get|post|put|GET|POST|PUT]+/", <... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        needle("=~/[get|post|put|GET|POST|PUT]+/", <... $REQ.$VAR ...>, ...)
    - pattern: |
        request(<... $REQ.$VAR ...>, ...)
    - pattern: |
        request(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.request(<... $REQ.$VAR ...>, ...)
    - pattern: |
        $PKG.request(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        getJSON(<... $REQ.$VAR ...>, ...)
    - pattern: |
        getJSON(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        getBuffer(<... $REQ.$VAR ...>, ...)
    - pattern: |
        getBuffer(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        fetch(<... $REQ.$VAR ...>, ...)
    - pattern: |
        fetch(<... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $SOCKET.connect($PORT, <... $REQ.$VAR ...>, ...)
    - pattern: |
        $SOCKET.connect($PORT, <... $REQ.$VAR.$FOO ...>, ...)
    - pattern: |
        $PKG.get(..., {host: <... $REQ.$VAR ...>}, ...)
    - pattern: |
        $PKG.get(..., {host: <... $REQ.$VAR.$FOO ...>}, ...)
    - pattern: |
        $PKG.get(..., {hostname: <... $REQ.$VAR ...>}, ...)
    - pattern: |
        $PKG.get(..., {hostname: <... $REQ.$VAR.$FOO ...>}, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.get(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.get(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.post(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.post(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.put(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.put(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        needle("=~/[get|post|put|GET|POST|PUT]+/", <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        needle("=~/[get|post|put|GET|POST|PUT]+/", <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        request(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        request(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.request(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.request(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        getJSON(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        getJSON(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        getBuffer(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        getBuffer(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        fetch(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        fetch(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $SOCKET.connect($PORT, <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $SOCKET.connect($PORT, <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.get(..., {host: <... $INP ...>}, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.get(..., {host: <... $INP ...>}, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $PKG.get(..., {hostname: <... $INP ...>}, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$FOO ...>;
        ...
        $PKG.get(..., {hostname: <... $INP ...>}, ...);
  message: User controlled URL in http client libraries can result in Server Side
    Request Forgery (SSRF).
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
- id: contrib.nodejsscan.eval_vm_injection.vm_runincontext_injection
  patterns:
  - pattern-inside: |
      require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
  message: Untrusted user input in `vm.runInContext()` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.eval_vm_injection.vm_runinnewcontext_injection
  patterns:
  - pattern-inside: |
      require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.runInNewContext($CODE,<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VM.runInNewContext($CODE,<... $REQ.$BODY ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
  message: Untrusted user input in `vm.runInNewContext()` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.eval_vm_injection.vm_compilefunction_injection
  patterns:
  - pattern-inside: |
      require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$QUERY.$FOO ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>; ... $CONTEXT = {$NAME: <... $VAR ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {parsingContext: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$BODY ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>; ... $CONTEXT = {$NAME: <... $VAR ...>}; ... $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {parsingContext: <... $REQ.$BODY ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
  message: Untrusted user input in `vm.compileFunction()` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.eval_vm_injection.vm_code_injection
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $VM.runInContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($INPUT,...);
    - pattern: $VM.runInNewContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInNewContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInNewContext($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInNewContext($INPUT,...);
    - pattern: $VM.runInThisContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInThisContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInThisContext($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInThisContext($INPUT,...);
    - pattern: $VM.compileFunction(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.compileFunction(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.compileFunction($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.compileFunction($INPUT,...);
    - pattern: new $VM.Script(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: new $VM.Script(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $VM.Script($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        new $VM.Script($INPUT,...);
  message: Untrusted user input reaching `vm` can result in code injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.xxe_sax.xxe_sax
  pattern-either:
  - pattern: |
      require('sax');
      ...
      $PARSER.ondoctype = ...;
  - pattern: |-
      require('sax');
      ...
      $PARSER.on('doctype',...);
  severity: WARNING
  languages:
  - javascript
  message: Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do
    anything with custom DTD entity definitions. If you're implementing a custom DTD
    entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities,
    or be absolutely sure that external entities received from a trusted source while
    processing XML.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
- id: contrib.nodejsscan.open_redirect.express_open_redirect2
  patterns:
  - pattern-inside: |
      $APP.$METHOD(..., function $FUNC($REQ, $RES) { ... })
  - pattern-either:
    - pattern: |
        $RES.header(..., "=~/[Ll]+ocation/", <... $REQ.$VAR ...>, ...)
    - pattern: |
        $RES.header(..., "=~/[Ll]+ocation/", <... $REQ.$VAR.$VARR ...>, ...)
    - pattern: |
        $RES.writeHead(..., "=~/[Ll]+ocation/", <... $REQ.$VAR ...>, ...)
    - pattern: |
        $RES.writeHead(..., "=~/[Ll]+ocation/", <... $REQ.$VAR.$VARR ...>, ...)
    - pattern: |
        $RES.writeHead(..., {"=~/[Ll]+ocation/": <... $REQ.$VAR ...> }, ...)
    - pattern: |
        $RES.writeHead(..., {"=~/[Ll]+ocation/": <... $REQ.$VAR.$VARR ...> }, ...)
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $RES.header(..., "=~/[Ll]+ocation/", <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$VARR ...>;
        ...
        $RES.header(..., "=~/[Ll]+ocation/", <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $RES.writeHead(..., "=~/[Ll]+ocation/", <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$VARR ...>;
        ...
        $RES.writeHead(..., "=~/[Ll]+ocation/", <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$VAR ...>;
        ...
        $RES.writeHead(..., {"=~/[Ll]+ocation/": <... $INP ...> }, ...);
    - pattern: |
        $INP = <... $REQ.$VAR.$VARR ...>;
        ...
        $RES.writeHead(..., {"=~/[Ll]+ocation/": <... $INP ...> }, ...);
  message: Untrusted user input in response header('Location') can result in Open
    Redirect vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
- id: contrib.nodejsscan.crypto_node.node_md5
  patterns:
  - pattern: |
      $X.createHash("md5")
  message: MD5 is a a weak hash which is known to have collision. Use a strong hashing
    function.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: contrib.nodejsscan.crypto_node.node_sha1
  patterns:
  - pattern: |
      $X.createHash("sha1")
  message: SHA1 is a a weak hash which is known to have collision. Use a strong hashing
    function.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: contrib.nodejsscan.crypto_node.node_aes_ecb
  patterns:
  - pattern-either:
    - pattern: |
        $X.createCipheriv("=~/aes-([0-9]+)-ecb/", ...)
    - pattern: |
        $X.createDecipheriv("=~/aes-([0-9]+)-ecb/", ...)
  message: AES with ECB mode is deterministic in nature and not suitable for encrypting
    large amount of repetitive data.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: contrib.nodejsscan.crypto_node.node_weak_crypto
  patterns:
  - pattern-either:
    - pattern: |
        $X.createCipher('des', ...)
  message: A weak or broken cryptographic algorithm was identified. Using these functions
    will introduce vulnerabilities or downgrade the security of your application.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: contrib.nodejsscan.crypto_node.node_insecure_random_generator
  patterns:
  - pattern-either:
    - pattern: |
        $X.pseudoRandomBytes(...)
    - pattern: |
        Math.random(...)
  message: crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random
    number generator.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: contrib.nodejsscan.jwt_exposed_credentials.jwt_exposed_credentials
  patterns:
  - pattern-either:
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign({password:...},...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $P = {password:...};
        ...
        $T = JWT.sign($P,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $P.password = ...;
        ...
        $T = JWT.sign($P,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $P = Object.assign(...,{password:...},...);
        ...
        $T = JWT.sign($P,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign(Object.assign(...,{password:...},...),...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign({$U:{password:...}},...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $P = {$U:{password:...}};
        ...
        $T = JWT.sign($P,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $P.$U.password = ...;
        ...
        $T = JWT.sign($P,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $P = Object.assign(...,{$U:{password:...}},...);
        ...
        $T = JWT.sign($P,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWT } = $JOSE;
        ...
        $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
  severity: ERROR
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
  message: Password is exposed through JWT token payload. This is not encrypted and  the
    password could be compromised. Do not store passwords in JWT tokens.
- id: contrib.nodejsscan.eval_node.eval_nodejs
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        new Function(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        new Function(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        eval(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        eval(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        setTimeout(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        setTimeout(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        setInterval(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        setInterval(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        new Function(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        new Function(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        eval(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        eval(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        setTimeout(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        setTimeout(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        setInterval(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        setInterval(..., <... $INP ...>, ...);
  message: User controlled data in eval() or similar functions may result in Server
    Side Injection or Remote Code Injection
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
- id: contrib.nodejsscan.express_bodyparser_dos.express_bodyparser
  patterns:
  - pattern-inside: $APP = express(); ...
  - pattern-inside: |
      $APP.use(...);
  - pattern: $X.bodyParser(...)
  message: POST Request to Express Body Parser 'bodyParser()' can create Temporary
    files and consume space.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
- id: contrib.nodejsscan.layer7_object_dos.layer7_object_dos
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern-inside: |
        $OBJ = $REQ.body;
        ...
    - pattern-inside: |
        $OBJ = $REQ.body.$FOO;
        ...
  - pattern-inside: |
      for(...){...}
  - pattern: |
      $OBJ.length
  message: Layer7 Denial of Service. Looping over user controlled objects can result
    in DoS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
- id: contrib.nodejsscan.exec_os_command.generic_os_command_exec2
  patterns:
  - pattern-inside: |
      var {$EXEC} = require('child_process');
      ...
  - pattern-inside: |
      $APP.$METHOD(..., function $FUNC($REQ, $RES, ...){ ... });
  - pattern-either:
    - pattern: |
        exec(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        exec(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        execSync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        execSync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        exec(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        exec(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        execSync(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        execSync(..., <... $INP ...>, ...);
  message: User controlled data in 'child_process.exec()' can result in Remote OS
    Command Execution.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: contrib.nodejsscan.ssrf_phantomjs.phantom_ssrf
  patterns:
  - pattern-inside: |
      require('phantom');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.open(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.open(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.open(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.open(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.openUrl(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.openUrl(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateJavaScript(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateJavaScript(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.property("content",<... $INPUT ...>,...);
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.property("content",<... $INPUT ...>,...);
  message: |
    If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
- id: contrib.nodejsscan.archive_path_overwrite.zip_path_overwrite
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('unzip');
        ...
    - pattern-inside: |
        $X = require('unzipper');
        ...
  - pattern-inside: |
      $Y.pipe($UNZIP.Parse(...)).on('entry', function $FUNC(...) {
          ...
      }, ...);
  - pattern-not: |
      $X = $FILENAME.indexOf(...);
  - pattern-not: |
      $FUNC.pipe($FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...))));
  - pattern-not: |
      $FUNC.pipe($FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...))));
  - pattern-not: |
      $FUNC.pipe($FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...))));
  - pattern-either:
    - pattern: |
        $FUNC.pipe($FS.createWriteStream($FIL, ...));
    - pattern: |
        $FUNC.pipe($FS.writeFile($FIL, ...));
    - pattern: |
        $FUNC.pipe($FS.writeFileSync($FIL, ...));
  message: Insecure ZIP archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: contrib.nodejsscan.archive_path_overwrite.zip_path_overwrite2
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('unzip');
        ...
    - pattern-inside: |
        $X = require('unzipper');
        ...
  - pattern-inside: |
      $UNZIP.Parse(...).on('entry', function $FUNC($ENTRY) {
          ...
      }, ...);
  - pattern-not: |
      if ($FILENAME.indexOf('..'));
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-either:
    - pattern: |
        $FS.createWriteStream($FIL, ...);
    - pattern: |
        $FS.writeFile($FIL, ...);
    - pattern: |
        $FS.writeFileSync($FIL, ...);
  message: Insecure ZIP archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: contrib.nodejsscan.archive_path_overwrite.admzip_path_overwrite
  patterns:
  - pattern-inside: |
      $X = require('adm-zip');
      ...
  - pattern-not: |
      if ($FILENAME.indexOf('..'));
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-either:
    - pattern: $ZIPENTZ.forEach(function $FUNC($ENTRY, ...) { $FS.createWriteStream(...);
        }, ...);
    - pattern: $ZIPENTZ.forEach(function $FUNC($ENTRY, ...) { $FS.writeFile(...);
        }, ...);
    - pattern: $ZIPENTZ.forEach(function $FUNC($ENTRY, ...) { $FS.writeFileSync(...);
        }, ...);
  message: Insecure ZIP archive extraction using adm-zip can result in arbitrary path
    over write and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: contrib.nodejsscan.archive_path_overwrite.tar_path_overwrite
  patterns:
  - pattern-inside: |
      $X = require('tar-stream');
      ...
  - pattern-not-inside: |
      $Y.pipe($UNZIP.Parse(...)).on('entry', function $FUNC(...) {
          ...
      }, ...);
  - pattern-inside: |
      $EXTRACT.on('entry', function $FUNC(...) {
        ...
      }, ...);
  - pattern-not: |
      if ($FILENAME.indexOf('..'));
  - pattern-not: |
      $FS.createWriteStream($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-not: |
      $FS.writeFile($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-not: |
      $FS.writeFileSync($PATH.join(..., $PATH.basename($FILENAME, ...)));
  - pattern-either:
    - pattern: |
        $FS.createWriteStream($FIL, ...);
    - pattern: |
        $FS.writeFile($FIL, ...);
    - pattern: |
        $FS.writeFileSync($FIL, ...);
  message: Insecure TAR archive extraction can result in arbitrary path over write
    and can result in code injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
- id: contrib.nodejsscan.xpathi_node.node_xpath_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$PARAM ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$PARAM["..."] ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/[\/\/].+/" + $REQ.$PARAM("...") ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/[\/\/].+/" + $REQ["..."] ...>, ...)
    - pattern: |
        $XPATH.parse(<... "=~/[\/\/].+/" + $REQ("...") ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $XPATH.parse(<... "=~/[\/\/].+/" + $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$PARAM ...>;
        ...
        $XPATH.parse(<... "=~/[\/\/].+/" + $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$PARAM["..."] ...>;
        ...
        $XPATH.parse(<... "=~/[\/\/].+/" + $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$PARAM("...") ...>;
        ...
        $XPATH.parse(<... "=~/[\/\/].+/" + $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ["..."] ...>;
        ...
        $XPATH.parse(<... "=~/[\/\/].+/" + $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ("...") ...>;
        ...
        $XPATH.parse(<... "=~/[\/\/].+/" + $INP ...>, ...);
  message: User controlled data in xpath.parse() can result in XPATH injection vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-643: Improper Neutralization of Data within XPath Expressions (''XPath
      Injection'')'
- id: contrib.nodejsscan.xxe_expat.xxe_expat
  patterns:
  - pattern-inside: |
      require('node-expat');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern-inside: |
        $PARSER = new $EXPAT.Parser(...);
        ...
    - pattern-inside: |
        $PARSER = new Parser(...);
        ...
  - pattern-either:
    - pattern: $PARSER.parse(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PARSER.parse(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PARSER.parse(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PARSER.parse(<... $INPUT ...>,...);
    - pattern: $PARSER.write(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PARSER.write(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PARSER.write(<... $INPUT ...>,...);
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PARSER.write(<... $INPUT ...>,...);
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
  severity: ERROR
  languages:
  - javascript
- id: contrib.nodejsscan.exec_shelljs.shelljs_os_command_exec
  patterns:
  - pattern-inside: |
      require('shelljs');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $EXEC.exec(<... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $EXEC.exec( <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $EXEC.exec(<... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $EXEC.exec(<... $INP ...>, ...);
  message: User controlled data in 'shelljs.exec()' can result in Remote OS Command
    Execution.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
- id: contrib.nodejsscan.path_traversal.generic_path_traversal
  patterns:
  - pattern-either:
    - pattern-inside: |
        require('http');
        ...
    - pattern-inside: |
        require('express');
        ...
    - pattern-inside: |
        require('koa');
        ...
    - pattern-inside: |
        require('electron');
        ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $X.createReadStream(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.createReadStream(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.readFile(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.readFile(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.readFileSync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.readFileSync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $X.readFileAsync(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $X.readFileAsync(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY.$VAR ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...);
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.createReadStream(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFile(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileSync(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY.$VAR;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...);
    - pattern: |
        $Y = $REQ.$QUERY;
        ...
        $INP = <... $Y ...>;
        ...
        $X.readFileAsync(..., <... $INP ...>, ...);
  message: Untrusted user input in readFile()/readFileSync() can endup in Directory
    Traversal Attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-23: Relative Path Traversal'
- id: contrib.nodejsscan.jwt_none_algorithm.node_jwt_none_algorithm
  patterns:
  - pattern-either:
    - pattern: |
        $JWT = require("jsonwebtoken");
        ...
        $T = $JWT.verify($P, $X, {algorithms:[...,'none',...]},...);
    - pattern: |
        $JWT = require("jsonwebtoken");
        ...
        $JWT.verify($P, $X, {algorithms:[...,'none',...]},...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWK, JWT } = $JOSE;
        ...
        $T = JWT.verify($P, JWK.None,...);
    - pattern: |
        $JOSE = require("jose");
        ...
        var { JWK, JWT } = $JOSE;
        ...
        JWT.verify($P, JWK.None,...);
  message: Algorithm is set to none for JWT token. This can nullify the integrity
    of JWT signature.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A9: Using Components with Known Vulnerabilities'
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
- id: contrib.nodejsscan.hardcoded_passport.hardcoded_passport_secret
  pattern-either:
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-auth0").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      new $F({secretOrKey: "..."}, ...);
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $P.secretOrKey = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $P = {secretOrKey: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      new $F({secretOrKey: $S}, ...);
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P.secretOrKey = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-jwt").Strategy;
      ...
      $S = "...";
      ...
      $P = {secretOrKey: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-google-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth2").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      new $F({clientSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $P.clientSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $P = {clientSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      new $F({clientSecret: $S}, ...);
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P.clientSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-facebook").Strategy;
      ...
      $S = "...";
      ...
      $P = {clientSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-twitter").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      new $F({consumerSecret: "..."}, ...);
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $P.consumerSecret = "...";
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $P = {consumerSecret: "..."};
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      new $F({consumerSecret: $S}, ...);
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P.consumerSecret = $S;
      ...
      new $F($P, ...);
  - pattern: |
      $F = require("passport-oauth1").Strategy;
      ...
      $S = "...";
      ...
      $P = {consumerSecret: $S};
      ...
      new $F($P, ...);
  message: Hardcoded plain text secret used for Passport Strategy. Store it properly
    in an environment variable.
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
  languages:
  - javascript
  severity: ERROR
- id: contrib.nodejsscan.eval_require.eval_require
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = <... $REQ.$QUERY ...>;
        ...
        require(<... $INP ...>);
    - pattern: |
        $INP = <... $REQ.$QUERY.$FOO ...>;
        ...
        require(<... $INP ...>);
    - pattern: require(<... $REQ.$QUERY.$FOO ...>)
    - pattern: require(<... $REQ.$BODY ...>)
  message: Untrusted user input in `require()` function allows an attacker to load
    arbitrary code.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
- id: contrib.nodejsscan.header_helmet_disabled.helmet_feature_disabled
  patterns:
  - pattern-either:
    - pattern: |
        $HELMET(..., {frameguard: false}, ...)
    - pattern: |
        $HELMET(..., {contentSecurityPolicy: false}, ...)
    - pattern: |
        $HELMET(..., {permittedCrossDomainPolicies: false}, ...)
    - pattern: |
        $HELMET(..., {dnsPrefetchControl: false}, ...)
    - pattern: |
        $HELMET(..., {expectCt: false}, ...)
    - pattern: |
        $HELMET(..., {featurePolicy: false}, ...)
    - pattern: |
        $HELMET(..., {hsts: false}, ...)
    - pattern: |
        $HELMET(..., {ieNoOpen: false}, ...)
    - pattern: |
        $HELMET(..., {noSniff: false}, ...)
    - pattern: |
        $HELMET(..., {hidePoweredBy: false}, ...)
    - pattern: |
        $HELMET(..., {referrerPolicy: false}, ...)
    - pattern: |
        $HELMET(..., {xssFilter: false}, ...)
  message: One or more Security Response header is explicitly disabled in Helmet.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: contrib.nodejsscan.xss_templates.handlebars_safestring
  pattern-either:
  - pattern: $X.SafeString(...)
  - pattern: new Handlebars.SafeString(...)
  message: Handlebars SafeString will not escape the data passed through it. Untrusted
    user input passing through SafeString can cause XSS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
- id: contrib.nodejsscan.xss_templates.handlebars_noescape
  patterns:
  - pattern: |
      $X.compile(..., {noEscape: true}, ...)
  message: Disabling Escaping in Handlebars is not a secure behaviour. This can introduce
    XSS vulnerabilties.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page
      (Basic XSS)'
- id: contrib.nodejsscan.xss_templates.squirrelly_autoescape
  pattern: $X.autoEscaping(false)
  message: Handlebars SafeString will not escape the data passed through it. Untrusted
    user input passing through SafeString can cause XSS.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
- id: contrib.nodejsscan.header_cors_star.generic_cors
  patterns:
  - pattern: |
      $APP.options('*', cors(...))
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: contrib.nodejsscan.header_xss_protection.header_xss_lusca
  patterns:
  - pattern-inside: |
      $X = require('lusca');
      ...
  - pattern-not: |
      $X.use(helmet())
  - pattern-either:
    - pattern: |
        $X.xssProtection(false)
    - pattern: |
        $X({ xssProtection: false})
  message: X-XSS-Protection header is set to 0. This will disable the browser's XSS
    Filter.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.possible.import.statements
  message: |
    Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    source-rule-url: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  severity: INFO
  patterns:
  - pattern-either:
    - pattern: import org.apache.commons.httpclient.HttpClient;
    - pattern: import com.squareup.okhttp.OkHttpClient;
    - pattern: import org.apache.http.client.fluent.Request;
    - pattern: import org.apache.http.client.methods.HttpGet;
    - pattern: import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
    - pattern: import org.jsoup.Jsoup;
    - pattern: import javax.imageio.ImageIO;
    - pattern: import java.net.URI;
    - pattern: import java.net.URL;
  languages:
  - java
- id: contrib.nodejsscan.xxe_xml2json.xxe_xml2json
  patterns:
  - pattern-inside: |
      require('xml2json');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $EXPAT.toJson(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $EXPAT.toJson(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $EXPAT.toJson(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $EXPAT.toJson(<... $INPUT ...>,...);
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
  severity: ERROR
  languages:
  - javascript
- id: contrib.nodejsscan.eval_yaml_deserialize.yaml_deserialize
  patterns:
  - pattern-inside: |
      require('js-yaml');
      ...
  - pattern: |
      $X.load(...)
  message: User controlled data in 'yaml.load()' function can result in Remote Code
    Injection.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
- id: contrib.nodejsscan.header_cookie.cookie_session_default
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {name:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.name = ...;
      ...
      $SESSION($OPTS,...);
  message: Consider changing the default session cookie name. An attacker can use
    it to fingerprint the server and target attacks accordingly.
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.header_cookie.cookie_session_no_secure
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{secure:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.secure = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.secure = true;
      ...
      $SESSION($OPTS,...);
  message: 'Default session middleware settings: `secure` not set. It ensures the
    browser only sends the cookie over HTTPS.'
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.header_cookie.cookie_session_no_samesite
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{sameSite:true}} ...>,...)
  - pattern-not-inside: $SESSION(<... {cookie:{sameSite:'lax'}} ...>,...)
  - pattern-not-inside: $SESSION(<... {cookie:{sameSite:'strict'}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{sameSite:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {sameSite:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {sameSite:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.sameSite = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.sameSite = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = <... {cookie:{sameSite:'strict'}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {sameSite:'strict'} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {sameSite:'strict'} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.sameSite = 'strict';
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.sameSite = 'strict';
      ...
      $SESSION($OPTS,...);
  message: 'Default session middleware settings: `sameSite` attribute is not configured
    to strict or lax. These configurations provides protection against Cross Site
    Request Forgery attacks.'
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: python.lang.compatibility.python36.python36-compatibility-Popen1
  pattern: subprocess.Popen(errors=$X, ...)
  message: the `errors` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
- id: contrib.nodejsscan.header_cookie.cookie_session_no_httponly
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{httpOnly:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{httpOnly:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {httpOnly:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {httpOnly:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.httpOnly = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.httpOnly = true;
      ...
      $SESSION($OPTS,...);
  message: 'Default session middleware settings: `httpOnly` not set. It ensures the
    sensitive cookies cannot be accessed by client side JavaScript and helps to protect
    against cross-site scripting attacks.'
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.header_cookie.cookie_session_no_domain
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{domain:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.domain = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.domain = ...;
      ...
      $SESSION($OPTS,...);
  message: 'Default session middleware settings: `domain` not set. It indicates the
    domain of the cookie; use it to compare against the domain of the server in which
    the URL is being requested. If they match, then check the path attribute next.'
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.header_cookie.cookie_session_no_path
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{path:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.path = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.path = ...;
      ...
      $SESSION($OPTS,...);
  message: 'Default session middleware settings: `path` not set. It indicates the
    path of the cookie; use it to compare against the request path. If this and domain
    match, then send the cookie in the request.'
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: contrib.nodejsscan.header_cookie.cookie_session_no_expires
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{expires:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{expires:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {expires:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {expires:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.expires = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |-
      $OPTS = ...;
      ...
      $OPTS.cookie.expires = ...;
      ...
      $SESSION($OPTS,...);
  message: 'Default session middleware settings: `expires` not set. Use it to set
    expiration date for persistent cookies.'
  severity: INFO
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
- id: python.lang.compatibility.python36.python36-compatibility-Popen2
  pattern: subprocess.Popen(encoding=$X, ...)
  message: the `encoding` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
- id: contrib.nodejsscan.header_injection.generic_header_injection
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $INP = $REQ.$QUERY;
        ...
        $RES.set(..., <... $INP ...>, ...);
    - pattern: |
        $INP = $REQ.$QUERY.$VAR;
        ...
        $RES.set(..., <... $INP ...>, ...);
    - pattern: |
        $INP = $REQ.$VAR;
        ...
        $RES.set(..., { $X: <... $INP ...>}, ...);
    - pattern: |
        $INP = $REQ.$QUERY.$FOO;
        ...
        $RES.set(..., { $X: <... $INP ...>}, ...);
    - pattern: |
        $INP = $REQ.$VAR;
        ...
        $RES.writeHead(..., { $X: <... $INP ...> }, ...);
    - pattern: |
        $INP = $REQ.$QUERY.$FOO;
        ...
        $RES.writeHead(..., { $X: <... $INP ...> }, ...);
    - pattern: |
        $RES.set(..., <... $REQ.$QUERY ...>, ...)
    - pattern: |
        $RES.set(..., <... $REQ.$QUERY.$VAR ...>, ...)
    - pattern: |
        $RES.set(..., { $X: <... $REQ.$VAR ...>}, ...)
    - pattern: |
        $RES.set(..., { $X: <... $REQ.$QUERY.$FOO ...>}, ...);
    - pattern: |
        $RES.writeHead(..., { $X: <... $REQ.$VAR ...> }, ...);
    - pattern: |
        $RES.writeHead(..., { $X: <... $REQ.$QUERY.$FOO ...> }, ...);
  message: Untrusted user input in response header will result in HTTP Header Injection
    or Response Splitting Attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax'
- id: contrib.nodejsscan.ssrf_puppeteer.puppeteer_ssrf
  patterns:
  - pattern-inside: |
      require('puppeteer');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);
  message: If unverified user data can reach the `puppeteer` methods it can result
    in Server-Side Request Forgery vulnerabilities.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
- id: contrib.nodejsscan.eval_vm2_injection.vm2_code_injection
  patterns:
  - pattern-inside: |
      require('vm2');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.run(<... $CODE ...>,...);
    - pattern: |
        new VM(...).run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        new NodeVM(...).run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new NodeVM(...).run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VMScript(<... $CODE ...>,...);
    - pattern: |
        $VM.run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $VM.run(<... $CODE ...>,...);
    - pattern: |
        new VM(...).run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new VM(...).run($CODE,...);
    - pattern: |
        new NodeVM(...).run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new NodeVM(...).run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new VMScript(<... $CODE ...>,...);
  message: Untrusted user input reaching `vm2` can result in code injection.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.eval_vm2_injection.vm2_context_injection
  patterns:
  - pattern-inside: |
      require('vm2');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        new VM({sandbox: <... $REQ.$QUERY.$FOO ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        new NodeVM({sandbox: <... $REQ.$QUERY.$FOO ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        new VM({sandbox: <... $REQ.$BODY ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$BODY ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        new NodeVM({sandbox: <... $REQ.$BODY ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$BODY ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |-
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
  message: Untrusted user input reaching `vm2` sandbox can result in context injection.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
- id: contrib.nodejsscan.xss_node.express_xss
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $RES.write(..., <... $REQ.$QUERY ...>, ...);
    - pattern: |
        $RES.write(..., <... $REQ.$QUERY.$FOO ...>, ...);
    - pattern: |
        $RES.send(..., <... $REQ.$QUERY ...>, ...);
    - pattern: |
        $RES.send(..., <... $REQ.$QUERY.$FOO ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$VAR ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        var {$LOCALVAR} = <... $REQ.$QUERY.$FOO ...>;
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        var {$LOCALVAR} = <... $REQ.$QUERY.$VAR ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        var {$LOCALVAR} = <... $REQ.$QUERY ...>;
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR = {$KEY: <... $REQ.$QUERY ...>};
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR =  {$KEY: <... $REQ.$QUERY.$FOO ...>};
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR = {$KEY: <... $REQ.$QUERY.$VAR ...>};
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR =  {$KEY: <... $REQ.$QUERY ...>};
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY ...>);
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY.$FOO ...>);
        ...
        $RES.write(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY.$VAR ...>);
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR.push(<... $REQ.$QUERY ...>);
        ...
        $RES.send(..., <... $LOCALVAR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>);
        ...
        $RES.write(..., <... $ARR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>);
        ...
        $RES.write(..., <... $ARR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$VAR ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>);
        ...
        $RES.send(..., <... $ARR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $ARR.push(<... $LOCALVAR ...>);
        ...
        $RES.send(..., <... $ARR ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.write(..., <... $OUT ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.write(..., <... $OUT ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY.$VAR ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.send(..., <... $OUT ...>, ...);
    - pattern: |
        $LOCALVAR = <... $REQ.$QUERY ...>;
        ...
        $OUT = <... $LOCALVAR ...>;
        ...
        $RES.send(..., <... $OUT ...>, ...);
  message: Untrusted User Input in Response will result in Reflected Cross Site Scripting
    Vulnerability.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
- id: python.jinja2.security.audit.autoescape-disabled.autoescape-disabled
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...),
      ...)
  - pattern: jinja2.Environment(...)
  fix-regex:
    regex: (.*)\)
    replacement: \1, autoescape=True)
  message: Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape
    by default. This is dangerous if you are rendering to a browser because this allows
    for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping
    by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()'
    to only enable automatic escaping for certain file extensions.
  metadata:
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://jinja.palletsprojects.com/en/2.11.x/api/#basics
  languages:
  - python
  severity: WARNING
- id: python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L94
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://crypto.stackexchange.com/questions/853/google-is-using-rc4-but-isnt-rc4-considered-unsafe
    - https://sweet32.info/
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L96
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://sweet32.info/
  severity: WARNING
  languages:
  - python
- id: python.bokeh.maintainability.deprecated.deprecated_apis.bokeh-deprecated-apis
  message: |
    These APIs are deprecated in Bokeh see https://docs.bokeh.org/en/latest/docs/releases.html#api-deprecations
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      import bokeh.layouts.widgetbox
  - pattern: |
      import bokeh.models.graphs.from_networkx
- id: python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  message: |
    Detected IDEA cipher algorithm which is considered insecure. The algorithm is
    considered weak and has been deprecated. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://tools.ietf.org/html/rfc5469
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP,
        $SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: |
    Detected an insufficient key size for RSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
  languages:
  - python
  severity: WARNING
- id: python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,
        ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: |
    Detected an insufficient key size for DSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
  languages:
  - python
  severity: WARNING
- id: python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.ec.SECP192R1
    - pattern: cryptography.hazmat.primitives.asymmetric.ec.SECT163K1
    - pattern: cryptography.hazmat.primitives.asymmetric.ec.SECT163R2
  message: |
    Detected an insufficient curve size for EC. NIST recommends
    a key size of 224 or higher. For example, use 'ec.SECP256R1'.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    - https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves
  languages:
  - python
  severity: WARNING
- id: python.requests.best-practice.use-response-json-shortcut.python.requests.best-practice.use-response-json-shortcut
  patterns:
  - pattern-inside: import json; ...
  - pattern-inside: import requests; ...
  - pattern-inside: $RESP = requests.$METHOD(...); ...
  - pattern: json.loads($RESP.text)
  fix: $RESP.json()
  message: |
    The requests library has a convenient shortcut for reading JSON responses,
    which lets you stop worrying about deserializing the response yourself.
  severity: WARNING
  metadata:
    references:
    - https://requests.readthedocs.io/en/stable/user/quickstart/#json-response-content
  languages:
  - python
- id: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B303
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
  pattern: cryptography.hazmat.primitives.hashes.SHA1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B303
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  message: |
    Detected ECB cipher mode which is considered insecure. The algorithm can
    potentially leak information about the plaintext. Use CBC mode instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B305
    references:
    - https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption
  severity: WARNING
  languages:
  - python
- id: python.requests.best-practice.use-request-json-shortcut.python.requests.best-practice.use-request-json-shortcut
  patterns:
  - pattern-inside: import json; ...
  - pattern-inside: import requests; ...
  - pattern: requests.$METHOD(..., body=json.dumps($BODY), ...)
  message: |
    The requests library has a convenient shortcut for sending JSON requests,
    which lets you stop worrying about serializing the body yourself.
    To use it, replace `body=json.dumps(...)` with `json=...`.
  severity: WARNING
  metadata:
    references:
    - https://requests.readthedocs.io/en/stable/user/quickstart/#more-complicated-post-requests
  languages:
  - python
- id: python.sqlalchemy.performance.performance-improvements.len-all-count
  pattern: len($X.all())
  message: Using QUERY.count() instead of len(QUERY.all()) sends less data to the
    client since the SQLAlchemy method is performed server-side.
  languages:
  - python
  severity: WARNING
- id: python.requests.best-practice.use-timeout.use-timeout
  patterns:
  - pattern-not: requests.$W(..., timeout=$N, ...)
  - pattern-not: requests.$W(..., **$KWARGS)
  - pattern-either:
    - pattern: requests.request(...)
    - pattern: requests.get(...)
    - pattern: requests.post(...)
    - pattern: requests.put(...)
    - pattern: requests.delete(...)
    - pattern: requests.head(...)
    - pattern: requests.patch(...)
  fix-regex:
    regex: (.*)\)
    replacement: \1, timeout=30)
  message: |
    By default, 'requests' calls wait until the connection is closed.
    This means a 'requests' call without a timeout will hang the program
    if a response is never received. Consider setting a timeout for all
    'requests'.
  languages:
  - python
  severity: WARNING
- id: python.requests.best-practice.use-raise-for-status.use-raise-for-status
  patterns:
  - pattern-either:
    - pattern: requests.request(...)
    - pattern: requests.get(...)
    - pattern: requests.post(...)
    - pattern: requests.put(...)
    - pattern: requests.delete(...)
    - pattern: requests.head(...)
    - pattern: requests.patch(...)
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      $RESP.raise_for_status(...)
  - pattern-not-inside: |
      requests.$METHOD(...).raise_for_status(...)
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      if $RESP.status_code == ...:
        ...
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      if $RESP.status_code != ...:
        ...
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      ...
      if $RESP.ok:
        ...
  - pattern-not-inside: |
      $RESP = requests.$METHOD(...)
      ...
      if not $RESP.ok:
        ...
  message: |-
    There's an HTTP request made with requests,
    but the raise_for_status() utility method isn't used.
    This can result in request errors going unnoticed
    and your code behaving in unexpected ways,
    such as if your authorization API returns a 500 error
    while you're only checking for a 401.
  metadata:
    references:
    - https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status
  severity: WARNING
  languages:
  - python
- id: python.django.best-practice.json_response.use-json-response
  patterns:
  - pattern-inside: |
      def $X(...):
        ...
  - pattern-either:
    - pattern: |
        $Y = json.dumps(...)
        ...
        django.http.HttpResponse($Y, ...)
  message: Use JsonResponse instead
  languages:
  - python
  severity: ERROR
- id: python.django.correctness.string-field-null-checks.no-null-string-field
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-not: $F = django.db.models.CharField(..., null=True, unique=True, blank=True,
      ...)
  - pattern-not: $F = django.db.models.TextField(..., null=True, unique=True, blank=True,
      ...)
  - pattern-either:
    - pattern: $F = django.db.models.CharField(..., null=True, ...)
    - pattern: $F = django.db.models.TextField(..., null=True, ...)
  message: |
    Avoid using null on string-based fields such as CharField and TextField. If a string-based field
    has null=True, that means it has two possible values for "no data": NULL, and the empty string. In
    most cases, it's redundant to have two possible values for "no data;" the Django convention is to
    use the empty string, not NULL.
  languages:
  - python
  severity: WARNING
- id: python.django.correctness.string-field-null-checks.string-field-must-set-null-true
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-not: $F = django.db.models.CharField(..., unique=True, blank=True, null=True,
      ...)
  - pattern-not: $F = django.db.models.TextField(..., unique=True, blank=True, null=True,
      ...)
  - pattern-either:
    - pattern: $F = django.db.models.CharField(..., unique=True, blank=True, ...)
    - pattern: $F = django.db.models.TextField(..., unique=True, blank=True, ...)
  message: If a text field declares unique=True and blank=True, null=True must also
    be set to avoid unique constraint violations when saving multiple objects with
    blank values.
  languages:
  - python
  severity: ERROR
- id: python.django.correctness.use-decimalfield-for-money.use-decimalfield-for-money
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern: $F = django.db.models.FloatField(...)
  - metavariable-regex:
      metavariable: $F
      regex: .*(price|amount|subtotal|donation|fee|salary|precio).*
  message: Found a FloatField used for variable $F. Use DecimalField for currency
    fields to avoid float-rounding errors.
  languages:
  - python
  severity: ERROR
- id: python.django.best-practice.use-onetoonefield.use-onetoonefield
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern: $F = django.db.models.ForeignKey(..., unique=True, ...)
  message: |
    Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True.
    'OneToOneField' is used to create one-to-one relationships.
  languages:
  - python
  severity: WARNING
- id: python.django.best-practice.upsell_django_environ.use-django-environ
  patterns:
  - pattern-not: |
      ...
      import environ
      ...
  - pattern-either:
    - pattern: |
        import django
        ...
        import os
        ...
        $FOO = $M.environ[...]
    - pattern: |
        import os
        ...
        import django
        ...
        $FOO = $M.environ[...]
  message: You are using environment variables inside django app. Use `django-environ`
    as it a better alternative for deployment.
  languages:
  - python
  severity: ERROR
- id: python.django.security.injection.open-redirect.open-redirect
  message: |
    Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited.
    Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().
    See https://cwe.mitre.org/data/definitions/601.html for more information.
  metadata:
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    references:
    - https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/
    - https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-not-inside: |
      def $FUNC(...):
        ...
        django.utils.http.is_safe_url(...)
        ...
  - pattern-not-inside: |
      def $FUNC(...):
        ...
        if <... django.utils.http.is_safe_url(...) ...>:
          ...
  - pattern-either:
    - pattern: django.shortcuts.redirect(..., request.$W.get(...), ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W.get(...), ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W.get(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W.get(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: return django.shortcuts.redirect(..., request.$W.get(...), ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W.get(...), ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.shortcuts.redirect(..., request.$W(...), ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...),
        ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W(...), ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W(...)}...", ...)
    - pattern: return django.shortcuts.redirect(..., request.$W(...), ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W(...), ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W(...)}...", ...)
    - pattern: django.shortcuts.redirect(..., request.$W[...], ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...),
        ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W[...], ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W[...], ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W[...], ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W[...]}...", ...)
    - pattern: return django.shortcuts.redirect(..., request.$W[...], ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W[...], ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W[...]}...", ...)
    - pattern: django.shortcuts.redirect(..., request.$W, ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W, ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W, ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W, ...),
        ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W, ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W}...", ...)
    - pattern: return django.shortcuts.redirect(..., request.$W, ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W, ...),
        ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W, ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W}...", ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W.get(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W.get(...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W.get(...),
        ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W.get(...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W.get(...),
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W(...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W(...)}...",
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W(...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W(...),
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W[...], ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W[...], ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W[...]}...",
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W[...], ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W[...],
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W, ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...),
        ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W, ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W}...", ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W, ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W, ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W}...",
        ...)
  - metavariable-regex:
      metavariable: $W
      regex: (?!get_full_path)
- id: python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse
  message: Found request data reflected into HttpResponse. This could be vulnerable
    to XSS. Ensure the request data is properly escaped or sanitzed.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W.get(...), ...),
        ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W.get(...), ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W.get(...)}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W.get(...), ...)
    - pattern: return django.http.HttpResponse(..., request.$W.get(...), ...)
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W(...), ...),
        ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W(...), ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W(...)}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W(...), ...)
    - pattern: return django.http.HttpResponse(..., request.$W(...), ...)
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W[...], ...),
        ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W[...], ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W[...]}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W[...], ...)
    - pattern: return django.http.HttpResponse(..., request.$W[...], ...)
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W, ...), ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W, ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $A = django.http.HttpResponse(..., $INTERM, ...)
    - pattern: return django.http.HttpResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
- id: python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest
  message: Found request data reflected into HttpResponseBadRequest. This could be
    vulnerable to XSS. Ensure the request data is properly escaped or sanitzed.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W.get(...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W.get(...),
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W(...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W(...), ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W(...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W[...], ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W[...], ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W[...], ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W, ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W}...", ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W, ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W, ...)
- id: python.django.security.injection.request-data-fileresponse.request-data-fileresponse
  message: Found request data opening a file into FileResponse. This is dangerous
    because an attacker could specify an arbitrary file to read, leaking data. Be
    sure to validate or sanitize the filename before using it in FileResponse.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A1: Injection'
    references:
    - https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.http.FileResponse(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W.get(...), ...)
    - pattern: return django.http.FileResponse(..., request.$W.get(...), ...)
    - pattern: django.http.FileResponse(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W(...), ...)
    - pattern: return django.http.FileResponse(..., request.$W(...), ...)
    - pattern: django.http.FileResponse(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W[...], ...)
    - pattern: return django.http.FileResponse(..., request.$W[...], ...)
    - pattern: django.http.FileResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W, ...)
    - pattern: return django.http.FileResponse(..., request.$W, ...)
- id: python.django.security.audit.xss.global-autoescape-off.global-autoescape-off
  message: |
    Autoescape is globally disbaled for this Django application. If you are
    rendering any web pages, this exposes your application to cross-site
    scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it
    to 'True'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
  languages:
  - python
  severity: WARNING
  pattern: |
    {..., 'BACKEND': ..., 'OPTIONS': {..., 'autoescape': False, ...}, ...}
  fix-regex:
    regex: (autoescape.*?)False
    replacement: \1True
- id: python.django.security.injection.code.user-exec.user-exec
  message: |
    Found user data in a call to 'exec'. This is extremely dangerous because
    it can enable an attacker to execute remote code. See
    https://owasp.org/www-community/attacks/Code_Injection for more information.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: exec(..., request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., $V, ...)
    - pattern: exec(..., request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., $V, ...)
    - pattern: exec(..., request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., $V, ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.code.user-exec-format-string.user-exec-format-string
  message: |
    Found user data in a call to 'exec'. This is extremely dangerous because
    it can enable an attacker to execute remote code. See
    https://owasp.org/www-community/attacks/Code_Injection for more information.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: exec(..., $STR % request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR % $V
        ...
        exec(..., $S, ...)
    - pattern: exec(..., "..." % request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR % $V
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR % request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR % $V
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR.format(..., request.$W.get(...), ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR.format(..., request.$W(...), ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR.format(..., request.$W[...], ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR.format(..., $V, ...)
        ...
        exec(..., $S, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = f"...{$V}..."
        ...
        exec(..., $S, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = f"...{$V}..."
        ...
        exec(..., $S, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = f"...{$V}..."
        ...
        exec(..., $S, ...)
    - pattern: exec(..., base64.decodestring($S.format(..., request.$W.get(...), ...),
        ...), ...)
    - pattern: exec(..., base64.decodestring($S % request.$W.get(...), ...), ...)
    - pattern: exec(..., base64.decodestring(f"...{request.$W.get(...)}...", ...),
        ...)
    - pattern: exec(..., base64.decodestring(request.$W.get(...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes($S.format(..., request.$W.get(...),
        ...), ...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes($S % request.$W.get(...), ...),
        ...), ...)
    - pattern: exec(..., base64.decodestring(bytes(f"...{request.$W.get(...)}...",
        ...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes(request.$W.get(...), ...), ...),
        ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.code.user-eval.user-eval
  message: |
    Found user data in a call to 'eval'. This is extremely dangerous because
    it can enable an attacker to execute remote code. See
    https://owasp.org/www-community/attacks/Code_Injection for more information
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: eval(..., request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., $V, ...)
    - pattern: eval(..., request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., $V, ...)
    - pattern: eval(..., request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., $V, ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.code.user-eval-format-string.user-eval-format-string
  message: |
    Found user data in a call to 'eval'. This is extremely dangerous because
    it can enable an attacker to execute remote code. See
    https://owasp.org/www-community/attacks/Code_Injection for more information.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: eval(..., $STR % request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR % $V
        ...
        eval(..., $S, ...)
    - pattern: eval(..., "..." % request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR % $V
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR % request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR % $V
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR.format(..., request.$W.get(...), ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR.format(..., request.$W(...), ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR.format(..., request.$W[...], ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR.format(..., $V, ...)
        ...
        eval(..., $S, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = f"...{$V}..."
        ...
        eval(..., $S, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = f"...{$V}..."
        ...
        eval(..., $S, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = f"...{$V}..."
        ...
        eval(..., $S, ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where
  message: Data from request is passed to extra(). This is a SQL injection and could
    be exploited. See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra
    to learn how to mitigate. See https://cwe.mitre.org/data/definitions/89.html to
    learn about SQLi.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W.get(...),
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W.get(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W.get(...)}...",
        ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...],
        ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W(...),
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W(...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W(...)}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W[...],
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W[...], ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W[...]}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W[...], ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W, ...),
        ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W, ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
- id: python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw
  message: Data from request is passed to raw(). This is a SQL injection and could
    be exploited. See https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    to learn how to mitigate. See https://cwe.mitre.org/data/definitions/89.html to
    learn about SQLi.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W.get(...), ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W.get(...)}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: return $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W(...), ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W(...)}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: return $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W[...], ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W[...]}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: return $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W, ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W, ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W, ...)
    - pattern: return $MODEL.objects.raw(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
- id: python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql
  message: Data from request is passed to RawSQL(). This is a SQL injection and could
    be exploited. See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL
    to learn how to mitigate. See https://cwe.mitre.org/data/definitions/89.html to
    learn about SQLi.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W.get(...),
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W.get(...),
        ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W.get(...),
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W(...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W[...], ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W, ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W}...", ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
- id: python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute
  message: Data from request is passed to execute(). This is a SQL injection and could
    be exploited. See https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    to learn how to mitigate. See https://cwe.mitre.org/data/definitions/89.html to
    learn about SQLi.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W.get(...), ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W.get(...)}...", ...)
    - pattern: $CURSOR.execute(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W.get(...), ...)
    - pattern: return $CURSOR.execute(..., request.$W.get(...), ...)
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W(...), ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W(...)}...", ...)
    - pattern: $CURSOR.execute(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W(...), ...)
    - pattern: return $CURSOR.execute(..., request.$W(...), ...)
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W[...], ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W[...]}...", ...)
    - pattern: $CURSOR.execute(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W[...], ...)
    - pattern: return $CURSOR.execute(..., request.$W[...], ...)
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W, ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W, ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W}...", ...)
    - pattern: $CURSOR.execute(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W, ...)
    - pattern: return $CURSOR.execute(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
- id: python.django.security.injection.email.xss-html-email-body.xss-html-email-body
  message: |
    Found request data in an EmailMessage that is set to use HTML.
    This is dangerous because HTML emails are susceptible to XSS.
    An attacker could inject data into this HTML email, causing XSS.
  metadata:
    cwe: 'CWE-74: Improper Neutralization of Special Elements in Output Used by a
      Downstream Component (''Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://www.damonkohler.com/2008/12/email-injection.html
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
        $EMAIL.content_subtype = "html"
        ...
  - pattern-either:
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W, ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W, ...)
- id: python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message
  message: |
    Found request data in 'send_mail(...)' that uses 'html_message'.
    This is dangerous because HTML emails are susceptible to XSS.
    An attacker could inject data into this HTML email, causing XSS.
  metadata:
    cwe: 'CWE-74: Improper Neutralization of Special Elements in Output Used by a
      Downstream Component (''Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://www.damonkohler.com/2008/12/email-injection.html
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W.get(...),
        ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W.get(...),
        ...)
    - pattern: django.core.mail.send_mail(..., html_message=request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W(...),
        ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W(...),
        ...)
    - pattern: django.core.mail.send_mail(..., html_message=request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W[...],
        ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W[...],
        ...)
    - pattern: django.core.mail.send_mail(..., html_message=request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W, ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W, ...)
- id: python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join
  message: |
    Data from request is passed to os.path.join() and to open().
    This is a path traversal vulnerability: https://owasp.org/www-community/attacks/Path_Traversal
    To mitigate, consider using os.path.abspath or os.path.realpath or Path library.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-not: |
      ...
      os.path.abspath(...)
      ...
  - pattern-not: |
      ...
      os.path.realpath(...)
      ...
  - pattern-either:
    - pattern: open(os.path.join(..., request.$W.get(...), ...), ...)
    - pattern: open(os.path.join(..., request.$W(...), ...), ...)
    - pattern: open(os.path.join(..., request.$W, ...), ...)
    - pattern: open(os.path.join(..., request.$W[...], ...), ...)
    - pattern: |
        $P = os.path.join(..., request.$W.get(...), ...)
        ...
        open($P, ...)
    - pattern: |
        $P = os.path.join(..., request.$W(...), ...)
        ...
        open($P, ...)
    - pattern: |
        $P = os.path.join(..., request.$W, ...)
        ...
        open($P, ...)
    - pattern: |
        $P = os.path.join(..., request.$W[...], ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W.get($X)
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W($X)
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W[$X]
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $P = request.$W.get(...)
        ...
        open(os.path.join(..., $P, ...), ...)
    - pattern: |
        $P = request.$W(...)
        ...
        open(os.path.join(..., $P, ...), ...)
    - pattern: |
        $P = request.$W
        ...
        open(os.path.join(..., $P, ...), ...)
    - pattern: |
        $P = request.$W[...]
        ...
        open(os.path.join(..., $P, ...), ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open
  message: Found request data in a call to 'open'. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: open(..., request.$W.get(...), ...)
    - pattern: open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: open(..., $S % request.$W.get(...), ...)
    - pattern: open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W.get(...), ...)
    - pattern: $A = open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $A = open(..., $S % request.$W.get(...), ...)
    - pattern: $A = open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: return open(..., request.$W.get(...), ...)
    - pattern: return open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: return open(..., $S % request.$W.get(...), ...)
    - pattern: return open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        with open(..., $DATA, ...) as $FD:
          ...
    - pattern: open(..., request.$W(...), ...)
    - pattern: open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: open(..., $S % request.$W(...), ...)
    - pattern: open(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W(...), ...)
    - pattern: $A = open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $A = open(..., $S % request.$W(...), ...)
    - pattern: $A = open(..., f"...{request.$W(...)}...", ...)
    - pattern: return open(..., request.$W(...), ...)
    - pattern: return open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: return open(..., $S % request.$W(...), ...)
    - pattern: return open(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        with open(..., $DATA, ...) as $FD:
          ...
    - pattern: open(..., request.$W[...], ...)
    - pattern: open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: open(..., $S % request.$W[...], ...)
    - pattern: open(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W[...], ...)
    - pattern: $A = open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $A = open(..., $S % request.$W[...], ...)
    - pattern: $A = open(..., f"...{request.$W[...]}...", ...)
    - pattern: return open(..., request.$W[...], ...)
    - pattern: return open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: return open(..., $S % request.$W[...], ...)
    - pattern: return open(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        with open(..., $DATA, ...) as $FD:
          ...
    - pattern: open(..., request.$W, ...)
    - pattern: open(..., $S.format(..., request.$W, ...), ...)
    - pattern: open(..., $S % request.$W, ...)
    - pattern: open(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W, ...)
    - pattern: $A = open(..., $S.format(..., request.$W, ...), ...)
    - pattern: $A = open(..., $S % request.$W, ...)
    - pattern: $A = open(..., f"...{request.$W}...", ...)
    - pattern: return open(..., request.$W, ...)
    - pattern: return open(..., $S.format(..., request.$W, ...), ...)
    - pattern: return open(..., $S % request.$W, ...)
    - pattern: return open(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        with open(..., $DATA, ...) as $FD:
          ...
- id: python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name
  message: |
    Data from request is passed to a file name `$FILE`.
    This is a path traversal vulnerability: https://owasp.org/www-community/attacks/Path_Traversal
    To mitigate, consider using os.path.abspath or os.path.realpath or Path library.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-not: |
      ...
      os.path.realpath(...)
      ...
  - pattern-not: |
      ...
      os.path.abspath(...)
      ...
  - pattern-either:
    - pattern: |
        $V = request.$W.get($X)
        ...
        $FILE % ($V)
    - pattern: |
        $V = request.$W[$X]
        ...
        $FILE % ($V)
    - pattern: |
        $V = request.$W($X)
        ...
        $FILE % ($V)
    - pattern: |
        $V = request.$W
        ...
        $FILE % ($V)
        # match format use cases
    - pattern: |
        $V = request.$W.get($X)
        ...
        $FILE.format(..., $V, ...)
    - pattern: |
        $V = request.$W[$X]
        ...
        $FILE.format(..., $V, ...)
    - pattern: |
        $V = request.$W($X)
        ...
        $FILE.format(..., $V, ...)
    - pattern: |
        $V = request.$W
        ...
        $FILE.format(..., $V, ...)
  - metavariable-regex:
      metavariable: $FILE
      regex: .*\.(log|zip|txt|csv|xml|html).*
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.command.command-injection-os-system.command-injection-os-system
  message: Request data detected in os.system. This could be vulnerable to a command
    injection and should be avoided. If this must be done, use the 'subprocess' module
    instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection
    for more information.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: os.system(..., request.$W.get(...), ...)
    - pattern: os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: os.system(..., $S % request.$W.get(...), ...)
    - pattern: os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W.get(...), ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $A = os.system(..., $S % request.$W.get(...), ...)
    - pattern: $A = os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: return os.system(..., request.$W.get(...), ...)
    - pattern: return os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: return os.system(..., $S % request.$W.get(...), ...)
    - pattern: return os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: os.system(..., request.$W(...), ...)
    - pattern: os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: os.system(..., $S % request.$W(...), ...)
    - pattern: os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W(...), ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $A = os.system(..., $S % request.$W(...), ...)
    - pattern: $A = os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: return os.system(..., request.$W(...), ...)
    - pattern: return os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: return os.system(..., $S % request.$W(...), ...)
    - pattern: return os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: os.system(..., request.$W[...], ...)
    - pattern: os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: os.system(..., $S % request.$W[...], ...)
    - pattern: os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W[...], ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $A = os.system(..., $S % request.$W[...], ...)
    - pattern: $A = os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: return os.system(..., request.$W[...], ...)
    - pattern: return os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: return os.system(..., $S % request.$W[...], ...)
    - pattern: return os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: os.system(..., request.$W, ...)
    - pattern: os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: os.system(..., $S % request.$W, ...)
    - pattern: os.system(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W, ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: $A = os.system(..., $S % request.$W, ...)
    - pattern: $A = os.system(..., f"...{request.$W}...", ...)
    - pattern: return os.system(..., request.$W, ...)
    - pattern: return os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: return os.system(..., $S % request.$W, ...)
    - pattern: return os.system(..., f"...{request.$W}...", ...)
- id: python.django.security.audit.unvalidated-password.unvalidated-password
  patterns:
  - pattern-not-inside: |
      if <... django.contrib.auth.password_validation.validate_password(...) ...>:
          ...
  - pattern-not-inside: |
      django.contrib.auth.password_validation.validate_password(...)
      ...
  - pattern-not-inside: |
      try:
        ...
        django.contrib.auth.password_validation.validate_password(...)
        ...
      except $EX:
        ...
      ...
  - pattern-not-inside: |
      try:
        ...
        django.contrib.auth.password_validation.validate_password(...)
        ...
      except $EX as $E:
        ...
      ...
  - pattern-not: UserModel().set_password($X)
  - pattern: $MODEL.set_password($X)
  fix: |
    if django.contrib.auth.password_validation.validate_password($X, user=$MODEL):
        $MODEL.set_password($X)
  message: |
    The password on '$MODEL' is being set without validating the password.
    Call django.contrib.auth.password_validation.validate_password() with
    validation functions before setting the password. See
    https://docs.djangoproject.com/en/3.0/topics/auth/passwords/
    for more information.
  metadata:
    cwe: 'CWE-521: Weak Password Requirements'
    owasp: 'A2: Broken Authentication'
    references:
    - https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.avoid-mark-safe.avoid-mark-safe
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern-not: django.utils.safestring.mark_safe("...")
  - pattern: django.utils.safestring.mark_safe(...)
  message: |
    'mark_safe()' is used to mark a string as "safe" for HTML output.
    This disables escaping and could therefore subject the content to
    XSS attacks. Use 'django.utils.html.format_html()' to build HTML
    for rendering instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe
    - https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.csrf-exempt.no-csrf-exempt
  pattern: |
    @django.views.decorators.csrf.csrf_exempt
    def $R(...):
      ...
  message: There is rarely a good reason to use @csrf_exempt as is used for `$R`.
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp: 'A6: Security Misconfiguration'
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql
  languages:
  - python
  message: Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' Ensure
    no user input enters this function because it is susceptible to SQL injection.
    See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql
    for more information.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
  pattern: $EXPRESSION.as_sql(...)
  severity: WARNING
- id: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape
  languages:
  - generic
  severity: INFO
  message: |
    Translated strings will not be escaped when rendered in a template.
    This leads to a vulnerability where translators could include malicious script tags in their translations.
    Consider using `force_escape` to explicitly escape a transalted text.
  patterns:
  - pattern-either:
    - pattern: |
        {% translate ... as $TRANS ... %}
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        {{ ... $TRANS ... }}
    - pattern: |
        {% trans ... as $TRANS ... %}
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        {{ ... $TRANS ... }}
  - pattern-not: |
      {% translate ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... | ... force_escape ... }}
  - pattern-not: |
      {% trans ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... | ... force_escape ... }}
  - pattern-not: |
      {% translate ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {% filter force_escape %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... }}
  - pattern-not: |
      {% trans ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {% filter force_escape %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... }}
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates
    - https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code
- id: python.sqlalchemy.performance.performance-improvements.batch-import
  pattern: |
    for $X in $Y:
      db.session.add($Z)
  message: Rather than adding one element at a time, consider batch loading to improve
    performance.
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.raw-query.avoid-raw-sql
  message: You should be very careful whenever you write raw SQL. Consider using Django
    ORM before raw SQL. See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: $MODEL.objects.raw($QUERY, ...)
  - pattern: django.db.models.expressions.RawSQL(...)
- id: python.django.security.audit.xss.html-magic-method.html-magic-method
  message: |
    The `__html__` method indicates to the Django template engine that the
    value is 'safe' for rendering. This means that normal HTML escaping will
    not be applied to the return value. This exposes your application to
    cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML,
    consider instead using `mark_safe()` which more clearly marks the intent
    to render raw HTML than a class with a magic method.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape
    - https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      class $CLASS(...):
        ...
  - pattern: |
      def __html__(...):
        ...
- id: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape
  languages:
  - generic
  severity: INFO
  message: |
    Translated strings will not be escaped when rendered in a template.
    This leads to a vulnerability where translators could include malicious script tags in their translations.
    Consider using `force_escape` to explicitly escape a translated text.
  patterns:
  - pattern-either:
    - pattern: |
        {% blocktranslate...%}
    - pattern: |
        {% blocktrans...%}
  - pattern-not-inside: |
      {%...filter...force_escape...%}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {%...endfilter...%}
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates
    - https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code
- id: python.django.security.audit.xss.var-in-script-tag.var-in-script-tag
  languages:
  - generic
  severity: ERROR
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For
    Django, you may also consider using the 'json_script' template tag and retrieving
    the data in your script by using the element ID (e.g., `document.getElementById`).
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern: '{{ ... }}'
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
- id: python.django.security.audit.xss.template-translate-no-escape.template-translate-no-escape
  languages:
  - generic
  severity: INFO
  message: |
    Translated strings will not be escaped when rendered in a template.
    This leads to a vulnerability where translators could include malicious script tags in their translations.
    Consider using `force_escape` to explicitly escape a transalted text.
  patterns:
  - pattern-either:
    - pattern: |
        {% translate...%}
    - pattern: |
        {% trans...%}
  - pattern-not: |
      {% translate...as...%}
  - pattern-not: |
      {% trans...as...%}
  - pattern-not-inside: |
      {%...filter...force_escape...%}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {%...endfilter...%}
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates
    - https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code
- id: python.django.security.audit.xss.class-extends-safestring.class-extends-safestring
  message: |
    Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes are
    for bypassing the escaping enging built in to Django and should not be
    used directly. Improper use of this class exposes your application to
    cross-site scripting (XSS) vulnerabilities. If you need this functionality,
    use 'mark_safe' instead and ensure no user data can reach it.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping
    - https://github.com/django/django/blob/f138e75910b1e541686c4dce3d8f467f6fc234cb/django/utils/safestring.py#L11
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      class $CLASS(django.utils.safestring.SafeString):
        ...
  - pattern: |
      class $CLASS(django.utils.safestring.SafeText):
        ...
  - pattern: |-
      class $CLASS(django.utils.safestring.SafeData):
        ...
- id: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe
  message: |
    Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django
    not to apply escaping on the value returned by this filter (although the
    input is escaped). Used improperly, 'is_safe' could expose your application
    to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not
    1) add HTML characters, 2) remove characters, or 3) use external data in
    any way. Consider instead removing 'is_safe' and explicitly marking safe
    content with 'mark_safe()'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection
    - https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping
    - https://stackoverflow.com/questions/7665512/why-use-is-safe
  languages:
  - python
  severity: WARNING
  pattern: |-
    @register.filter(..., is_safe=True, ...)
    def $FILTER(...):
      ...
- id: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse
  message: |
    Detected data rendered directly to the end user via 'HttpResponse'
    or a similar object. This bypasses Django's built-in cross-site scripting
    (XSS) defenses and could result in an XSS vulnerability. Use Django's
    template engine to safely render HTML.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render
    - https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-not: django.http.$ANY("...", ...)
  - pattern-not: django.http.$ANY()
  - pattern-not: django.http.$ANY(..., content=None, ...)
  - pattern-not: django.http.$ANY(status=...)
  - pattern-not: django.http.HttpResponseNotAllowed([...])
  - pattern-either:
    - pattern: django.http.HttpResponse(...)
    - pattern: django.http.HttpResponseBadRequest(...)
    - pattern: django.http.HttpResponseNotFound(...)
    - pattern: django.http.HttpResponseForbidden(...)
    - pattern: django.http.HttpResponseNotAllowed(...)
    - pattern: django.http.HttpResponseGone(...)
    - pattern: django.http.HttpResponseServerError(...)
- id: python.django.security.audit.xss.html-safe.html-safe
  message: |
    `html_safe()` add the `__html__` magic method to the provided class.
    The `__html__` method indicates to the Django template engine that the
    value is 'safe' for rendering. This means that normal HTML escaping will
    not be applied to the return value. This exposes your application to
    cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML,
    consider instead using `mark_safe()` which more clearly marks the intent
    to render raw HTML than a class with a magic method.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#html_safe
    - https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: django.utils.html.html_safe(...)
  - pattern: |
      @django.utils.html.html_safe
      class $CLASS(...):
        ...
- id: python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config
  patterns:
  - pattern-not-inside: |
      REST_FRAMEWORK = {
        ...,
        "DEFAULT_THROTTLE_RATES": ...
      }
  - pattern: |
      REST_FRAMEWORK = ...
  message: |
    Django REST framework configuration is missing default rate-
    limiting options. This could inadvertently allow resource
    starvation or Denial of Service (DoS) attacks. Add
    'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES'
    to add rate-limiting to your application.
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
    references:
    - https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy
  severity: WARNING
  languages:
  - python
- id: python.django.security.audit.django-ratelimit.missing-ratelimit.missing-ratelimit
  patterns:
  - pattern: |
      def $FUNC(..., request, ...):
        ...
  - pattern-not: |
      @ratelimit.decorators.ratelimit(...)
      def $FUNC(..., request, ...):
        ...
  message: |
    Function '$FUNC' is missing a rate-limiting decorator.
    High volume traffic to this function could starve application
    resources. Consider adding rate limiting from a library such
    as 'django-ratelimit'.
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-400: Uncontrolled Resource Consumption'
    references:
    - https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart
  severity: WARNING
  languages:
  - python
- id: python.django.security.audit.templates.debug-template-tag.debug-template-tag
  languages:
  - generic
  severity: WARNING
  message: |
    Detected a debug template tag in a Django template. This dumps
    debugging information to the page when debug mode is enabled.
    Showing debug information to users is dangerous because it may
    reveal information about your environment that malicious actors
    can use to gain access to the system. Remove the debug tag.
  pattern: '{% debug %}'
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-489: Active Debug Code'
    references:
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#debug
    - https://stackoverflow.com/questions/2213977/django-debug-display-all-variables-of-a-page
- id: python.django.security.passwords.password-empty-string.password-empty-string
  message: |
    '$VAR' is the empty string and is being used to set the password on '$MODEL'.
    If you meant to set an unusable password, set the password to None or call
    'set_unusable_password()'.
  metadata:
    cwe: 'CWE-521: Weak Password Requirements'
    owasp: 'A2: Broken Authentication'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password
  patterns:
  - pattern-either:
    - pattern: |
        $MODEL.set_password($EMPTY)
        ...
        $MODEL.save()
    - pattern: |
        $VAR = $EMPTY
        ...
        $MODEL.set_password($VAR)
        ...
        $MODEL.save()
  - metavariable-regex:
      metavariable: $EMPTY
      regex: (\'\'|\"\")
  languages:
  - python
  severity: ERROR
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-signals-weak
  pattern: django.dispatch.signals.Signal.disconnect(..., weak=$X, ...)
  message: The weak argument to django.dispatch.signals.Signal.disconnect() is removed
    in Django 2.0.
  languages:
  - python
  severity: WARNING
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-check-aggregate-support
  pattern: django.db.backends.base.BaseDatabaseOperations.check_aggregate_support(...)
  message: django.db.backends.base.BaseDatabaseOperations.check_aggregate_support()
    is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-extra-forms
  patterns:
  - pattern-either:
    - pattern: from django.forms import extras
    - pattern: from django.forms.extras import $X
    - pattern: from django.forms import extras as $Y
    - pattern: from django.forms.extras import $X as $Y
    - pattern: import django.forms.extras
    - pattern: import django.forms.extras.$X
    - pattern: import django.forms.extras as $Y
    - pattern: import django.forms.extras.$X as $Y
  message: The django.forms.extras package is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-assignment-tag
  patterns:
  - pattern-either:
    - pattern: $X.assignment_tag(...)
    - pattern: assignment_tag(...)
  message: The assignment_tag helper is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
- id: python.django.compatibility.django-2_0-compat.django-compat-2_0-assert-redirects-helper
  patterns:
  - pattern-either:
    - pattern: $X.assertRedirects(..., host=$Y, ...)
    - pattern: assertRedirects(..., host=$Y, ...)
  message: The host argument to assertRedirects is removed in Django 2.0.
  languages:
  - python
  severity: WARNING
- id: python.flask.correctness.same-handler-name.flask-duplicate-handler-name
  pattern: |
    @app.route("...", ...)
    def $R(...):
        ...
    ...
    @app.route("...", ...)
    def $R(...):
        ...
  message: Looks like `$R` is a flask function handler that registered to two different
    routes. This will cause a runtime error
  languages:
  - python
  severity: WARNING
- id: generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token
  pattern-regex: ya29\.[0-9A-Za-z\-_]+
  languages:
  - regex
  message: Google OAuth Access Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: python.flask.correctness.access-request-in-wrong-handler.avoid-accessing-request-in-wrong-handler
  patterns:
  - pattern-inside: |
      @app.route(..., method="GET")
      def $X(...):
        ...
  - pattern-either:
    - pattern: |
        $Y = flask.request.json
    - pattern: |
        $Y = flask.request.form
    - pattern: |
        $Y = flask.request.data
  message: Accessing request object inside a route handle for HTTP GET command will
    throw due to missing request body.
  languages:
  - python
  severity: WARNING
- id: python.flask.best-practice.get-class-method-with-side-effects.flask-class-method-get-side-effects
  patterns:
  - pattern-either:
    - pattern: |
        def get(self,...):
            ...
            $METHOD(...)
    - pattern: |
        def get(self,...):
            ...
            $VAR = $METHOD(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: (?i)(create|update|delete).*
  message: |
    Flask class method GET with side effects
  severity: WARNING
  languages:
  - python
- id: python.flask.best-practice.use-jsonify.use-jsonify
  patterns:
  - pattern-inside: |
      @app.route(...)
      def $X():
        ...
  - pattern-either:
    - pattern: return json.dumps(...)
    - pattern: |
        $DATA = json.dumps(...)
        ...
        return <... $DATA ...>
  fix-regex:
    regex: (json\.){0,1}dumps
    replacement: flask.jsonify
    count: 1
  message: flask.jsonify() is a Flask helper method which handles the correct settings
    for returning JSON from Flask routes
  languages:
  - python
  severity: ERROR
- id: python.flask.security.open-redirect.open-redirect
  patterns:
  - pattern-inside: |
      @$APP.route(...)
      def $X():
        ...
  - pattern-not-inside: |
      ...
      if <... werkzeug.urls.url_parse($V) ...>:
        ...
  - pattern-either:
    - pattern: flask.redirect(<... flask.request.$W.get(...) ...>, ...)
    - pattern: flask.redirect(<... flask.request.$W[...] ...>, ...)
    - pattern: flask.redirect(<... flask.request.$W(...) ...>, ...)
    - pattern: flask.redirect(<... flask.request.$W ...>, ...)
    - pattern: |
        $V = flask.request.$W.get(...)
        ...
        flask.redirect(<... $V ...>, ...)
    - pattern: |
        $V = flask.request.$W[...]
        ...
        flask.redirect(<... $V ...>, ...)
    - pattern: |
        $V = flask.request.$W(...)
        ...
        flask.redirect(<... $V ...>, ...)
    - pattern: |
        $V = flask.request.$W
        ...
        flask.redirect(<... $V ...>, ...)
  message: |
    Data from request is passed to redirect().
    This is an open redirect and could be exploited.
    Consider using 'url_for()' to generate links to known locations.
    If you must use a URL to unknown pages, consider using 'urlparse()'
    or similar and checking if the 'netloc' property is the same as
    your site's host name. See the references for more information.
  metadata:
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    references:
    - https://flask-login.readthedocs.io/en/latest/#login-example
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1
    - https://docs.python.org/3/library/urllib.parse.html#url-parsing
  languages:
  - python
  severity: ERROR
- id: python.flask.security.unescaped-template-extension.unescaped-template-extension
  message: |
    Flask does not automatically escape Jinja templates unless they have
    .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks.
    Use .html, .htm, .xml, or .xhtml for your template extensions.
    See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    for more information.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    source-rule-url: https://pypi.org/project/flake8-flask/
    references:
    - https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    - https://blog.r2c.dev/2020/bento-check-unescaped-template-extensions-in-flask/
    - https://bento.dev/checks/flask/unescaped-file-extension/
  patterns:
  - pattern-not: flask.render_template("=~/.+\.html$/", ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/", ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/", ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.html$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.xml$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.htm$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.xhtml$/", ...)
  - pattern-not: flask.render_template("=~/.+\.html$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.html$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/".format(...), ...)
  - pattern-not: flask.render_template($TEMPLATE)
  - pattern-either:
    - pattern: flask.render_template("...", ...)
    - pattern: flask.render_template($X + "...", ...)
    - pattern: flask.render_template("..." % $Y, ...)
    - pattern: flask.render_template("...".format(...), ...)
  languages:
  - python
  severity: WARNING
- id: python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization
  patterns:
  - pattern-inside: |
      @app.route(...)
      def $X(filename):
        ...
  - pattern-either:
    - pattern: flask.send_file(filename, ...)
  message: Looks like `filename` could flow to `flask.send_file()` function. Make
    sure to properly sanitize filename or use `flask.send_from_directory`
  metadata:
    cwe: 'CWE-73: External Control of File Name or Path'
    owasp: 'A1: Injection'
  languages:
  - python
  severity: WARNING
- id: python.flask.security.insecure-deserialization.insecure-deserialization
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
  message: |
    Detected the use of an insecure deserizliation library in a Flask route. These libraries
    are prone to code execution vulnerabilities. Ensure user data does not enter this function.
    To fix this, try to avoid serializing whole objects. Consider instead using a serializer
    such as JSON.
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-inside: |
      @app.route(...)
      def $X(...):
        ...
  - pattern-not: $MODULE.$FUNC("...")
  - pattern-not: $MODULE.$FUNC(open("...", ...))
  - pattern-either:
    - pattern: pickle.$FUNC(...)
    - pattern: _pickle.$FUNC(...)
    - pattern: cPickle.$FUNC(...)
    - pattern: dill.$FUNC(...)
    - pattern: shelve.$FUNC(...)
    - pattern: yaml.load(...)
- id: generic.dockerfile.correctness.invalid-port.invalid-port
  message: Detected an invalid port number. Valid ports are 0 through 65535.
  severity: ERROR
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3011
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3011
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern-either:
  - patterns:
    - pattern: EXPOSE $PORT
    - metavariable-comparison:
        metavariable: $PORT
        comparison: $PORT > 65535
  - pattern: EXPOSE -$PORT
- id: python.flask.security.xss.audit.template-href-var.template-href-var
  message: Detected a template variable used in an anchor tag with the 'href' attribute.
    This allows a malicious actor to input the 'javascript:' URI and is subject to
    cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL.
    You may also consider setting the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    - https://content-security-policy.com/
  languages:
  - generic
  paths:
    include:
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <a ...>
  - pattern-either:
    - pattern: href = {{ ... }}
    - pattern: href = "{{ ... }}"
    - pattern: href = '{{ ... }}'
  - pattern-not-inside: href = {{ url_for(...) ... }}
  - pattern-not-inside: href = "{{ url_for(...) ... }}"
  - pattern-not-inside: href = '{{ url_for(...) ... }}'
- id: python.flask.security.xss.audit.template-unquoted-attribute-var.template-unquoted-attribute-var
  message: 'Detected a unquoted template variable as an attribute. If unquoted, a
    malicious actor could inject custom JavaScript handlers. To fix this, add quotes
    around the template expression, like this: "{{ expr }}".'
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
  languages:
  - generic
  paths:
    include:
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <$TAG ...>
  - pattern-not-inside: ="..."
  - pattern-not-inside: ='...'
  - pattern: '{{ ... }}'
  fix-regex:
    regex: '{{(.*?)}}'
    replacement: '"{{\1}}"'
- id: python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content
  patterns:
  - patterns:
    - pattern: flask.make_response(...)
    - pattern-not-inside: flask.make_response()
    - pattern-not-inside: flask.make_response("...", ...)
    - pattern-not-inside: |
        flask.make_response({"...": "..."}, ...)
    - pattern-not-inside: flask.make_response(flask.redirect(...), ...)
    - pattern-not-inside: flask.make_response(flask.render_template(...), ...)
    - pattern-not-inside: flask.make_response(flask.jsonify(...), ...)
    - pattern-not-inside: flask.make_response(json.dumps(...), ...)
    - pattern-not-inside: |
        $X = flask.render_template(...)
        ...
        flask.make_response($X, ...)
    - pattern-not-inside: |
        $X = flask.jsonify(...)
        ...
        flask.make_response($X, ...)
    - pattern-not-inside: |
        $X = json.dumps(...)
        ...
        flask.make_response($X, ...)
  message: Be careful with `flask.make_response()`. If this response is rendered onto
    a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()`
    will not autoescape HTML. If you are rendering HTML, write your HTML in a template
    file and use `flask.render_template()` which will take care of escaping. If you
    are returning data from an API, consider using `flask.jsonify()`.
  severity: WARNING
  metadata:
    references:
    - https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11
    - https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response
    - https://flask.palletsprojects.com/en/1.1.x/api/#response-objects
  languages:
  - python
- id: python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off
  message: Detected a segment of a Flask template where autoescaping is explicitly
    disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this
    segment. Ensure no user data is rendered here, otherwise this is a cross-site
    scripting (XSS) vulnerability, or turn autoescape on.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping
    - https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{%\s*autoescape\s+false\s*%}'
- id: python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
  message: |
    Detected explicitly unescaped content using 'Markup()'. This permits
    the unescaped data to include unescaped HTML which could result in
    cross-site scripting. Ensure this data is not externally controlled,
    or consider rewriting to not use 'Markup()'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://tedboy.github.io/flask/generated/generated/flask.Markup.html
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: flask.Markup(...)
  - pattern: flask.Markup.unescape(...)
  - pattern: markupsafe.Markup(...)
  - pattern: $MARKUPOBJ.unescape()
- id: python.flask.security.audit.render-template-string.render-template-string
  pattern: flask.render_template_string(...)
  metadata:
    cwe: 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html
  message: Found a template created with string formatting. This is susceptible to
    server-side template injection and cross-site scripting attacks.
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING
  pattern-either:
  - pattern: $M.config['TESTING'] = True
  - pattern: $M.config['TESTING'] = False
  - pattern: $M.update(TESTING=True, ...)
  - pattern: $M.update(TESTING=False, ...)
  message: Hardcoded variable `TESTING` detected. Use environment variables or config
    files instead
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY
  pattern-either:
  - pattern: $M.update(SECRET_KEY="=~/.*/")
  - pattern: $M.config['SECRET_KEY'] = "=~/.*/"
  message: Hardcoded variable `SECRET_KEY` detected. Use environment variables or
    config files instead
  metadata:
    cwe: 'CWE-798: Use of Hard-coded Credentials'
    owasp: 'A2: Broken Authentication'
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
  languages:
  - python
  severity: ERROR
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV
  pattern-either:
  - pattern: $M.update(ENV="=~/^development|production$/")
  - pattern: $M.config['ENV'] = "=~/^development|production$/"
  message: Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment
    variable
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG
  pattern-either:
  - pattern: $M.update(DEBUG=True)
  - pattern: $M.update(DEBUG=False)
  - pattern: $M.config['DEBUG'] = True
  - pattern: $M.config['DEBUG'] = False
  message: Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment
    variable
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.debug-enabled.debug-enabled
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: $APP.run(..., debug=True, ...)
  message: |
    Detected Flask app with debug=True. Do not deploy to production with this flag enabled
    as it will leak sensitive information. Instead, consider using Flask configuration
    variables or setting 'debug' using system environment variables.
  metadata:
    cwe: 'CWE-489: Active Debug Code'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/
  severity: WARNING
  languages:
  - python
- id: python.flask.security.audit.secure-set-cookie.secure-set-cookie
  patterns:
  - pattern-either:
    - pattern-inside: |
        $RESP = flask.make_response(...)
        ...
    - pattern-inside: |
        $RESP = flask.Response(...)
        ...
  - pattern-not: $RESPONSE.set_cookie(..., secure=$A, httponly=$B, samesite=$C, ...)
  - pattern-not: $RESPONSE.set_cookie(..., **$A)
  - pattern: $RESPONSE.set_cookie(...)
  message: |
    Flask cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in
    response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting.
    If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript
    read the cookie, set httponly=False. If you want to attach cookies to requests for external sites,
    set samesite=None.
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://blog.r2c.dev/2020/bento-check-keeping-cookies-safe-in-flask/
    - https://bento.dev/checks/flask/secure-set-cookie/
    - https://flask.palletsprojects.com/en/1.1.x/security/#set-cookie-options
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly
  patterns:
  - pattern-not-inside: |
      if __name__ == '__main__':
        ...
  - pattern-not-inside: |
      def $X(...):
        ...
  - pattern: app.run(...)
  message: top-level app.run(...) is ignored by flask. Consider putting app.run(...)
    behind a guard, like inside a function
  metadata:
    cwe: 'CWE-668: Exposure of Resource to Wrong Sphere'
    owasp: 'A6: Security Misconfiguration'
  languages:
  - python
  severity: WARNING
- id: python.flask.caching.query-string.flask-cache-query-string
  patterns:
  - pattern-either:
    - pattern: |
        @app.route("...")
        @cache.cached(...)
        def $HANDLER(...):
          ...
          request.args.get(...)
    - pattern: |
        @app.route("...", methods=[..., "POST", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "PUT", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "DELETE", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "PATCH", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
  - pattern-not: |
      @app.route("...")
      @cache.cached(..., query_string=True)
      def $HANDLER(...):
        ...
        request.args.get(...)
  message: |
    Flask-caching doesn't cache query strings by default. You have to use `query_string=True`. Also you shouldn't cache verbs that can mutate state.
  severity: WARNING
  languages:
  - python
- id: python.distributed.security.require-encryption
  patterns:
  - pattern-not: |
      distributed.security.Security(..., require_encryption=True, ...)
  - pattern: |
      distributed.security.Security(...)
  fix: distributed.security.Security(..., require_encryption=True, ...)
  message: |
    Initializing the a security context for Dask (`distributed`) without "require_encription" keyword argument may silently fail to provide security. See https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.Blowfish.new(...)
    - pattern: Crypto.Cipher.Blowfish.new(...)
  message: |
    Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://sweet32.info/
  severity: WARNING
  languages:
  - python
- id: python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run
  patterns:
  - pattern-either:
    - pattern-inside: |
        $CLIENT = docker.from_env()
        ...
    - pattern-inside: |
        $CLIENT = docker.DockerClient(...)
        ...
  - pattern-either:
    - pattern: |
        $CLIENT.containers.run(...)
    - pattern: |
        $CLIENT.containers.create(...)
  - pattern-not: |
      $CLIENT.containers.run("...",...)
  - pattern-not: |
      $CLIENT.containers.create("...",...)
  message: |
    If unverified user data can reach the `run` or `create` method it can result in runing arbitrary container.
  languages:
  - python
  severity: WARNING
- id: python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  patterns:
  - pattern-either:
    - pattern: Crypto.PublicKey.RSA.generate(..., bits=$SIZE, ...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate(..., bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: |
    Detected an insufficient key size for RSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
  languages:
  - python
  severity: WARNING
- id: python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size
  patterns:
  - pattern-either:
    - pattern: Crypto.PublicKey.DSA.generate(..., bits=$SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(..., bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: |
    Detected an insufficient key size for DSA. NIST recommends
    a key size of 2048 or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
  languages:
  - python
  severity: WARNING
- id: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD2.new(...)
    - pattern: Cryptodome.Hash.MD2.new (...)
  message: |
    Detected MD2 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://tools.ietf.org/html/rfc6149
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2409
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD4.new(...)
    - pattern: Cryptodome.Hash.MD4.new (...)
  message: |
    Detected MD4 hash algorithm which is considered insecure. This algorithm
    has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://tools.ietf.org/html/rfc6150
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.MD5.new(...)
    - pattern: Cryptodome.Hash.MD5.new (...)
  message: |
    Detected MD5 hash algorithm which is considered insecure. MD5 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1
  patterns:
  - pattern-either:
    - pattern: Crypto.Hash.SHA.new(...)
    - pattern: Cryptodome.Hash.SHA.new (...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC2.new(...)
    - pattern: Crypto.Cipher.ARC2.new
  message: |
    Detected RC2 cipher algorithm which is considered insecure. The algorithm has known vulnerabilities and is difficult to use securely. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://security.stackexchange.com/questions/93924/is-rc2-cbc-at-all-secure
    - https://sweet32.info/
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4
  patterns:
  - pattern-either:
    - pattern: Cryptodome.Cipher.ARC4.new(...)
    - pattern: Crypto.Cipher.ARC4.new(...)
  message: |
    Detected RC4 cipher algorithm which is considered insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B304
    references:
    - https://crypto.stackexchange.com/questions/853/google-is-using-rc4-but-isnt-rc4-considered-unsafe
    - https://sweet32.info/
  severity: WARNING
  languages:
  - python
- id: python.attr.correctness.mutable-initializer.attr-mutable-initializer
  patterns:
  - pattern-not-inside: |
      def $Y(...):
        ...
  - pattern-not-inside: |
      def $Y(...) -> $TYPE:
        ...
  - pattern-inside: |
      @attr.s(...,auto_attribs=True, ...)
      class $X(...):
        ...
  - pattern-either:
    - pattern: |
        $M = {...}
    - pattern: $M = [...]
    - pattern: $M = list(...)
    - pattern: $M = set(...)
    - pattern: $M = dict(...)
  message: |
    Unsafe usage of mutable initializer with attr.s decorator.
    Multiple instances of this class will re-use the same data structure, which is likely not the desired behavior.
    Consider instead: replace assignment to mutable initializer (ex. dict() or {}) with attr.ib(factory=type) where type is dict, set, or list
  severity: WARNING
  languages:
  - python
- id: python.lang.correctness.file-object-redefined-before-close.file-object-redefined-before-close
  patterns:
  - pattern: |
      $F = open($X, ...)
      ...
      $F = open($Y, ...)
  - pattern-not: |
      $F = open($X, ...)
      ...
      $F.close()
      ...
      $F = open($Y, ...)
  message: |
    Detected a file object that is redefined and never closed. This
    could leak file descriptors and unnecessarily consume system resources.
  languages:
  - python
  severity: WARNING
- id: python.lang.correctness.writing-to-file-in-read-mode.writing-to-file-in-read-mode
  message: |
    The file object '$FD' was opened in read mode, but is being
    written to. This will cause a runtime error.
  patterns:
  - pattern-either:
    - pattern-inside: |
        $FD = open($NAME, "r", ...)
        ...
    - pattern-inside: |
        $FD = open($NAME, "rb", ...)
        ...
    - pattern-inside: |
        with open($NAME, "r", ...) as $FD:
          ...
    - pattern-inside: |
        with open($NAME, "rb", ...) as $FD:
          ...
  - pattern: $FD.write(...)
  severity: ERROR
  languages:
  - python
- id: python.lang.correctness.useless-eqeq.useless-eqeq
  patterns:
  - pattern-not-inside: |
      def __eq__(...):
          ...
  - pattern-not-inside: |
      def __cmp__(...):
          ...
  - pattern-not-inside: assert(...)
  - pattern-not-inside: assert ...
  - pattern-not-inside: assert ..., ...
  - pattern-not-inside: assertTrue(...)
  - pattern-not-inside: assertFalse(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: 'This expression is always True: `$X == $X` or `$X != $X`. If testing for
    floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is
    complex.'
  languages:
  - python
  severity: ERROR
- id: python.lang.correctness.pdb.pdb-remove
  pattern-either:
  - pattern: pdb.$X(...)
  - pattern: pdb.Pdb.$X(...)
  message: |
    pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code
  languages:
  - python
  severity: WARNING
- id: python.lang.correctness.exit.use-sys-exit
  languages:
  - python
  message: Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper
    for the interactive shell and may not be available on all Python implementations.
    https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python
  patterns:
  - pattern: exit(...)
  - pattern-not: sys.exit(...)
  severity: WARNING
- id: python.lang.correctness.concurrent.uncaught-executor-exceptions
  patterns:
  - pattern-inside: |
      with concurrent.futures.thread.ThreadPoolExecutor(...) as $EXECUTOR:
        ...
  - pattern-not-inside: |
      $VAR = $EXECUTOR.map(...)
      ...
      for ... in $VAR:
        ...
  - pattern-not-inside: |
      $VAR = $EXECUTOR.map(...)
      ...
      [... for ... in $VAR]
  - pattern-not-inside: |
      [... for ... in $EXECUTOR.map(...)]
  - pattern-not-inside: |
      for $IT in $EXECUTOR.map(...):
        ...
  - pattern: $EXECUTOR.map(...)
  message: |
    Values returned by thread pool map must be read in order to raise exceptions. Consider using `for _ in $EXECUTOR.map(...): pass`.
  fix: ''
  severity: WARNING
  languages:
  - python
- id: python.lang.correctness.common-mistakes.is-comparison-string.identical-is-comparison
  pattern: $S is $S
  message: Found identical comparison using is. Ensure this is what you intended.
  languages:
  - python
  severity: ERROR
- id: python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison
  patterns:
  - pattern-not: $S is None
  - pattern-not: type($X) is $T
  - pattern-not: $S is True
  - pattern-not: $S is False
  - pattern-not: $S is ""
  - pattern-either:
    - pattern: $S is "..."
    - pattern: '"..." is $S'
  message: |
    Found string comparison using 'is' operator. The 'is' operator
    is for reference equality, not value equality, and therefore should
    not be used to compare strings. For more information, see
    https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator"
  languages:
  - python
  severity: ERROR
- id: python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list
  patterns:
  - pattern-either:
    - pattern-inside: '[...]'
    - pattern-inside: '{...}'
  - pattern: '"..." "..."'
  - pattern-not-inside: f"..."
  - pattern-not-inside: '{..., $KEY: $VALUE, ...}'
  message: |
    Detected strings that are implicitly concatenated inside a list.
    Python will implicitly concatenate strings when not explicitly delimited.
    Was this supposed to be individual elements of the list?
  severity: WARNING
  languages:
  - python
- id: python.lang.correctness.tempfile.mktemp.tempfile-insecure
  pattern: tempfile.mktemp(...)
  message: 'Use tempfile.NamedTemporaryFile instead. From the official Python documentation:
    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file
    that did not exist at some point, but by the time you get around to creating it,
    someone else may have beaten you to the punch.'
  languages:
  - python
  severity: ERROR
- id: python.lang.best-practice.missing-hash-with-eq.missing-hash-with-eq
  patterns:
  - pattern-not-inside: |
      class A(...):
          ...
          def __hash__(self):
              ...
          ...
          def __eq__(self, $O):
              ...
  - pattern: |
      class A(...):
        ...
        def __eq__(self, $O): ...
        ...
  message: 'Class `$A` has defined `__eq__` which means it should also have defined
    `__hash__`; '
  languages:
  - python
  severity: WARNING
- id: python.lang.best-practice.pass-body.pass-body-fn
  patterns:
  - pattern-not-inside: |
      def __init__(self, ...):
          ...
  - pattern-not-inside: |
      class $A:
           ...
  - pattern: |
      def $X(...):
          pass
  message: '`pass` is the body of function $X. Consider removing this or raise NotImplementedError()
    if this is a TODO'
  languages:
  - python
  severity: WARNING
- id: python.lang.best-practice.pass-body.pass-body-range
  pattern: |
    for $X in $Y:
        pass
  message: '`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError()
    if this is a TODO'
  languages:
  - python
  severity: WARNING
- id: python.lang.best-practice.hardcoded-tmp-path.hardcoded-tmp-path
  pattern: open("=~/^\/tmp.*/", ...)
  message: |
    Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.
  metadata:
    references:
    - https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile
  severity: WARNING
  languages:
  - python
- id: python.lang.best-practice.pdb.python-debugger-found
  pattern-either:
  - pattern: import pdb
  - pattern: pdb.set_trace()
  message: Importing the python debugger; did you mean to leave this in?
  severity: WARNING
  languages:
  - python
- id: python.lang.best-practice.open-never-closed.open-never-closed
  patterns:
  - pattern-not-inside: |
      $F = open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = io.open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tarfile.open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = ZipFile.open(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tempfile.TemporaryFile(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tempfile.NamedTemporaryFile(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = tempfile.SpooledTemporaryFile(...)
      ...
      $F.close()
  - pattern-not-inside: |
      $F = open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = io.open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tarfile.open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = ZipFile.open(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tempfile.TemporaryFile(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tempfile.NamedTemporaryFile(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-not-inside: |
      $F = tempfile.SpooledTemporaryFile(...)
      ...
      try:
          ...
      finally:
          $F.close()
  - pattern-either:
    - pattern: $F = open(...)
    - pattern: $F = io.open(...)
    - pattern: $F = tarfile.open(...)
    - pattern: $F = ZipFile.open(...)
    - pattern: $F = tempfile.TemporaryFile(...)
    - pattern: $F = tempfile.NamedTemporaryFile(...)
    - pattern: $F = tempfile.SpooledTemporaryFile(...)
  message: file object opened without corresponding close
  languages:
  - python
  severity: ERROR
- id: python.lang.best-practice.sleep.arbitrary-sleep
  patterns:
  - pattern-not: time.sleep($F(...))
  - pattern-either:
    - pattern: |
        time.sleep($X: int)
    - pattern: |
        time.sleep($X: float)
  message: time.sleep() call; did you mean to leave this in?
  languages:
  - python
  severity: ERROR
- id: python.lang.best-practice.manual-collections-create.manual-defaultdict-dict-create
  patterns:
  - pattern-either:
    - pattern: |
        $DICT = {}
        ...
        for $KEY, $VALUE in $OTHERDICT.items():
            ...
            if $KEY not in $DICT:
                ...
                $DICT[$KEY] = {}
                ...
            $DICT[$KEY].update(...)
    - pattern: |
        $DICT = {}
        ...
        for $KEY, $VALUE in $OTHERDICT.items():
            ...
            $DICT.setdefault($KEY, {}).update(...)
  message: manually creating a defaultdict - use collections.defaultdict(dict)
  languages:
  - python
  severity: WARNING
- id: python.lang.best-practice.manual-collections-create.manual-defaultdict-set-create
  patterns:
  - pattern-either:
    - pattern: |
        $DICT = {}
        ...
        for $KEY, $VALUE in $OTHERDICT.items():
            ...
            if $KEY not in $DICT:
                ...
                $DICT[$KEY] = set()
                ...
            $DICT[$KEY].add(...)
    - pattern: |
        $DICT = {}
        ...
        for $KEY, $VALUE in $OTHERDICT.items():
            ...
            $DICT.setdefault($KEY, set()).add(...)
  message: manually creating a defaultdict - use collections.defaultdict(set)
  languages:
  - python
  severity: WARNING
- id: python.lang.best-practice.manual-collections-create.manual-defaultdict-list-create
  patterns:
  - pattern-either:
    - pattern: |
        $DICT = {}
        ...
        for $KEY, $VALUE in $OTHERDICT.items():
            ...
            if $KEY not in $DICT:
                ...
                $DICT[$KEY] = []
                ...
            $DICT[$KEY].append(...)
    - pattern: |
        $DICT = {}
        ...
        for $KEY, $VALUE in $OTHERDICT.items():
            ...
            $DICT.setdefault($KEY, []).append(...)
  message: manually creating a defaultdict - use collections.defaultdict(list)
  languages:
  - python
  severity: WARNING
- id: python.lang.best-practice.manual-collections-create.manual-counter-create
  pattern: |
    $DICT = {}
    ...
    for $KEY, $VALUE in $OTHERDICT.items():
        ...
        if $KEY not in $DICT:
            ...
            $DICT[$KEY] = 0
            ...
        $DICT[$KEY] += 1
  message: manually creating a counter - use collections.Counter
  languages:
  - python
  severity: WARNING
- id: python.lang.security.unverified-ssl-context.unverified-ssl-context
  pattern: ssl._create_unverified_context(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-295: Improper Certificate Validation'
    references:
    - https://docs.python.org/3/library/ssl.html#ssl-security
    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
  severity: ERROR
  languages:
  - python
- id: python.lang.security.unquoted-csv-writer.unquoted-csv-writer
  patterns:
  - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)
  - pattern: csv.writer(...)
  message: Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.
  metadata:
    cwe: 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    owasp: 'A1: Injection'
    references:
    - https://affinity-it-security.com/how-to-prevent-csv-injection/
  fix-regex:
    regex: (.*)\)
    replacement: \1, quoting=csv.QUOTE_ALL)
  languages:
  - python
  severity: ERROR
- id: ocaml.lang.best-practice.ifs.ocamllint-useless-else
  pattern: if $E then $E1 else ()
  message: Useless else. Just remove the else branch;
  languages:
  - ocaml
  severity: WARNING
- id: javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
  message: |
    Make sure that unverified user data can not reach `vm2`.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm2');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          new VM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          new VM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          new NodeVM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          new NodeVM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |-
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
- id: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
  pattern-either:
  - pattern: import xmlrpclib
  - pattern: import SimpleXMLRPCServer
  - pattern: import xmlrpc
  message: |
    Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities.
    Use defusedxml.xmlrpc instead.
  metadata:
    cwe: 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://github.com/PyCQA/bandit/blob/07f84cb5f5e7c1055e6feaa0fe93afa471de0ac3/bandit/blacklists/imports.py#L160
    references:
    - https://pypi.org/project/defusedxml/
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities
  severity: ERROR
  languages:
  - python
- id: javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
  message: |
    Make sure that unverified user data can not reach vm.runInNewContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VM.runInNewContext($CODE,<... $INPUT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $VM.runInNewContext($CODE,<... $INPUT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
- id: python.lang.security.deserialization.pickle.avoid-pickle
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
  languages:
  - python
  message: |
    Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  severity: WARNING
  pattern-either:
  - pattern: pickle.$FUNC(...)
  - pattern: _pickle.$FUNC(...)
- id: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
  pattern: hashlib.sha1(...)
  message: |
    Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic
    signature. Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B303
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  severity: WARNING
  languages:
  - python
- id: python.lang.security.deserialization.pickle.avoid-cPickle
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
  languages:
  - python
  message: |
    Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  severity: WARNING
  pattern: cPickle.$FUNC(...)
- id: python.lang.security.deserialization.pickle.avoid-dill
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
  languages:
  - python
  message: |
    Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  severity: WARNING
  pattern-either:
  - pattern: dill.$FUNC(...)
- id: python.lang.security.deserialization.pickle.avoid-shelve
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
  languages:
  - python
  message: |
    Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  severity: WARNING
  pattern-either:
  - pattern: shelve.$FUNC(...)
- id: python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ
  languages:
  - python
  message: |
    Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can
    create arbitrary Python objects. A malicious actor could exploit
    this to run arbitrary code. Use `YAML(typ='rt')` or
    `YAML(typ='safe')` instead.
  severity: ERROR
  pattern-either:
  - pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  - pattern: ruamel.yaml.YAML(..., typ='base', ...)
- id: python.lang.security.audit.conn_recv.multiprocessing-recv
  languages:
  - python
  message: 'The Connection.recv() method automatically unpickles the data it receives,
    which can be a security risk unless you can trust the process which sent the message.
    Therefore, unless the connection object was produced using Pipe() you should only
    use the recv() and send() methods after performing some sort of authentication.
    See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection'
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection
  pattern-either:
  - pattern: multiprocessing.connection.Connection.recv(...)
  - pattern: multiprocessing.connection.Client.recv(...)
  - pattern: |
      $C = multiprocessing.connection.Client(...)
      ...
      $C.recv(...)
  severity: WARNING
- id: python.lang.security.audit.telnetlib.telnetlib
  pattern: telnetlib.$ANYTHING(...)
  message: |
    Telnet does not encrypt communications. Use SSH instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L208
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B312
    references:
    - https://docs.python.org/3/library/telnetlib.html
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: urllib.urlopen(...)
        - pattern: urllib.request.urlopen(...)
        - pattern: urllib.urlretrieve(...)
        - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: $OPENER.open(...)
        - pattern: $OPENER.retrieve(...)
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    cwe: 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163
    bandit-code: B310
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
  languages:
  - python
  severity: WARNING
- id: javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
  message: |
    Make sure that unverified user data can not reach vm.compileFunction.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $OPTS = {parsingContext: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $OPTS = {parsingContext: <... $INPUT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {parsingContext: <... $CONTEXT ...>};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          ...
        }
- id: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
  pattern: subprocess.$FUNC(..., shell=True, ...)
  message: |
    Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn
    the command using a shell process. Doing so propagates current shell settings and variables, which
    makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.
  fix-regex:
    regex: (shell\s*=\s*)True
    replacement: \1False
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    references:
    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess
    - https://docs.python.org/3/library/subprocess.html
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-httpconn
  pattern: http.client.HTTPConnection(blocksize=$X,...)
  message: HTTPConnection blocksize keyword argument is Python 3.7+ only
  languages:
  - python
  severity: ERROR
- id: python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  message: |
    Detected a paramiko host key policy that implicitly trusts a server's
    host key. Host keys should be verified to ensure the connection
    is not to a malicious server. Use RejectPolicy or a custom subclass
    instead.
  metadata:
    cwe: 'CWE-322: Key Exchange without Entity Authentication'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/ssh_no_host_key_verification.py
    references:
    - http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.exec-detected.exec-detected
  patterns:
  - pattern-not: exec("...")
  - pattern: exec(...)
  message: |
    Detected the use of exec(). exec() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this
    may be a code injection vulnerability. Ensure evaluated content is not definable
    by external sources.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.marshal.marshal-usage
  languages:
  - python
  message: |
    The marshal module is not intended to be secure against erroneous or maliciously constructed data.
    Never unmarshal data received from an untrusted or unauthenticated source.
    See more details: https://docs.python.org/3/library/marshal.html?highlight=security
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://docs.python.org/3/library/marshal.html?highlight=security
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  severity: WARNING
- id: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
  pattern: ssl.wrap_socket(...)
  message: |
    'ssl.wrap_socket()' is deprecated. This function creates an insecure socket
    without server name indication or hostname matching. Instead, create an SSL
    context using 'ssl.SSLContext()' and use that to wrap a socket.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://docs.python.org/3/library/ssl.html#ssl.wrap_socket
    - https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.mako-templates-detected.mako-templates-detected
  pattern: mako.template.Template(...)
  message: |
    Mako templates do not provide a global HTML escaping mechanism.
    This means you must escape all sensitive data in your templates
    using '| u' for URL escaping or '| h' for HTML escaping.
    If you are using Mako to serve web content, consider using
    a system such as Jinja2 which enables global escaping.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/mako_templates.py
    references:
    - https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping
    - https://jinja.palletsprojects.com/en/2.11.x/intro/#
  languages:
  - python
  severity: INFO
- id: python.lang.compatibility.python37.python37-compatibility-importlib3
  pattern: import importlib.abc.ResourceReader
  message: this module is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: php.lang.security.file-inclusion.file-inclusion
  patterns:
  - pattern: $FUNC(...);
  - pattern-not: $FUNC("...");
  - pattern-not: $FUNC(__DIR__ . "...");
  - metavariable-regex:
      metavariable: $FUNC
      regex: include|include_once|require|require_once
  message: |
    Non-constant file inclusion. This can lead to LFI or RFI if user
    input reaches this statement.
  metadata:
    references:
    - https://www.php.net/manual/en/function.include.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php
    - https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion
  languages:
  - php
  severity: ERROR
- id: python.lang.security.audit.ftplib.ftplib
  pattern: ftplib.$ANYTHING(...)
  message: |
    FTP does not encrypt communications by default. This can lead to sensitive
    data being exposed. Ensure use of FTP here does not expose sensitive data.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L265
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B321
    references:
    - https://docs.python.org/3/library/telnetlib.html
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.logging.listeneval.listen-eval
  languages:
  - python
  message: |
    Because portions of the logging configuration are passed through eval(),
    use of this function may open its users to a security risk. While the
    function only binds to a socket on localhost, and so does not accept
    connections from remote machines, there are scenarios where untrusted
    code could be run under the account of the process which calls listen().
    See more details at https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen
  severity: WARNING
  pattern: logging.config.listen(...)
- id: python.lang.compatibility.python37.python37-compatibility-textiowrapper
  pattern: TextIOWrapper.reconfigure(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
  patterns:
  - pattern: |
      logger.$LOGGER_CALL($FORMAT_STRING,...)
  - metavariable-regex:
      metavariable: $LOGGER_CALL
      regex: (info|error|exception)
  - metavariable-regex:
      metavariable: $FORMAT_STRING
      regex: (?i).*(api.key|secret|credential|token).*\%s.*
  message: |
    Logger call may be exposing a secret credential in $FORMAT_STRING
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation
  patterns:
  - pattern-either:
    - pattern: urllib3.PoolManager(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.ProxyManager(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.connectionpool.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.connection_from_url(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.proxy_from_url(..., cert_reqs=$REQS, ...)
    - pattern: $CONTEXT.wrap_socket(..., cert_reqs=$REQS, ...)
    - pattern: ssl.wrap_socket(..., cert_reqs=$REQS, ...)
  - metavariable-regex:
      metavariable: $REQS
      regex: (NONE|CERT_NONE|CERT_OPTIONAL|ssl\.CERT_NONE|ssl\.CERT_OPTIONAL|\'NONE\'|\"NONE\"|\'OPTIONAL\'|\"OPTIONAL\")
  message: certificate verification explicitly disabled, insecure connections possible
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
  languages:
  - python
  severity: ERROR
- id: python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command
  patterns:
  - pattern-inside: |
      import paramiko
      ...
  - pattern: $CLIENT.exec_command(...)
  message: |
    Unverified SSL context detected. This will permit insecure connections without verifying
    SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    references:
    - http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command
    - https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls
  pattern: ftplib.FTP(...)
  fix-regex:
    regex: FTP(.*)\)
    replacement: FTP_TLS\1, context=ssl.create_default_context())
  message: |
    The 'FTP' class sends information unencrypted. Consider using
    the 'FTP_TLS' class instead.
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context
  patterns:
  - pattern-inside: |
      with requests.Session(...) as $SESSION:
        ...
  - pattern-either:
    - pattern: $SESSION.$W("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
    - pattern: $SESSION.request($METHOD, "=~/[Hh][Tt][Tt][Pp]://.*/", ...)
    - patterns:
      - pattern-inside: |
          $URL =  "=~/[Hh][Tt][Tt][Pp]://.*/"
          ...
      - pattern-either:
        - pattern: $SESSION.$W($URL, ...)
        - pattern: $SESSION.request($METHOD, $URL, ...)
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  message: |
    Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
  languages:
  - python
  severity: ERROR
- id: python.lang.maintainability.useless-ifelse.useless-if-conditional
  patterns:
  - pattern-either:
    - pattern: |
        if $X:
            ...
        elif $X:
            ...
  message: if block checks for the same condition on both branches (`$X`)
  languages:
  - python
  severity: WARNING
- id: python.lang.maintainability.useless-ifelse.useless-if-body
  patterns:
  - pattern: |
      if $X:
          $S
      else:
          $S
  message: useless if statment; both blocks have the same body
  languages:
  - python
  severity: WARNING
- id: python.lang.maintainability.return.code-after-unconditional-return
  patterns:
  - pattern: |
      return ...
      $S
  message: code after return statement will not be executed
  languages:
  - python
  severity: WARNING
- id: python.lang.maintainability.return.return-not-in-function
  patterns:
  - pattern-not-inside: |
      def $F(...):
          ...
      # TODO: first pattern should just automatically include this one
  - pattern-not-inside: |
      def $F(...) ->  $Y:
          ...
  - pattern: return ...
  message: '`return` only makes sense inside a function'
  languages:
  - python
  severity: WARNING
- id: python.lang.compatibility.python36.python36-compatibility-ssl
  pattern: ssl.get_ciphers()
  message: this function is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
- id: python.lang.maintainability.useless-innerfunction.useless-inner-function
  patterns:
  - pattern-not-inside: |
      def $F(...):
          ...
          def $FF(...):
             ...
          ...
          <... $FF ...>
  - pattern-not-inside: |
      def $F(...):
          ...
          class $CLAZZ(...):
            ...
  - pattern-inside: |
      def $F(...):
        ...
        def $FF(...):
           ...
        ...
  - pattern: |
      def $FF(...):
        ...
  message: function `$FF` is defined inside a function but never used
  languages:
  - python
  severity: ERROR
- id: python.lang.maintainability.useless-literal.useless-literal-dict
  patterns:
  - pattern-either:
    - pattern: |
        {..., $X: $A, ..., $X: $B, ...}
    - pattern: |
        dict(..., ($X, $A), ..., ($X, $B), ...)
  message: key `$X` is uselessly assigned twice
  languages:
  - python
  severity: WARNING
- id: python.lang.maintainability.useless-literal.useless-literal-set
  patterns:
  - pattern: |
      set(..., ($X, $A), ..., ($X, $B), ...)
  message: '`$X` is uselessly assigned twice inside the creation of the set'
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-importlib
  pattern: importlib.source_hash()
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-importlib2
  pattern: import importlib.resources
  message: this module is only available on Python 3.7+; use importlib_resources for
    older Python versions
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network1
  pattern: ipaddress.IPv6Network.subnet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network2
  pattern: ipaddress.IPv6Network.supernet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network1
  pattern: ipaddress.IPv4Network.subnet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network2
  pattern: ipaddress.IPv4Network.supernet_of($X)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-locale1
  pattern: locale.format_string(monetary=$X, ...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-math1
  pattern: math.remainder($X, $Y)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess1
  pattern: multiprocessing.Process.close()
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess2
  pattern: multiprocessing.Process.kill()
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-os1
  pattern: os.preadv(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatability-os-module
  patterns:
  - pattern-not-inside: |
      if hasattr(os, 'pwrite'):
          ...
  - pattern: os.pwrite(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-os2-ok2
  patterns:
  - pattern-not-inside: |
      if hasattr(os, 'pwritev'):
          ...
  - pattern: os.pwritev(...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.lang.compatibility.python37.python37-compatibility-pdb
  pattern: pdb.set_trace(header=$X, ...)
  message: this function is only available on Python 3.7+
  languages:
  - python
  severity: ERROR
- id: python.jwt.security.jwt-none-alg.jwt-python-none-alg
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      jwt.encode(...,algorithm="none",...)
  - pattern: jwt.decode(...,algorithms=[...,"none",...],...)
- id: python.jwt.security.unverified-jwt-decode.unverified-jwt-decode
  pattern: |
    jwt.decode(..., verify=False, ...)
  message: |
    Detected JWT token decoded with 'verify=False'. This bypasses any integrity
    checks for the token which means the token could be tampered with by
    malicious actors. Ensure that the JWT token is verified.
  metadata:
    owasp: 'A5: Broken Authentication'
    cwe: 'CWE-287: Improper Authentication'
    references:
    - https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96
  fix-regex:
    regex: (verify\s*=\s*)False
    replacement: \1True
  severity: ERROR
  languages:
  - python
- id: python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
  languages:
  - python
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    references:
    - https://cwe.mitre.org/data/definitions/522.html
  message: |
    Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  pattern-either:
  - pattern: |
      jwt.encode({...,"password":$P,...},...)
  - pattern: |
      $PAYLOAD = {...,"password":$P,...}
      ...
      jwt.encode($PAYLOAD,...)
  severity: ERROR
- id: javascript.lang.security.audit.sqli.node-postgres-sqli.node-postgres-sqli
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB.query(...,$QUERY,...)
        - pattern: |
            $DB.query(..., $QUERY, ...).$INTFUNC(...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = $X.concat($Y)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = $X.concat("...")
          ...
    - pattern: $DB.query(..., $X + $Y, ...)
    - pattern: $DB.query(..., $X.concat($Y), ...)
  - pattern-either:
    - pattern-inside: |
        const { $CLIENT } = require('pg')
        ...
        $DB = new $CLIENT(...)
        ...
    - pattern-inside: |
        const { $POOL } = require('pg')
        ...
        const $NEWPOOL = new $POOL(...)
        ...
        $NEWPOOL.connect((..., $DB, ...) => {
            ...
        })
  - pattern-not: $DB.query(..., "..." + "...", ...)
  - pattern-not: $DB.query(..., $X.concat("..."), ...)
  languages:
  - js
  message: |
    Detected string concatenation with a non-literal variable in a node-postgres
    JS SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries or prepared statements instead.
    You can use parameterized statements like so:
    `client.query('SELECT $1 from table', [userinput])`
  metadata:
    references:
    - https://node-postgres.com/features/queries
  severity: WARNING
- id: python.security.mongodb.mongo-client-bad-auth
  pattern: |
    pymongo.MongoClient(..., authMechanism='MONGODB-CR')
  message: |
    Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details).
  fix-regex:
    regex: MONGODB-CR
    replacement: SCRAM-SHA-256
  severity: WARNING
  languages:
  - python
- id: python.click.best-practice.echo-style.use-click-secho
  pattern: click.echo(click.style($X, ...))
  message: Use `click.secho($X)` instead. It combines click.echo() and click.style().
  languages:
  - python
  severity: ERROR
- id: python.sqlalchemy.correctness.delete-where.delete-where-no-execute
  patterns:
  - pattern: $X.delete().where(...)
  - pattern-not-inside: $X.delete().where(...).execute()
  - pattern-not-inside: $C.execute(...)
  message: .delete().where(...) results in a no-op in SQLAlchemy unless the command
    is executed, use .filter(...).delete() instead.
  languages:
  - python
  severity: ERROR
- id: python.sqlalchemy.correctness.bad-operator-in-filter.bad-operator-in-filter
  languages:
  - python
  message: |
    Only comparison operators should be used inside SQLAlchemy filter expressions. Use `==` instead of `is`,
    `!=` instead of `is not`, `sqlalchemy.and_` instead of `and`, `sqlalchemy.or_` instead of `or`,
    `sqlalchemy.not_` instead of `not`, and `sqlalchemy.in_` instead of `in_`.
  metadata:
    references:
    - https://docs.sqlalchemy.org/en/13/orm/tutorial.html#common-filter-operators
  patterns:
  - pattern-inside: |
      def $ANY(...):
          ...
          $MODEL.query
  - pattern-inside: |
      $TARGET.filter(...)
  - pattern-either:
    - pattern: not $A
    - pattern: $A is $B
    - pattern: $A is not $B
    - pattern: $A and $B
    - pattern: $A or $B
    - pattern: $A in $B
    - pattern: $A not in $B
  severity: WARNING
- id: python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection
  patterns:
  - pattern-either:
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          $SESSION.query(...).$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          $SESSION.query.join(...).$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          $SESSION.query.$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          query.$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
  - metavariable-regex:
      metavariable: $SQLFUNC
      regex: (group_by|order_by|distinct|having|filter)
  - metavariable-regex:
      metavariable: $FORMATFUNC
      regex: (?!bindparams)
  message: |
    Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections
    if the developer inputs raw SQL into the before-mentioned clauses.
    This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and
    injects user-input into the raw SQL with any function besides "bindparams". Use bindParams to securely bind user-input
    to SQL statements.
  fix-regex:
    regex: format
    replacement: bindparams
  languages:
  - python
  severity: WARNING
- id: python.sh.security.string-concat.string-concat
  languages:
  - python
  severity: WARNING
  message: |
    Detected string concatenation or formatting in a call to a command via 'sh'.
    This could be a command injection vulnerability if the data is user-controlled.
    Instead, use a list and append the argument.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  pattern-either:
  - pattern: sh.$BIN($X + $Y)
  - pattern: sh.$BIN($X.format(...))
  - pattern: sh.$BIN(f"...{...}...")
- id: problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
  patterns:
  - pattern-either:
    - pattern: |
        $CONST = require('crypto');
        ...
        https.createServer(...).$FUNC(...);
    - pattern: |
        $CONST = require('constants');
        ...
        https.createServer(...).$FUNC(...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      https.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      https.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      https.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      https.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      https.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);
  message: |
    Detects direct creations of https servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to
    POODLE, man in the middle attacks, and other vulnerabilities.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
    - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
    - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
  severity: WARNING
  languages:
  - javascript
- id: problem-based-packs.insecure-transport.js-node.http-request.http-request
  patterns:
  - pattern-either:
    - pattern: |
        http.get("=~/http://.*/", ...)
    - pattern: |
        $VAR = {hostname: "..."};
        ...
        http.request(..., $VAR, ...);
    - pattern: |
        $VAR = new URL("=~/http://.*/");
        ...
        http.request(..., $VAR, ...);
    - pattern: |
        http.request("=~/http://.*/",...);
  - pattern-not: |
      $VAR = {protocol: "https"};
      ...
      http.request(..., $VAR, ...);
  message: |
    Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website
    that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://nodejs.org/api/http.html#http_http_request_options_callback
  languages:
  - javascript
  severity: WARNING
- id: problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
  patterns:
  - pattern-either:
    - pattern: |
        var $X = require('ftp');
        ...
        let $C = new $X();
        ...
        $C.connect(...);
  - pattern-not: |
      var $X = require('ftp');
      ...
      let $C = new $X();
      ...
      $C.connect({secure: true});
  - pattern-not: |
      var $X = require('ftp');
      ...
      let $C = new $X();
      ...
      $OPTIONS = {secure: true};
      $C.connect($OPTIONS);
  message: |
    Checks for lack of usage of the "secure: true" option when sending ftp requests through the nodejs ftp module.
    This leads to unencrypted traffic being sent to the ftp server. There are other options
    such as "implicit" that still does not encrypt all traffic. ftp is the most utilized npm ftp module.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.npmjs.com/package/ftp
    - https://openbase.io/js/ftp
  languages:
  - javascript
  severity: WARNING
- id: problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
  patterns:
  - pattern-either:
    - pattern: |
        $CONST = require('crypto');
        ...
        $OPTIONS = {};
        ...
        https.createServer($OPTIONS, ...);
    - pattern: |
        $CONST = require('constants');
        ...
        $OPTIONS = {};
        ...
        https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('crypto');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};
      ...
      https.createServer($OPTIONS, ...);
  - pattern-not: |
      $CONST = require('constants');
      ...
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};
      ...
      https.createServer($OPTIONS, ...);
  message: |
    Detects creations of https servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1.
    These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
    - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
    - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
  severity: WARNING
  languages:
  - javascript
- id: problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          URI.create("=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern-inside: |
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.sendAsync(...);
  - patterns:
    - pattern-either:
      - pattern: |
          URI.create("=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern-inside: |
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.send(...);
  - patterns:
    - pattern-either:
      - pattern: |
          URI.create($URI)
    - pattern-inside: |
        String $URI = "=~/[hH][tT][tT][pP]://.*/";
        ...
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.send(...);
  - patterns:
    - pattern: |
        URI.create($URI)
    - pattern-inside: |
        String $URI = "=~/[hH][tT][tT][pP]://.*/";
        ...
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.sendAsync(...);
  message: |
    Checks for requests sent via HttpClient to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://openjdk.java.net/groups/net/httpclient/intro.html
  languages:
  - java
  severity: WARNING
- id: problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
  message: |
    Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification.
    This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification
    against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability
    to MTM attacks, and should not be used.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://nodejs.org/api/https.html#https_https_request_options_callback
    - https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100
  severity: WARNING
  languages:
  - javascript
  pattern-either:
  - pattern: |
      process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
  - pattern: |
      {rejectUnauthorized:false}
- id: problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request
  patterns:
  - pattern-either:
    - pattern: |
        $URI = URI('=~/[hH][tT][tT][pP]://.*/')
        ...
        Net::HTTP::$FUNC.new $URI
    - pattern: |
        $URI = URI('=~/[hH][tT][tT][pP]://.*/')
        ...
        Net::HTTP.$FUNC($URI, ...)
    - pattern: |
        Net::HTTP.$FUNC(URI('=~/[hH][tT][tT][pP]://.*/'), ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: ([gG]et|post_form|[pP]ost|get_response|get_print|Head|Patch|Put|Proppatch|Lock|Unlock|Options|Propfind|Delete|Move|Copy|Trace|Mkcol)
  languages:
  - ruby
  message: |
    Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website
    that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://ruby-doc.org/stdlib-2.6.5/libdoc/net/http/rdoc/Net/
  severity: WARNING
- id: problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
  patterns:
  - pattern-either:
    - pattern: |
        $RESTTEMP = new RestTemplate(...);
        ...
        $RESTTEMP.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...);
    - pattern: |
        $RESTTEMP = new RestTemplate(...);
        ...
        String $URL = "=~/[hH][tT][tT][pP]://.*/";
        ...
        $RESTTEMP.$FUNC($URL, ...);
    - pattern: |
        $RESTTEMP = new RestTemplate(...);
        ...
        $URL = new URI(..., "=~/[hH][tT][tT][pP]://.*/", ...);
        ...
        $RESTTEMP.$FUNC($URL, ...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: (delete|doExecute|exchange|getForEntity|getForObject|headForHeaders|optionsForAllow|patchForObject|postForEntity|postForLocation|postForObject|put)
  message: |
    Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-
    - https://www.baeldung.com/rest-template
  languages:
  - java
  severity: WARNING
- id: problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
  patterns:
  - pattern-either:
    - pattern: |
        new SSLConnectionSocketFactory(...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.2", "TLSv1.3"}, ...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.3", "TLSv1.2"}, ...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.3"}, ...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.2"}, ...);
  message: |
    Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1.
    SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates.
    These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle
  severity: WARNING
  languages:
  - java
- id: terraform.lang.security.elastic-search-encryption-at-rest.elastic-search-encryption-at-rest
  patterns:
  - pattern-either:
    - pattern: |
        {...}
  - pattern-not-inside: |
      {... encrypt_at_rest{... enabled = true ...} ...}
  - pattern-inside: |
      resource "aws_elasticsearch_domain" "..." {...}
  languages:
  - generic
  paths:
    include:
    - '*.tf'
  message: |
    Encryption at rest is not enabled for the elastic search domain resource
  severity: WARNING
- id: problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
  pattern: |
    java.lang.System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", true);
  message: |
    Checks for cases where java applications are allowing unsafe renegotiation.
    This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.oracle.com/java/technologies/javase/tlsreadme.html
  languages:
  - java
  severity: WARNING
- id: problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
  pattern: |
    $TELNETCLIENT = new TelnetClient(...);
    ...
    $TELNETCLIENT.connect(...);
  message: |
    Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports
    no encryption, and data passes through unencrypted.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html
  languages:
  - java
  severity: WARNING
- id: problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
  patterns:
  - pattern-either:
    - pattern: |
        new X509TrustManager() {
          ...
          public void checkClientTrusted(X509Certificate[] certs, String authType) {...}
          ...
        }
  - pattern-not: |
      new X509TrustManager() {
        ...
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
          ...
          throw new CertificateException(...);
          ...
        }
        ...
      }
  - pattern-not: |
      new X509TrustManager() {
        ...
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
          ...
          throw new IllegalArgumentException(...);
          ...
        }
        ...
      }
  message: |
    Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification.
    This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-
    - https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1
  languages:
  - java
  severity: WARNING
- id: problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
  patterns:
  - pattern-either:
    - pattern: |
        java.lang.System.setProperty("jdk.tls.client.protocols", "...");
  - pattern-not: |
      java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.2,TLSv1.3");
  - pattern-not: |
      java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.3,TLSv1.2");
  - pattern-not: |
      java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.3");
  - pattern-not: |
      java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.2");
  message: |
    Detects setting client protocols to insecure versions of TLS and SSL.
    These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications
  severity: WARNING
  languages:
  - java
- id: ruby.rails.security.audit.xss.templates.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need to do this, use `escape_javascript`
    or its alias, `j`. However, this will not protect from XSS in all circumstances;
    see the references for more information. Consider placing this value in the HTML
    portion (outside of a script tag).
  metadata:
    references:
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
    - https://www.youtube.com/watch?v=yYTkLUEdIyE
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not: <%= j ... >
  - pattern-not: <%= escape_javascript ... >
  - pattern: <%= ... >
- id: problem-based-packs.insecure-transport.go-stdlib.http-request.http-request
  patterns:
  - pattern-either:
    - pattern: |
        http.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern: |
        $CLIENT := &http.Client{...}
        ...
        client.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: (Get|Post|Head|PostForm)
  message: |
    Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://golang.org/pkg/net/http/#Get
  languages:
  - go
  severity: WARNING
- id: problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request
  pattern: |
    http.NewRequest(..., "=~/[hH][tT][tT][pP]://.*/", ...)
  message: |
    Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead,    send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://golang.org/pkg/net/http/#NewRequest
  languages:
  - go
  severity: WARNING
- id: problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions
  patterns:
  - pattern-either:
    - pattern: |
        tls.Config{..., MinVersion: $TLS.$VERSION, ...}
    - pattern: |
        $CONFIG = &tls.Config{...}
        ...
        $CONFIG.MinVersion = $TLS.$VERSION
  - metavariable-regex:
      metavariable: $VERSION
      regex: (VersionTLS10|VersionTLS11|VersionSSL30)
  message: |
    Detects creations of tls configuration objects with an insecure MinVersion of TLS.
    These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle
  severity: WARNING
  languages:
  - go
- id: problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request
  pattern: |
    telnet.DialToAndCall(...)
  message: |
    Checks for attempts to connect to an insecure telnet server using the package telnet.
    This is bad because it can lead to man in the middle attacks.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://godoc.org/github.com/reiver/go-telnet
  languages:
  - go
  severity: WARNING
- id: problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request
  patterns:
  - pattern-either:
    - pattern: |
        grequests.$FUNC(...,"=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern: |
        $FUNC(...,"=~/[hH][tT][tT][pP]://.*/", ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: (Get|Head|Post|Put|Delete|Patch|Options|Req|DoRegularRequest)
  message: |
    Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library.
    This is dangerous because it could result in plaintext PII being passed around the network.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://godoc.org/github.com/levigross/grequests#DoRegularRequest
    - https://github.com/levigross/grequests
  severity: WARNING
  languages:
  - go
- id: terraform.lang.security.s3-cors-all-origins.all-origins-allowed
  patterns:
  - pattern-inside: cors_rule { ... }
  - pattern: allowed_origins = ["*"]
  languages:
  - generic
  paths:
    include:
    - '*.tf'
  severity: WARNING
  message: CORS rule on bucket permits any origin
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors
- id: terraform.lang.security.s3-public-read-bucket.s3-public-read-bucket
  patterns:
  - pattern: acl = "public-read"
  - pattern-not-inside: '{ ... website { ... } ... }'
  languages:
  - generic
  paths:
    include:
    - '*.tf'
  severity: WARNING
  message: S3 bucket with public read access detected.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl
- id: terraform.lang.security.ecr-image-scan-on-push.ecr-image-scan-on-push
  patterns:
  - pattern-either:
    - pattern: |
        {...}
  - pattern-not-inside: |
      resource "aws_ecr_repository" "..." {... image_scanning_configuration{scan_on_push=true} ...}
  - pattern-inside: |
      resource "aws_ecr_repository" "..." {...}
  languages:
  - generic
  paths:
    include:
    - '*.tf'
  message: |
    The ECR Repository isn't configured to scan images on push
  severity: WARNING
- id: terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled
  patterns:
  - pattern-either:
    - pattern: |
        {...}
  - pattern-inside: |
      resource "aws_eks_cluster" "..." {...}
  - pattern-not-inside: |
      {... vpc_config{... endpoint_public_access = false ...} ...}
  languages:
  - generic
  paths:
    include:
    - '*.tf'
  message: |
    The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access
  severity: WARNING
- id: terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket
  pattern: acl = "public-read-write"
  languages:
  - generic
  paths:
    include:
    - '*.tf'
  severity: ERROR
  message: S3 bucket with public read-write access detected.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl
- id: javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
  message: |
    `serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page'
  patterns:
  - pattern-inside: |
      ...
      $S = require('serialize-javascript');
      ...
  - pattern-not-inside: escape(...)
  - pattern-not-inside: encodeURI(...)
  - pattern: |
      $S(..., {unsafe: true});
- id: javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
  message: |
    If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      $WK = require('wkhtmltoimage');
      ...
  - pattern-not-inside: |
      var $INPUT = "...";
      ...
  - pattern: $WK.generate($INPUT,...)
  - pattern-not: $WK.generate("...",...)
- id: javascript.phantom.security.audit.phantom-injection.phantom-injection
  message: |
    If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      $PHANTOM = require('phantom');
      ...
  - pattern-not-inside: |
      var $INPUT = "...";
      ...
  - pattern-either:
    - pattern: $PAGE.open($INPUT,...)
    - pattern: $PAGE.property("content",$INPUT,...)
    - pattern: $PAGE.setContent($INPUT,...)
    - pattern: $PAGE.openUrl($INPUT,...)
    - pattern: $PAGE.evaluateJavaScript($INPUT,...)
  - pattern-not: $PAGE.open("...",...)
  - pattern-not: $PAGE.property("content","...",...)
  - pattern-not: $PAGE.setContent("...",...)
  - pattern-not: $PAGE.openUrl("...",...)
  - pattern-not: $PAGE.evaluateJavaScript("...",...)
- id: javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
  message: |
    Make sure that unverified user data can not reach `vm2`.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      require('vm2');
      ...
  - pattern-not-inside: |
      $CODE = "...";
      ...
  - pattern-not-inside: |
      ...
      $CODE = new VMScript(...);
      ...
  - pattern-either:
    - pattern: |
        $VM = new VM(...);
        ...
        $VM.run($CODE,...);
    - pattern: |
        new VM(...).run($CODE,...);
    - pattern: |
        $VM = new NodeVM(...);
        ...
        $VM.run($CODE,...);
    - pattern: |
        new NodeVM(...).run($CODE,...);
    - pattern: |
        new VMScript($CODE,...);
  - pattern-not: |
      $VM = new VM(...);
      ...
      $VM.run("...",...);
  - pattern-not: |
      $VM = new NodeVM(...);
      ...
      $VM.run("...",...);
  - pattern-not: |
      (new VM(...)).run("...",...);
  - pattern-not: |
      (new NodeVM(...)).run("...",...);
  - pattern-not: new VMScript("...",...);
- id: javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
  patterns:
  - pattern-either:
    - pattern: |
        $THENIFY($FN, {multiArgs: ...},...)
    - pattern: |
        $OPTS = {multiArgs: ...};
        ...
        $THENIFY($FN,$OPTS,...);
  - pattern-not: |
      $THENIFY($FN, {multiArgs: false},...)
  - pattern-not: |
      $OPTS = {multiArgs: false};
      ...
      $THENIFY($FN,$OPTS,...)
  - pattern-either:
    - pattern-inside: |
        $THENIFY = require('thenify');
        ...
    - pattern-inside: |
        import 'thenify';
        ...
  message: |
    Potential arbitrary code execution, piped to eval
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
  message: |
    If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      $WK = require('wkhtmltopdf');
      ...
  - pattern-not-inside: |
      var $INPUT = "...";
      ...
  - pattern: $WK($INPUT,...)
  - pattern-not: $WK("...",...)
- id: javascript.node-expat.security.audit.expat-xxe.expat-xxe
  message: |
    If unverified user data can reach the XML Parser it can result in XML External or
    Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
  severity: WARNING
  languages:
  - javascript
  patterns:
  - pattern-either:
    - pattern: |
        var $EXPAT = require('node-expat');
        ...
        new $EXPAT.Parser(...);
        ...
        $PARSER.parse(...);
    - pattern: |
        var $EXPAT = require('node-expat');
        ...
        new $EXPAT.Parser(...);
        ...
        $PARSER.write(...);
    - pattern: |
        require('node-expat');
        ...
        new Parser(...);
        ...
        $PARSER.parse(...);
    - pattern: |
        require('node-expat');
        ...
        new Parser(...);
        ...
        $PARSER.write(...);
  - pattern-not: |
      var $EXPAT = require('node-expat');
      ...
      new $EXPAT.Parser(...);
      ...
      $PARSER.parse("...");
  - pattern-not: |
      var $EXPAT = require('node-expat');
      ...
      new $EXPAT.Parser(...);
      ...
      $PARSER.write("...");
  - pattern-not: |
      require('node-expat');
      ...
      new Parser(...);
      ...
      $PARSER.parse("...");
  - pattern-not: |
      require('node-expat');
      ...
      new Parser(...);
      ...
      $PARSER.write("...");
  - pattern-not: |
      $X = "...";
      ...
      $PARSER.parse($X);
  - pattern-not: |-
      $X = "...";
      ...
      $PARSER.write($X);
- id: javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
  message: |
    If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('puppeteer');
      ...
  - pattern-inside: |
      ...
      require('express');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.goto(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluate($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluate($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);
- id: javascript.express.security.require-request.require-request
  message: |
    If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: require(<... $REQ.$QUERY.$FOO ...>)
    - pattern: require(<... $REQ.$BODY ...>)
- id: javascript.express.security.express-vm-injection.express-vm-runincontext-context-injection
  message: |
    Make sure that unverified user data can not reach vm.runInContext.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInContext($CODE,<... $CONTEXT ...>,...);
- id: javascript.express.security.express-vm-injection.express-vm-runinnewcontext-context-injection
  message: |
    Make sure that unverified user data can not reach vm.runInNewContext.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.runInNewContext($CODE,<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VM.runInNewContext($CODE,<... $REQ.$BODY ...>,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
- id: javascript.express.security.express-vm-injection.express-vm-compilefunction-context-injection
  message: |
    Make sure that unverified user data can not reach vm.compileFunction.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$QUERY.$FOO ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {parsingContext: <... $REQ.$QUERY.$FOO ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$BODY ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {parsingContext: <... $REQ.$BODY ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {parsingContext: <... $CONTEXT ...>};
        ...
        $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
- id: javascript.express.security.express-vm-injection.express-vm-code-injection
  message: |
    Make sure that unverified user data can not reach vm instance.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $VM.runInContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInContext($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInContext($INPUT,...);
    - pattern: $VM.runInNewContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInNewContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInNewContext($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInNewContext($INPUT,...);
    - pattern: $VM.runInThisContext(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.runInThisContext(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.runInThisContext($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.runInThisContext($INPUT,...);
    - pattern: $VM.compileFunction(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $VM.compileFunction(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.compileFunction($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $VM.compileFunction($INPUT,...);
    - pattern: new $VM.Script(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: new $VM.Script(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $VM.Script($INPUT,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        new $VM.Script($INPUT,...);
- id: javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
  message: |
    Make sure that unverified user data can not reach `sandbox`.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $SANDBOX = require('sandbox');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $S = new $SANDBOX(...);
        ...
        $S.run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $S = new $SANDBOX(...);
        ...
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $S.run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $S = new $SANDBOX(...);
        ...
        $S.run(<... $CODE ...>,...);
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...);
    - pattern: |
        $S = new $SANDBOX(...);
        ...
        $S.run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $S = new $SANDBOX(...);
        ...
        $CODE = <... $REQ.$BODY ...>;
        ...
        $S.run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $S = new $SANDBOX(...);
        ...
        $S.run(<... $CODE ...>,...);
    - pattern: |
        new $SANDBOX(...).run(<... $REQ.$BODY ...>,...);
    - pattern: |-
        $CODE = <... $REQ.$BODY ...>;
        ...
        new $SANDBOX(...).run(<... $CODE ...>,...);
- id: javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
  message: |
    If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      $WK = require('wkhtmltoimage');
      ...
  - pattern-inside: |
      ...
      require('express');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $WK.generate(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $WK.generate(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $WK.generate(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $WK.generate(<... $INPUT ...>,...);
- id: javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
  message: |
    If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      $WK = require('wkhtmltopdf');
      ...
  - pattern-inside: |
      ...
      require('express');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $WK(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $WK(<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $WK(<... $INPUT ...>,...);
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $WK(<... $INPUT ...>,...);
- id: javascript.express.security.express-vm2-injection.express-vm2-code-injection
  message: |
    Make sure that unverified user data can not reach `vm2`.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      require('vm2');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $VM = new VM(...);
        ...
        $VM.run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $VM = new VM(...);
        ...
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM = new VM(...);
        ...
        $VM.run(<... $CODE ...>,...);
    - pattern: |
        new VM(...).run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VM(...).run($CODE,...);
    - pattern: |
        $VM = new NodeVM(...);
        ...
        $VM.run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $VM = new NodeVM(...);
        ...
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM.run($CODE,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        $VM = new NodeVM(...);
        ...
        $VM.run($CODE,...);
    - pattern: |
        new NodeVM(...).run(<... $REQ.$QUERY.$FOO ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new NodeVM(...).run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VMScript(<... $CODE ...>,...);
    - pattern: |
        $VM = new VM(...);
        ...
        $VM.run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $VM = new VM(...);
        ...
        $CODE = <... $REQ.$BODY ...>;
        ...
        $VM.run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $VM = new VM(...);
        ...
        $VM.run(<... $CODE ...>,...);
    - pattern: |
        new VM(...).run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new VM(...).run($CODE,...);
    - pattern: |
        $VM = new NodeVM(...);
        ...
        $VM.run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $VM = new NodeVM(...);
        ...
        $CODE = <... $REQ.$BODY ...>;
        ...
        $VM.run($CODE,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        $VM = new NodeVM(...);
        ...
        $VM.run($CODE,...);
    - pattern: |
        new NodeVM(...).run(<... $REQ.$BODY ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new NodeVM(...).run(<... $CODE ...>,...);
    - pattern: |
        $CODE = <... $REQ.$BODY ...>;
        ...
        new VMScript(<... $CODE ...>,...);
- id: javascript.express.security.express-vm2-injection.express-vm2-context-injection
  message: |
    Make sure that unverified user data can not reach `vm2`.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      require('vm2');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        new VM({sandbox: <... $REQ.$QUERY.$FOO ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        new NodeVM({sandbox: <... $REQ.$QUERY.$FOO ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        new VM({sandbox: <... $REQ.$BODY ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new VM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$BODY ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new VM($OPTS,...);
    - pattern: |
        new NodeVM({sandbox: <... $REQ.$BODY ...>},...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        new NodeVM({sandbox: <... $CONTEXT ...>},...);
    - pattern: |
        $OPTS = {sandbox: <... $REQ.$BODY ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = <... $REQ.$BODY ...>;
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |
        $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
    - pattern: |-
        $VAR = <... $REQ.$BODY ...>;
        ...
        $CONTEXT = {$NAME: <... $VAR ...>};
        ...
        $OPTS = {sandbox: <... $CONTEXT ...>};
        ...
        new NodeVM($OPTS,...);
- id: javascript.express.security.express-phantom-injection.express-phantom-injection
  message: |
    If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('phantom');
      ...
  - pattern-inside: |
      ...
      require('express');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PAGE.open(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.open(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.openUrl(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.evaluateJavaScript(<... $REQ.$BODY ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $PAGE.property("content",<... $REQ.$BODY ...>,...)
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.open(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.open(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.setContent(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.openUrl(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.openUrl(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.evaluateJavaScript(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.evaluateJavaScript(<... $INPUT ...>,...);
    - pattern: |
        $INPUT = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PAGE.property("content",<... $INPUT ...>,...);
    - pattern: |-
        $INPUT = <... $REQ.$BODY ...>;
        ...
        $PAGE.property("content",<... $INPUT ...>,...);
- id: javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
  message: |
    Xml Parser is used inside Request Event.
    Make sure that unverified user data can not reach the XML Parser,
    as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
  severity: WARNING
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('xml2json');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern: $REQ.on('...', function(...) { ... $EXPAT.toJson($INPUT,...); ... });
- id: javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
  message: |
    Possible writing outside of the destination,
    make sure that the target path is nested in the intended destination
  languages:
  - javascript
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path
      Traversal)'
  severity: WARNING
  patterns:
  - pattern-inside: |
      ...
      $PATH = require('path');
      ...
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $PATH.join(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.join(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: |
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: $PATH.resolve(...,<... $REQ.$BODY ...>,...)
    - pattern: $PATH.resolve(...,<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: |
        $VAR = <... $REQ.$BODY ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
    - pattern: |-
        $VAR = <... $REQ.$QUERY.$FOO ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
  message: "Don\u2019t use the default session cookie name\nUsing the default session
    cookie name can open your app to attacks.\nThe security issue posed is similar
    to X-Powered-By: a potential attacker can use it to fingerprint the server and
    target attacks accordingly.\n"
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
  patterns:
  - pattern-either:
    - pattern-inside: |
        ...
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        ...
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {name:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.name = ...;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
  message: |
    Default session middleware settings: `secure` not set.
    It ensures the browser only sends the cookie over HTTPS.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
  patterns:
  - pattern-either:
    - pattern-inside: |
        ...
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        ...
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{secure:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.secure = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.secure = true;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
  message: |
    Default session middleware settings: `httpOnly` not set.
    It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
  patterns:
  - pattern-either:
    - pattern-inside: |
        ...
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        ...
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{httpOnly:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{httpOnly:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {httpOnly:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {httpOnly:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.httpOnly = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.httpOnly = true;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
  message: |
    Default session middleware settings: `domain` not set.
    It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested.
    If they match, then check the path attribute next.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
  patterns:
  - pattern-either:
    - pattern-inside: |
        ...
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        ...
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{domain:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.domain = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.domain = ...;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
  message: |
    Default session middleware settings: `path` not set.
    It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
  patterns:
  - pattern-either:
    - pattern-inside: |
        ...
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        ...
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{path:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.path = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.path = ...;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
  message: |
    Default session middleware settings: `expires` not set.
    Use it to set expiration date for persistent cookies.
  severity: WARNING
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
  patterns:
  - pattern-either:
    - pattern-inside: |
        ...
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        ...
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{expires:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{expires:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {expires:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {expires:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.expires = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |-
      $OPTS = ...;
      ...
      $OPTS.cookie.expires = ...;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.res-render-injection.res-render-injection
  message: |
    If an attacker controls the x in res.render(x) then they can cause code to load that was not intended to run on the server.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
  patterns:
  - pattern-either:
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: $RES.render(<... $REQ.$QUERY.$FOO ...>,...)
    - pattern: $RES.render(<... $REQ.$BODY ...>,...)
- id: javascript.express.security.audit.xss.direct-response-write.direct-response-write
  message: Detected direclty writing to a Response object. This bypasses any HTML
    escaping and may expose your app to a cross-site scripting (XSS) vulnerability.
    Instead, use 'resp.render()' to render safely escaped HTML.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A7: Cross-Site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
  patterns:
  - pattern-inside: |
      function ($REQ, $RES) { ... }
  - pattern-not: $RES.$ANY("...")
  - pattern-either:
    - pattern: $RES.write(...)
    - pattern: $RES.send(...)
- id: javascript.express.security.audit.xss.mustache.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
  languages:
  - generic
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern: '{{ ... }}'
- id: javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
  languages:
  - generic
  paths:
    include:
    - '*.ejs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not-inside: <script ... $ATTR = "..." ...>
  - pattern-not-inside: <script ... $ATTR = '...' ...>
  - pattern: <% ... >
- id: javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
  message: |
    If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('puppeteer');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC (...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,...,<... $INPUT ...>,...)
- id: javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
  message: |
    If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('puppeteer');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: $PAGE.setContent($INPUT,...)
  - pattern-not: $PAGE.setContent("...",...)
- id: javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
  message: |
    If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('puppeteer');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: $PAGE.goto($INPUT,...)
  - pattern-not: $PAGE.goto("...",...)
- id: javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
  message: |
    Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('puppeteer');
      ...
  - pattern-either:
    - pattern-regex: --remote-debugging-address
    - pattern-regex: --remote-debugging-port
    - pattern-regex: --remote-debugging-socket-name
    - pattern-regex: --remote-debugging-targets
- id: javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
  message: |
    If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('puppeteer');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = function $FNAME(...){...};
      ...
  - pattern-either:
    - pattern: $PAGE.evaluate($INPUT,...)
    - pattern: $PAGE.evaluateHandle($INPUT,...)
    - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
  - pattern-not: $PAGE.evaluate("...",...)
  - pattern-not: $PAGE.evaluate(function(...){...},...)
  - pattern-not: $PAGE.evaluate(function $FNAME(...){...},...)
  - pattern-not: $PAGE.evaluateHandle("...",...)
  - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
  - pattern-not: $PAGE.evaluateHandle(function $FNAME(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function $FNAME(...){...},...)
- id: javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
  patterns:
  - pattern-either:
    - pattern: $UTIL.toFastProperties(...)
    - pattern: toFastProperties(...)
  - pattern-not: |
      $UTIL.toFastProperties("...",...)
  - pattern-not: |
      toFastProperties("...",...)
  - pattern-either:
    - pattern-inside: |
        $BB = require('bluebird');
        ...
    - pattern-inside: |
        import 'bluebird';
        ...
  message: |
    Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
  message: |
    If unverified user data can reach the `exec` method it can result in Remote Code Execution
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (OS Command Injection)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('shelljs');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: $SHELL.exec($INPUT,...)
  - pattern-not: $SHELL.exec("...",...)
- id: javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
  message: |
    If unverified user data can reach the XML Parser it can result in XML External or
    Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
  severity: WARNING
  languages:
  - javascript
  patterns:
  - pattern: |
      var $XML = require('xml2json');
      ...
      $XML.toJson(...);
  - pattern-not: |
      var $XML = require('xml2json');
      ...
      $XML.toJson("...",...);
  - pattern-not: |-
      var $XML = require('xml2json');
      ...
      var $S = "...";
      ...
      $XML.toJson($S,...);
- id: generic.secrets.security.detected-aws-account-id.detected-aws-account-id
  pattern-regex: ("|')?(AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?("|')?\s*(:|=>|=)\s*("|')?[0-9]{12}("|')?
  languages:
  - regex
  message: AWS Account ID detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
  patterns:
  - pattern-either:
    - pattern: createNodesFromMarkup(...)
    - pattern: $X.createNodesFromMarkup(...)
  - pattern-not: createNodesFromMarkup("...",...)
  - pattern-not: $X.createNodesFromMarkup("...",...)
  message: |
    User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.sax.security.audit.sax-xxe.sax-xxe
  message: |
    Use of 'ondoctype' in 'sax' library detected. By default, 'sax'
    won't do anything with custom DTD entity definitions. If you're
    implementing a custom DTD entity definition, be sure not to introduce
    XML External Entity (XXE) vulnerabilities, or be absolutely sure that
    external entities received from a trusted source while processing XML.
  metadata:
    owasp: 'A4: XML External Entities (XXE)'
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    references:
    - https://github.com/Leonidas-from-XIV/node-xml2js/issues/415
    - https://github.com/isaacs/sax-js
  severity: WARNING
  languages:
  - javascript
  pattern-either:
  - pattern: |
      require('sax');
      ...
      $PARSER.ondoctype = ...;
  - pattern: |-
      require('sax');
      ...
      $PARSER.on('doctype',...);
- id: javascript.jquery.security.audit.prohibit-jquery-html.prohibit-jquery-html
  patterns:
  - pattern: |
      $X.html(...)
  - pattern-not: |
      $X.html("...",...)
  message: |
    JQuery's html function can lead to XSS. If the string is plain test, use the text function instead.
    Otherwise, use a function that escapes html such as edx's HtmlUtils.setHtml.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html
    - https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks
  languages:
  - js
  severity: WARNING
- id: javascript.vue.security.audit.xss.templates.avoid-v-html.avoid-v-html
  message: Dynamically rendering arbitrary HTML on your website can be very dangerous
    because it can easily lead to XSS vulnerabilities. Only use HTML interpolation
    on trusted content and never on user-provided content.
  metadata:
    references:
    - https://vuejs.org/v2/guide/syntax.html#Raw-HTML
  languages:
  - regex
  paths:
    include:
    - '*.vue'
  severity: WARNING
  pattern-regex: <[^<>]*v-html=
- id: javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
  message: |
    Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker
    could tamper with the gRPC message, which could compromise the machine.
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
  severity: ERROR
  languages:
  - javascript
  pattern-either:
  - pattern: |
      require('grpc');
      ...
      $GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);
  - pattern: |-
      require('grpc');
      ...
      $CREDS = <... $CREDENTIALS.createInsecure() ...>;
      ...
      $GRPC($ADDR,...,$CREDS,...);
- id: javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
  patterns:
  - pattern-either:
    - pattern: |
        window.addEventListener(...)
  - pattern-not: |
      window.addEventListener(..., function($OBJECT){ if ($OBJ.origin == $X) {
                  ...
              } })
  - pattern-not: |
      window.addEventListener(..., function($OBJECT){ if ($REGEX.test($OBJECT.origin)){
          ...
      } })
  - pattern-not: |
      window.addEventListener(..., function($OBJECT){ if ($OBJ.origin !== $X) {
                  ...
              } })
  message: |
    No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
  languages:
  - javascript
  - typescript
  fix: ''
  severity: WARNING
  metadata:
    owasp: 'A6: Sensitive Data Exposure'
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
- id: javascript.browser.security.raw-html-concat.raw-html-concat
  message: User controlled data in a HTML string may result in XSS
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/xss/
  patterns:
  - pattern-either:
    - pattern: |
        "..." + (<... window ...>);
    - pattern: |
        (<... window ...>) + "...";
    - pattern: |
        "..." + (<... location ...>);
    - pattern: |
        (<... location ...>) + "...";
    - pattern: |
        "..." + (<... document ...>);
    - pattern: |
        (<... document ...>) + "...";
    - pattern: |
        "...".concat(..., <... window ...>, ...);
    - pattern: |
        (<... window ...>).concat(..., "...", ...);
    - pattern: |
        "...".concat(..., <... location ...>, ...);
    - pattern: |
        (<... location ...>).concat(..., "...", ...);
    - pattern: |
        "...".concat(..., <... document ...>, ...);
    - pattern: |
        (<... document ...>).concat(..., "...", ...);
    - pattern: |
        ["...", <... window ...>, ...].join(...);
    - pattern: |
        ["...", <... location ...>, ...].join(...);
    - pattern: |
        ["...", <... document ...>, ...].join(...);
    - pattern: |
        [..., <... window ...>, "..."].join(...);
    - pattern: |
        [..., <... location ...>, "..."].join(...);
    - pattern: |
        [..., <... document ...>, "..."].join(...);
    - pattern: |
        `...${<... window ...>}...`
    - pattern: |
        `...${<... location ...>}...`
    - pattern: |
        `...${<... document ...>}...`
    - patterns:
      - pattern-either:
        - pattern-inside: |
            function $FUNC(..., $X, ...) {
              ...
            }
        - pattern-inside: |
            function (..., $X, ...) {
              ...
            }
        - pattern-inside: |
            function $FUNC(...) {
              ...
              $X = (<... document ...>);
              ...
            }
        - pattern-inside: |
            function (...) {
              ...
              $X = (<... document ...>);
              ...
            }
        - pattern-inside: |
            function $FUNC(...) {
              ...
              $X = (<... window ...>);
              ...
            }
        - pattern-inside: |
            function (...) {
              ...
              $X = (<... window ...>);
              ...
            }
        - pattern-inside: |
            function $FUNC(...) {
              ...
              $X = (<... location ...>);
              ...
            }
        - pattern-inside: |
            function (...) {
              ...
              $X = (<... location ...>);
              ...
            }
      - pattern-not-inside: |
          $ARRAY.map(function $FUNC($X, ...) {
            ...
          })
      - pattern-not-inside: |
          $ARRAY.every(function $FUNC($X, ...) {
            ...
          })
      - pattern-not-inside: |
          $ARRAY.reduce(function $FUNC($ACC, $X, ...) {
            ...
          })
      - pattern-not-inside: |
          $ARRAY.reduceRight(function $FUNC($PREV, $X, ...) {
            ...
          })
      - pattern-not-inside: |
          $ARRAY.forEach(function $FUNC($X, ...) {
            ...
          })
      - pattern-either:
        - pattern: |
            "..." + (<... $X ...>);
        - pattern: |
            "..." + (<... $X[...] ...>);
        - pattern: |
            "..." + (<... $X.$PROPERTY ...>);
        - pattern: |
            "..." + (<... $X.$METHOD(...) ...>);
        - pattern: |
            "..." + (<... $X.$PROPERTY.$METHOD(...) ...>);
        - pattern: |
            (<... $X ...>) + "...";
        - pattern: |
            (<... $X[...] ...>) + "...";
        - pattern: |
            (<... $X.$PROPERTY ...>) + "...";
        - pattern: |
            (<... $X.$METHOD(...) ...>) + "...";
        - pattern: (<... $X.$PROPERTY.$METHOD(...) ...>) + "...";
        - pattern: |
            "...".concat(..., <... $X ...>, ...);
        - pattern: |
            "...".concat(..., <... $X[...] ...>, ...);
        - pattern: |
            "...".concat(..., <... $X.$PROPERTY ...>, ...);
        - pattern: |
            "...".concat(..., <... $X.$METHOD(...) ...>, ...);
        - pattern: |
            "...".concat(..., <... $X.$PROPERTY.$METHOD(...) ...>, ...);
        - pattern: |
            (<... $X ...>).concat(..., "...", ...);
        - pattern: |
            (<... $X[...] ...>).concat(..., "...", ...);
        - pattern: |
            (<... $X.$PROPERTY ...>).concat(..., "...", ...);
        - pattern: |
            (<... $X.$METHOD(...) ...>).concat(..., "...", ...);
        - pattern: (<... $X.$PROPERTY.$METHOD(...) ...>).concat(..., "...", ...);
        - pattern: |
            ["...", <... $X ...>, ...].join(...);
        - pattern: |
            ["...", <... $X[...] ...>, ...].join(...);
        - pattern: |
            ["...", <... $X.$PROPERTY ...>, ...].join(...);
        - pattern: |
            ["...", <... $X.$METHOD ...>, ...].join(...);
        - pattern: |
            ["...", <... $X.$PROPERTY.$METHOD(...) ...>, ...].join(...);
        - pattern: |
            [..., <... $X ...>, "..."].join(...);
        - pattern: |
            [..., <... $X[...] ...>, "..."].join(...);
        - pattern: |
            [..., <... $X.$PROPERTY ...>, "..."].join(...);
        - pattern: |
            [..., <... $X.$METHOD ...>, "..."].join(...);
        - pattern: |
            [..., <... $X.$PROPERTY.$METHOD(...) ...>, "..."].join(...);
        - pattern: |
            `...${<... $X ...>}...`;
        - pattern: |
            `...${<... $X[...] ...>}...`;
        - pattern: |
            `...${<... $X.$PROPERTY ...>}...`;
        - pattern: |
            `...${<... $X.$METHOD(...) ...>}...`;
        - pattern: |
            `...${<... $X.$PROPERTY.$METHOD(...) ...>}...`;
  - pattern-not: $X + "";
  - pattern-not: '"" + $X;'
  - pattern-not: $X = $X + "...";
  - pattern-not: $X = "..." + $X;
- id: javascript.angular.security.detect-angular-trust-as-url-method.detect-angular-trust-as-url-method
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsUrl($SOURCE);
    - pattern: |
        $sce.trustAsUrl($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $sce.trustAsUrl can be dangerous if unsantiized user input flows through this API.
  languages:
  - javascript
  severity: WARNING
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
- id: javascript.angular.security.detect-angular-trust-as-css.detect-angular-trust-as-css-method
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsCss($SOURCE);
    - pattern: |
        $sce.trustAsCss($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $sce.trustAsCss can be dangerous if unsantiized user input flows through this API.
  severity: WARNING
  languages:
  - javascript
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsCss
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
- id: javascript.angular.security.detect-angular-trust-as-resourceurl-method.detect-angular-trust-as-resourceurl-method
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsResourceUrl($SOURCE);
    - pattern: |
        $sce.trustAsResourceUrl($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $sce.trustAsResourceUrl can be dangerous if unsantiized user input flows through this API.
  languages:
  - javascript
  severity: WARNING
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
- id: javascript.angular.security.detect-angular-trust-as-html-method.detect-angular-trust-as-html-method
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsHtml($SOURCE);
    - pattern: |
        $sce.trustAsHtml($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $sce.trustAsHtml can be dangerous if unsantiized user input flows through this API.
  languages:
  - javascript
  severity: WARNING
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
- id: javascript.angular.security.detect-third-party-angular-translate.detect-angular-translateprovider-useStrategy-method
  patterns:
  - pattern-either:
    - pattern: |
        $translateSanitization.useStrategy();
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    If the $translateSanitization.useStrategy is set to null or blank this can be dangerous.
  languages:
  - javascript
  severity: WARNING
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
- id: javascript.angular.security.detect-third-party-angular-translate.detect-angular-translateprovider-translations-method
  patterns:
  - pattern-either:
    - pattern: |
        $translateProvider.translations(...,$SOURCE);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $translateProvider.translations method can be dangerous if user input is provided to this API.
  languages:
  - javascript
  severity: WARNING
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
- id: javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled
  pattern: |
    $sceProvider.enabled(false);
  message: |
    $sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.
  languages:
  - javascript
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  severity: ERROR
- id: javascript.angular.security.detect-angular-trust-as-js-method.detect-angular-trust-as-js-method
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsJs($SOURCE);
    - pattern: |
        $sce.trustAsJs($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $sce.trustAsJs can be dangerous if unsantiized user input flows through this API.
  severity: WARNING
  languages:
  - javascript
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
- id: javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAs($sce.$TRUSTMETHOD,$SOURCE);
    - pattern: |
        $sce.trustAs($sce.$TRUSTMETHOD,$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
  message: |
    The use of $sce.trustAs can be dangerous if unsantiized user input flows through this API.
  languages:
  - javascript
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
  severity: WARNING
- id: javascript.lang.correctness.useless-eqeq.eqeq-is-bad
  patterns:
  - pattern-not-inside: assert(...)
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: |
    Detected a useless comparison operation `$X == $X` or `$X != $X`. This
    operation is always true.
    If testing for floating point NaN, use `math.isnan`, or
    `cmath.isnan` if the number is complex.
  languages:
  - javascript
  - typescript
  severity: ERROR
- id: javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md
  message: |
    Detected use of express.csrf() middleware before express.methodOverride(). This can
    allow GET requests (which are not checked by csrf) to turn into POST requests later.
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.best-practice.leftover_debugging.javascript-alert
  patterns:
  - pattern-either:
    - pattern: alert()
    - pattern: alert($X)
  message: found alert() call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.lang.best-practice.leftover_debugging.javascript-debugger
  pattern: debugger;
  message: found debugger call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.lang.best-practice.leftover_debugging.javascript-confirm
  pattern: confirm(...)
  message: found conform() call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.lang.best-practice.leftover_debugging.javascript-prompt
  patterns:
  - pattern-either:
    - pattern: prompt()
    - pattern: prompt($X)
    - pattern: prompt($X, $Y)
  message: found prompt() call; should this be in production code?
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert
  metadata:
    cwe: 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory
      Buffer'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
  message: |
    Detected usage of noassert in Buffer API, which allows the offset the be beyond the
    end of the buffer. This could result in writing or reading beyond the end of the buffer.
  patterns:
  - pattern: $OBJ.$API(..., true)
  - metavariable-regex:
      metavariable: $API
      regex: (read|write)(U?Int8|(U?Int(16|32)|Float|Double)(LE|BE))
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.security.detect-non-literal-require.detect-non-literal-require
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
  message: |
    Detected the use of require(variable). Calling require with a non-literal argument might
    allow an attacker to load an run arbitrary code, or access arbitrary files.
  patterns:
  - pattern: require($OBJ)
  - pattern-not: require('...')
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.security.spawn-git-clone.spawn-git-clone
  message: |
    Git allows shell commands to be specified in ext URLs for remote repositories.
    For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository.
    Make sure that the URL is not controlled by external input.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: spawn('git', ['clone',...,$F])
    - pattern: $X.spawn('git', ['clone',...,$F])
    - pattern: spawn('git', ['clone',...,$P,$F])
    - pattern: $X.spawn('git', ['clone',...,$P,$F])
  - pattern-not: spawn('git', ['clone',...,"..."])
  - pattern-not: $X.spawn('git', ['clone',...,"..."])
  - pattern-not: spawn('git', ['clone',...,"...","..."])
  - pattern-not: $X.spawn('git', ['clone',...,"...","..."])
- id: javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
  metadata:
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A7: Cross-Site Scripting XSS'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
  message: |
    Markup escaping disabled. This can be used with some template engines to escape
    disabling of HTML entities, which can lead to XSS attacks.
  pattern: $OBJ.escapeMarkup = false
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
  patterns:
  - pattern: $SQL.query(...)
  - pattern-not: $SQL.query("...")
  message: |
    Non-constant SQL query detected. Ensure this is not controlled
    by external data, otherwise this is a SQL injection.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
  severity: INFO
  languages:
  - javascript
  - typescript
- id: javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
  patterns:
  - pattern-inside: |
      $UNK = $ANYFUNC(...);
      ...
      $OTHERFUNC(..., <... $UNK ...>, ...);
  - pattern: $OTHERFUNC(..., <... "=~/.*<script.*/" ...>, ...)
  message: |
    Cannot determine what '$UNK' is and it is used with a '<script>' tag. This
    could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not
    externally controlled, or sanitize this data.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://www.developsec.com/2017/11/09/xss-in-a-script-tag/
    - https://github.com/bkimminich/juice-shop/blob/master/routes/videoHandler.js#L64
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.security.audit.detect-bracket-object-injection.detect-bracket-object-injection
  patterns:
  - pattern-either:
    - pattern: |
        const $VAR = $OBJ[$FIELD];
  - pattern-not: |
      const $VAR = $OBJ["..."];
  - pattern-not-inside: |
      const $FIELD = ...;
      ...
  message: |
    Object injection via bracket notation via $FIELD
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: meta.unnecessary-parent.unnecessary-parent-operator
  message: Unnecessary parent operator. Remove one to fix.
  languages:
  - yaml
  patterns:
  - pattern-inside: 'rules: [..., $RULE, ...]'
  - pattern-either:
    - patterns:
      - pattern: |
          pattern-either:
          - $THING1
          - ...
      - pattern-not: |
          pattern-either:
          - $THING1
          - $THING2
          - ...
    - patterns:
      - pattern: |
          patterns:
          - $THING1
          - ...
      - pattern-not: |
          patterns:
          - $THING1
          - $THING2
          - ...
  severity: WARNING
- id: javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes
  metadata:
    cwe: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp: 'A9: Using Components with Known Vulnerabilities'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
    asvs:
      section: 'V6: Stored Cryptography Verification Requirements'
      control_id: 6.3.1 Insecure Randomness
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v63-random-values
      version: '4'
  message: |
    Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.
  pattern: crypto.pseudoRandomBytes
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.commons.httpclient
  message: |
    A parameter being passed directly into HttpClient functions most likely lead to SSRF.
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    source-rule-url: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        $RETURN $METHOD(...,String $VAR, ...) {
          ...
          HttpClient $CLIENT = new HttpClient();
          ...
          $METHODOBJ = new $METHODCLASS($VAR);
          ...
          $CLIENT.executeMethod($METHODOBJ);
          ...
        }
  - pattern-not: |
      $RETURN $METHOD(...,String $VAR, ...) {
        ...
        HttpClient $CLIENT = new HttpClient();
        ...
        $METHODOBJ = new $METHODCLASS("...");
        ...
        $CLIENT.executeMethod($METHODOBJ);
        ...
      }
  languages:
  - java
- id: contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.org.apache.http.impl.client.CloseableHttpClient
  message: |
    A parameter being passed directly into CloseableHttpClient functions most likely lead to SSRF.
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    source-rule-url: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        $RETURN $METHOD(...,String $VAR, ...) {
          ...
          CloseableHttpClient $CLIENT = ... ;
          ...
          $METHODOBJ = new $METHODCLASS($VAR);
          ...
          HttpResponse httpResponse = $CLIENT.execute($METHODOBJ);
          ...
        }
    - pattern: |
        $RETURN $METHOD(...,String $VAR, ...) {
          ...
          CloseableHttpClient $CLIENT = ... ;
          ...
          $METHODOBJ = new $METHODCLASS("...");
          ...
          HttpResponse httpResponse = $CLIENT.execute($METHODOBJ);
          ...
        }
  languages:
  - java
- id: ruby.rails.security.audit.xss.templates.avoid-html-safe.avoid-html-safe
  message: |-
    'html_safe' renders raw HTML. This means that normal
    HTML escaping is bypassed. If user data can be controlled here, this
    exposes your application to cross-site scripting (XSS). If you need to
    do this, be sure to correctly sanitize the data using a library such as
    DOMPurify.
  metadata:
    references:
    - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===
    - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern: $SOMETHING.html_safe
- id: javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
  patterns:
  - pattern-inside: |
      ...
      $PATH = require('path');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC(...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PATH.join(...,<... $INPUT ...>,...)
    - pattern: $PATH.join(...,<... $INPUT.$FOO ...>,...)
    - pattern: $PATH.join(...,<... $INPUT.$FOO.$BAR ...>,...)
    - pattern: |
        $VAR = <... $INPUT ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: |
        $VAR = <... $INPUT.$FOO ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: |
        $VAR = <... $INPUT.$FOO.$BAR ...>;
        ...
        $PATH.join(...,<... $VAR ...>,...);
    - pattern: $PATH.resolve(...,<... $INPUT ...>,...)
    - pattern: $PATH.resolve(...,<... $INPUT.$FOO ...>,...)
    - pattern: $PATH.resolve(...,<... $INPUT.$FOO.$BAR ...>,...)
    - pattern: |
        $VAR = <... $INPUT ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
    - pattern: |
        $VAR = <... $INPUT.$FOO ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
    - pattern: |
        $VAR = <... $INPUT.$FOO.$BAR ...>;
        ...
        $PATH.resolve(...,<... $VAR ...>,...);
  message: |
    Possible writing outside of the destination,
    make sure that the target path is nested in the intended destination
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A5: Broken Access Control'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path
      Traversal)'
  severity: WARNING
- id: javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
  message: |
    If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('playwright');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = function $FNAME(...){...};
      ...
  - pattern: $CONTEXT.addInitScript($INPUT,...)
  - pattern-not: $CONTEXT.addInitScript("...",...)
  - pattern-not: $CONTEXT.addInitScript(function(...){...},...)
  - pattern-not: $CONTEXT.addInitScript(function $FNAME(...){...},...)
- id: javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
  message: |
    If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('playwright');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: $PAGE.setContent($INPUT,...)
  - pattern-not: $PAGE.setContent("...",...)
- id: javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
  message: |
    If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('playwright');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC (...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
- id: javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
  message: |
    If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('playwright');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: $PAGE.goto($INPUT,...)
  - pattern-not: $PAGE.goto("...",...)
- id: javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
  message: |
    Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('playwright');
      ...
  - pattern-either:
    - pattern-regex: --remote-debugging-address
    - pattern-regex: --remote-debugging-port
    - pattern-regex: --remote-debugging-socket-name
    - pattern-regex: --remote-debugging-targets
- id: javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
  message: |
    If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('playwright');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = function $FNAME(...){...};
      ...
  - pattern-either:
    - pattern: $PAGE.evaluate($INPUT,...)
    - pattern: $PAGE.evaluateHandle($INPUT,...)
    - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
  - pattern-not: $PAGE.evaluate("...",...)
  - pattern-not: $PAGE.evaluate(function(...){...},...)
  - pattern-not: $PAGE.evaluate(function $FNAME(...){...},...)
  - pattern-not: $PAGE.evaluateHandle("...",...)
  - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
  - pattern-not: $PAGE.evaluateHandle(function $FNAME(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function $FNAME(...){...},...)
- id: contrib.owasp.java.xxe.saxparserfactory.owasp.java.xxe.javax.xml.parsers.SAXParserFactory
  message: |
    SAXParserFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing
  metadata:
    cwe: CWE-611
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        SAXParserFactory $SPF =  ... ;
        ...
        SAXParser $SAXPARSER = $SPF.newSAXParser();
        ...
        $SAXPARSER.parse(...);
    - pattern: SAXParserFactory $SPF = SAXParserFactory.newInstance();
    - pattern: SAXParser $SAXPARSER = SAXParserFactory.newInstance().newSAXParser();
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XXX.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        $XXX.setFeature("http://xml.org/sax/features/external-general-entities", false);
        $XXX.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  - pattern-not-inside: |
      SAXParserFactory $SPF = ... ;
      ...
      $SPF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      $SPF.setFeature("http://xml.org/sax/features/external-general-entities", false);
      $SPF.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  languages:
  - java
- id: contrib.owasp.java.xxe.saxreader.owasp.java.xxe.org.dom4j.io.SAXReader
  message: |
    SAXReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing
  metadata:
    cwe: CWE-611
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        SAXReader $SAXREADER = ... ;
        ...
        $SAXREADER.read(...);
    - pattern: SAXReader $SAXREADER = new SAXReader(...);
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $SAXREADER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        $SAXREADER.setFeature("http://xml.org/sax/features/external-general-entities", false);
        $SAXREADER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  - pattern-not-inside: |
      SAXReader $SAXREADER = ... ;
      ...
      $SAXREADER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      $SAXREADER.setFeature("http://xml.org/sax/features/external-general-entities", false);
      $SAXREADER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
      ...
  languages:
  - java
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
  message: |
    If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $RUNTIME.compileScript({expression: $INPUT},...)
  - pattern-not: '$RUNTIME.compileScript({expression: "..."},...)'
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
  message: |
    If unverified user data can reach the `setDocumentContent` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $PAGE.setDocumentContent({html: $INPUT},...)
  - pattern-not: '$PAGE.setDocumentContent({html: "..."},...)'
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
  message: |
    If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $RUNTIME.evaluate({expression: $INPUT},...)
  - pattern-not: '$RUNTIME.evaluate({expression: "..."},...)'
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
  message: |
    If unverified user data can reach the `navigate` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern: |
      $PAGE.navigate({url: $INPUT},...)
  - pattern-not: '$PAGE.navigate({url: "..."},...)'
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
  message: |
    If unverified user data can reach the `printToPDF` method it can result in Server-Side Request Forgery vulnerabilities
  severity: WARNING
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      ...
      require('chrome-remote-interface');
      ...
  - pattern-not-inside: |
      ...
      var $INPUT = "...";
      ...
  - pattern-either:
    - pattern: |
        $RUNTIME.printToPDF({headerTemplate: $INPUT},...)
    - pattern: |
        $RUNTIME.printToPDF({footerTemplate: $INPUT},...)
  - pattern-not: |
      $RUNTIME.printToPDF({headerTemplate: "..."},...)
  - pattern-not: '$RUNTIME.printToPDF({footerTemplate: "..."},...)'
- id: kubernetes.best-practice.no-fractional-cpu-limits.kubernetes.best-practice.no-fractional-cpu-limits
  patterns:
  - pattern-inside: |
      limits:
        ...
  - pattern: |
      cpu: $CPU_LIMIT
  - metavariable-regex:
      metavariable: $CPU_LIMIT
      regex: \d{0,3}m
  fix: 'cpu: 1000m'
  message: |
    When you set a fractional CPU limit on a container,
    the CPU cycles available will be throttled,
    even though most nodes can handle processes
    alternating between using 100% of the CPU.
  severity: WARNING
  paths:
    include:
    - '*.k8s'
    - '*.yml'
    - '*.yaml'
  languages:
  - generic
- id: ruby.rails.security.audit.xss.avoid-raw.avoid-raw
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
  message: |
    'raw()' bypasses HTML escaping. If external data can reach here, this exposes your application
    to cross-site scripting (XSS) attacks. If you must do this, construct individual strings
    and mark them as safe for HTML rendering with `html_safe()`.
  languages:
  - ruby
  severity: WARNING
  pattern: raw(...)
- id: ruby.rails.security.audit.xss.avoid-render-inline.avoid-render-inline
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss
  message: |
    'render inline: ...' renders an entire ERB template inline and is dangerous.
    If external data can reach here, this exposes your application
    to server-side template injection (SSTI) or cross-site scripting (XSS) attacks.
    Instead, consider using a partial or another safe rendering method.
  languages:
  - ruby
  severity: WARNING
  pattern: 'render inline: ...'
- id: ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown
  message: |
    Detected manual creation of an ERB template. Manual creation of templates
    may expose your application to server-side template injection (SSTI) or
    cross-site scripting (XSS) attacks if user input is used to create the
    template. Instead, create a '.erb' template file and use 'render'.
  languages:
  - ruby
  severity: WARNING
  pattern: ERB.new(...)
- id: ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross_site_scripting/index.markdown
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
  message: |
    'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses
    HTML escaping. If external data can reach here, this exposes your application
    to cross-site scripting (XSS) attacks. Ensure no external data reaches here.
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: $STR.html_safe
  - pattern: $STR.html_safe.$MORE
- id: ruby.rails.security.audit.xss.avoid-render-text.avoid-render-text
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss
  message: |
    'render text: ...' actually sets the content-type to 'text/html'.
    If external data can reach here, this exposes your application
    to cross-site scripting (XSS) attacks. Instead, use 'render plain: ...' to
    render non-HTML text.
  languages:
  - ruby
  severity: WARNING
  pattern: 'render text: ...'
  fix-regex:
    regex: 'text:'
    replacement: 'plain:'
- id: ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
  message: |
    'content_tag()' bypasses HTML escaping for some portion of the content.
    If external data can reach here, this exposes your application
    to cross-site scripting (XSS) attacks. Ensure no external data reaches here.
    If you must do this, create your HTML manually and use 'html_safe'. Ensure no
    external data enters the HTML-safe string!
  languages:
  - ruby
  severity: WARNING
  pattern: content_tag(...)
- id: ruby.rails.security.audit.xss.templates.var-in-href.var-in-href
  message: |
    Detected a template variable used in an anchor tag with
    the 'href' attribute. This allows a malicious actor to
    input the 'javascript:' URI and is subject to cross-
    site scripting (XSS) attacks. If using a relative URL,
    start with a literal forward slash and concatenate the URL,
    like this: href='/<%= link =>'. You may also consider setting
    the Content Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  pattern-either:
  - pattern: <a ... href = "<%= ... %>" ... >
  - pattern: <a ... href = '<%= ... %>' ... >
- id: ruby.lang.security.jruby-xml.jruby-xml
  patterns:
  - pattern: |
      XmlMini.backend = $STR
  - pattern-not: |
      XmlMini.backend = "REXML"
  message: |
    The JDOM backend for XmlMini has a vulnerability that lets an attacker perform a denial of service attack
    or gain access to files on the application server. This affects versions 3.0, but is fixed in versions
    3.1.12 and 3.2.13. To fix, either upgrade or use XmlMini.backend="REXML".
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_jruby_xml.rb
  languages:
  - ruby
  severity: WARNING
- id: ruby.lang.security.yaml-parsing.yaml-parsing
  message: |
    Detected enabled YAML parsing. This is vulnerable to remote code execution in Rails 2.x
    versions up to 2.3.14. To fix, delete this line.
  fix-regex:
    regex: ActionController.*:yaml
    replacement: ' '
  severity: WARNING
  languages:
  - ruby
  pattern: ActionController::Base.param_parsers[Mime::YAML] = :yaml
- id: ruby.lang.security.no-send.bad-send
  message: |
    Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe
    use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code     execution.
    Please be sure to sanitize input in order to avoid this.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb
    - https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html
  languages:
  - ruby
  severity: ERROR
  pattern-either:
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.send($PARAM.$FUNC)
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.try($PARAM.$FUNC)
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.__send__($PARAM.$FUNC)
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.public_send($PARAM.$FUNC)
- id: ruby.lang.security.create-with.create-with
  patterns:
  - pattern-not: |
      $FUNC.create_with($PARAMSB.permit(...))
  - pattern: |
      $FUNC.create_with($PARAMSA)
  message: |
    Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which
    could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls
    or use the permit function to specify tags that are allowed to be set.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb
    - https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ
  languages:
  - ruby
  severity: ERROR
- id: ruby.lang.security.model-attr-accessible.model-attr-accessible
  message: |
    Checks for dangerous permitted attributes that can lead to mass assignment vulnerabilities. Query parameters allowed using permit
    and attr_accessible are checked for allowance of dangerous attributes admin, banned, role, and account_id. Also checks for usages of
    params.permit!, which allows everything. Fix: don't allow admin, banned, role, and account_id using permit or attr_accessible.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attr_accessible.rb
  languages:
  - ruby
  severity: ERROR
  pattern-either:
  - pattern: |
      ....permit(..., :admin, ...)
  - pattern: |
      ....permit(..., :role, ...)
  - pattern: |
      ....permit(..., :banned, ...)
  - pattern: |
      ....permit(..., :account_id, ...)
  - pattern: |
      attr_accessible ..., :admin, ...
  - pattern: |
      attr_accessible ..., :role, ...
  - pattern: |
      attr_accessible ..., :banned, ...
  - pattern: |
      attr_accessible ..., :account_id, ...
  - pattern: |
      params.permit!
- id: ruby.lang.security.bad-deserialization.bad-deserialization
  patterns:
  - pattern-either:
    - pattern: |
        YAML.load(...)
    - pattern: |
        CSV.load(...)
    - pattern: |
        Marshal.load(...)
    - pattern: |
        Marshal.restore(...)
    - pattern: |
        $OBJ.object_load(...)
  - pattern-not: |
      YAML.load(..., safe: true, ...)
  message: |
    Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,
    then later loaded from strings. However, uses of load and object_load can cause remote code execution.
    Loading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use JSON securely instead.
  metadata:
    references:
    - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb
  languages:
  - ruby
  severity: ERROR
- id: ruby.lang.security.json-entity-escape.json-entity-escape
  pattern-either:
  - pattern: |
      ActiveSupport.escape_html_entities_in_json = false
  - pattern: |
      config.active_support.escape_html_entities_in_json = false
  message: |
    Checks if HTML escaping is globally disabled for JSON output. This could lead to XSS.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_json_entity_escape.rb
  languages:
  - ruby
  severity: WARNING
- id: ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller
  pattern: |
    class $CONTROLLER < ApplicationController
      ...
      http_basic_authenticate_with ..., :password => "...", ...
    end
  message: |
    Detected hardcoded password used in basic authentication in a controller
    class. Including this password in version control could expose this
    credential. Consider refactoring to use environment variables or
    configuration files.
  severity: ERROR
  metadata:
    cwe: 'CWE-798: Use of Hard-coded Credentials'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown
  languages:
  - ruby
- id: ruby.lang.security.cookie-serialization.cookie-serialization
  message: |
    Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to
    remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb
    - https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/
  languages:
  - ruby
  severity: ERROR
  pattern-either:
  - pattern: |
      Rails.application.config.action_dispatch.cookies_serializer = :marshal
  - pattern: |
      Rails.application.config.action_dispatch.cookies_serializer = :hybrid
- id: ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln
  patterns:
  - pattern-either:
    - pattern: |
        $MOD.new(params[$CODE])
    - pattern: |
        $MOD.new(..., params[$CODE], :without_protection => true, ...)
  - pattern-not-inside: |
      attr_accessible $VAR
      ...
      $MOD.new(params[$CODE])
  message: |
    Checks for calls to without_protection during mass assignment (which allows record creation from hash values).
    This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default.
    Fix: Don't use :without_protection => true. Instead, configure attr_acessible to control attribute access.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb
    - https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/
  languages:
  - ruby
  severity: WARNING
- id: ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify
  pattern: OpenSSL::SSL::VERIFY_NONE
  message: |
    Detected SSL that will accept an unverified connection.
    This makes the connections susceptible to man-in-the-middle attacks.
    Use 'OpenSSL::SSL::VERIFY_PEER' intead.
  fix-regex:
    regex: VERIFY_NONE
    replacement: VERIFY_PEER
  severity: WARNING
  languages:
  - ruby
- id: generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth
  pattern-regex: '[fF][aA][cC][eE][bB][oO][oO][kK].*[''|"]?[0-9a-f]{32}[''|"]?'
  languages:
  - regex
  message: Facebook OAuth detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: ruby.lang.security.json-encoding.json-encoding
  message: |
    When a 'Hash' with user-supplied input is encoded in JSPN, Rails doesn't provide adequate escaping.
    If the JSON string is supplied into HTML, the page will be vulnerable to XXS attacks.
    The affected ruby versions are 3.0.x, 3.1.x, 3.2.x, 4.1.x, 4.2.x.
    To fix, either upgrade or add an initializer.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_json_encoding.rb
    - https://groups.google.com/g/rubyonrails-security/c/7VlB_pck3hU/m/3QZrGIaQW6cJ
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: |
      params[$VAR].to_json
  - pattern: |
      JSON.encode(params[$VAR])
- id: ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled
  pattern: $MODEL.new(params[...], ..., :without_protection => true, ...)
  message: |
    Mass assignment protection disabled for '$MODEL'. This could
    permit assignment to sensitive model fields without intention. Instead,
    use 'attr_accessible' for the model or disable mass assigment using
    'config.active_record.whitelist_attributes = true'.
    ':without_protection => true' must be removed for this to take effect.
  metadata:
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    owasp: 'A1: Injection'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/mass_assignment/index.markdown
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.force-ssl-false.force-ssl-false
  message: |
    Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which
    could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb
  languages:
  - ruby
  severity: WARNING
  pattern: config.force_ssl = false
- id: ruby.lang.security.missing-csrf-protection.missing-csrf-protection
  patterns:
  - pattern: |
      class $CONTROLLER < ActionController::Base
        ...
      end
  - pattern-not: |
      class $CONTROLLER < ActionController::Base
        ...
        protect_from_forgery :with => :exception
      end
  - pattern-not: |
      class $CONTROLLER < ActionController::Base
        ...
        protect_from_forgery prepend: true, with: :exception
      end
  message: |
    Detected controller which does not enable cross-site request forgery
    protections using 'protect_from_forgery'. Add
    'protect_from_forgery :with => :exception' to your controller class.
  severity: ERROR
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross-site_request_forgery/index.markdown
  languages:
  - ruby
- id: ruby.lang.security.filter-skipping.filter-skipping
  patterns:
  - pattern-not: |
      $CALL "=~/.*(/:action.*).*/", $ACTION
  - pattern: |
      $CALL "=~/.*(/:action.*).*/"
  message: |
    Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an
    attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing
    additional constraints.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb
    - https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY
  languages:
  - ruby
  severity: ERROR
- id: java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.3 Insecue Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf
  message: |
    JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called.
    Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute
    arbitrary code with the permissions of the application listening/consuming JMS Messages.
    In this case, the JMS MessageListener consume an ObjectMessage type recieved inside
    the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.
  patterns:
  - pattern-inside: |
      public class $JMS_LISTENER implements MessageListener {
        ...
        public void onMessage(Message $JMS_MSG) {
            ...
        }
      }
  - pattern-either:
    - pattern-inside: $X = $Y.getObject(...);
    - pattern-inside: $X = ($Z) $Y.getObject(...);
- id: ruby.lang.security.nested-attributes-bypass.nested-attributes-bypass
  message: |
    Checks for nested attributes vulnerability (CVE-2015-7577). Setting allow_destroy: false in
    accepts_nested_attributes_for can lead to attackers setting attributes to invalid values and clearing all attributes.
    This affects versions 3.1.0 and newer, with fixed versions 5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1.
    To fix, upgrade to a newer version or use the initializer specified in the google groups.
  metadata:
    references:
    - https://groups.google.com/g/rubyonrails-security/c/cawsWcQ6c8g/m/tegZtYdbFQAJ
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_nested_attributes_bypass.rb
  languages:
  - ruby
  severity: WARNING
  pattern: 'accepts_nested_attributes_for ..., allow_destroy: false, ...'
- id: ruby.jwt.security.jwt-none-alg.ruby-jwt-none-alg
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - ruby
  severity: ERROR
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern: |
      JWT.encode($PAYLOAD, $SECRET, 'none', ...)
- id: ruby.jwt.security.jwt-exposed-credentials.ruby-jwt-exposed-credentials
  languages:
  - ruby
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    references:
    - https://cwe.mitre.org/data/definitions/522.html
  message: |
    Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern: |
      $PAYLOAD = {...,password:...,...}
      ...
      JWT.encode($PAYLOAD,...)
  severity: ERROR
- id: java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
  message: |
    Using a non-primitive class with Java RMI may be an insecure deserialization vulnerability. Depending
    on the underlying implementation. This object could be manipulated by a malicious actor allowing them to
    execute code on your system. Instead, use an integer ID to look up your object, or consider alternative
    serializiation schemes such as JSON.
  patterns:
  - pattern: |
      interface $INTERFACE extends Remote {
        $RETURNTYPE $METHOD($CLASS $PARAM) throws RemoteException;
      }
  - metavariable-regex:
      metavariable: $CLASS
      regex: (?!int|boolean|short|long|byte|char|float|double)
- id: ruby.jwt.security.audit.jwt-decode-without-verify.ruby-jwt-decode-without-verify
  message: |
    Detected the decoding of a JWT token without a verify step.
    JWT tokens must be verified before use, otherwise the token's
    integrity is unknown. This means a malicious actor could forge
    a JWT token with any claims.
  metadata:
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern: JWT.decode($PAYLOAD,$SECRET,false,...)
- id: php.lang.security.backticks-use.backticks-use
  pattern: '`...`;'
  message: |
    Backticks use may lead to command injection vulnerabilities.
  metadata:
    references:
    - https://www.php.net/manual/en/language.operators.execution.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/BackticksSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off
  patterns:
  - pattern-either:
    - pattern: |
        $ARG = $IS_VERIFIED;
        ...
        curl_setopt(..., CURLOPT_SSL_VERIFYPEER, $ARG);
    - pattern: curl_setopt(..., CURLOPT_SSL_VERIFYPEER, $IS_VERIFIED)
  - metavariable-regex:
      metavariable: $IS_VERIFIED
      regex: 0|false|null
  message: |
    SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)
  metadata:
    references:
    - https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/
  languages:
  - php
  severity: ERROR
- id: php.lang.security.ftp-use.ftp-use
  patterns:
  - pattern: $FUNC(...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: ftp_.+
  message: |
    FTP allows for unencrypted file transfers. Consider using an encrypted alternative.
  metadata:
    references:
    - https://www.php.net/manual/en/intro.ftp.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/FringeFunctionsSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.phpinfo-use.phpinfo-use
  pattern: phpinfo(...);
  message: |
    The 'phpinfo' function may reveal sensitive information about your environment.
  metadata:
    references:
    - https://www.php.net/manual/en/function.phpinfo
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.md5-loose-equality.md5-loose-equality
  patterns:
  - pattern-either:
    - pattern: $X == $FUNC(...)
    - pattern: $FUNC(...) == $X
    - pattern: $FUNC(...) == $FUNC(...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: md5|md5_file
  message: |
    Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues
  metadata:
    references:
    - https://www.php.net/manual/en/types.comparisons.php
    - https://www.whitehatsec.com/blog/magic-hashes/
  languages:
  - php
  severity: ERROR
- id: php.lang.security.assert-use.assert-use
  patterns:
  - pattern: assert($ASSERT, ...);
  - pattern-not: assert("...", ...);
  message: |
    Calling assert with user input is equivalent to eval'ing.
  metadata:
    references:
    - https://www.php.net/manual/en/function.assert
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.weak-crypto.weak-crypto
  patterns:
  - pattern: $FUNC(...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: crypt|md5|md5_file|sha1|sha1_file|str_rot13
  message: |
    Detected usage of weak crypto function. Consider using stronger alternatives.
  metadata:
    references:
    - https://www.php.net/manual/en/book.sodium.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.mb-ereg-replace-eval.mb-ereg-replace-eval
  patterns:
  - pattern: mb_ereg_replace($PATTERN, $REPL, $STR, $OPTIONS);
  - pattern-not: mb_ereg_replace($PATTERN, $REPL, $STR, "...");
  message: |
    Calling mb_ereg_replace with user input in the options can lead to arbitrary
    code execution. The eval modifier (`e`) evaluates the replacement argument
    as code.
  metadata:
    references:
    - https://www.php.net/manual/en/function.mb-ereg-replace.php
    - https://www.php.net/manual/en/function.mb-regex-set-options.php
  languages:
  - php
  severity: ERROR
- id: ocaml.lang.best-practice.string.ocamllint-str-string-after
  pattern: String.sub $S $N (String.length $S - $N)
  message: Use instead `Str.string_after`
  languages:
  - ocaml
  severity: WARNING
- id: php.lang.security.mcrypt-use.mcrypt-use
  patterns:
  - pattern: $FUNC(...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: (mcrypt_|mdecrypt_).+
  message: |
    Mcrypt functionality has been deprecated and/or removed in recent PHP
    versions. Consider using Sodium or OpenSSL.
  metadata:
    references:
    - https://www.php.net/manual/en/intro.mcrypt.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.preg-replace-eval.preg-replace-eval
  patterns:
  - pattern: preg_replace(...);
  - pattern-not: preg_replace("...", ...);
  message: |
    Calling preg_replace with user input in the pattern can lead to arbitrary
    code execution. The eval modifier (`/e`) evaluates the replacement argument
    as code.
  metadata:
    references:
    - https://www.php.net/manual/en/function.preg-replace.php
    - https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.exec-use.exec-use
  patterns:
  - pattern: $FUNC(...);
  - pattern-not: $FUNC('...', ...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: exec|passthru|proc_open|popen|shell_exec|system|pcntl_exec
  message: |
    Executing non-constant commands. This can lead to command injection.
  metadata:
    references:
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php
  languages:
  - php
  severity: ERROR
- id: php.lang.security.eval-use.eval-use
  patterns:
  - pattern: eval(...);
  - pattern-not: eval('...');
  message: |
    Evaluating non-constant commands. This can lead to command injection.
  metadata:
    references:
    - https://www.php.net/manual/en/function.eval
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php
  languages:
  - php
  severity: ERROR
- id: java.spring.security.audit.spring-sqli.spring-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $TYPE $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern-either:
          - pattern: $JT.$METHOD($SQL,...)
          - pattern: $JT.$METHOD(new $CALL($SQL),...)
      - pattern: |
          $JT.$METHOD(String.format(...),...);
      - pattern: |
          $JT.$METHOD($X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          JdbcTemplate $JT = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,JdbcTemplate $JT,...) {
            ...
          }
      - pattern-inside: |
          JdbcOperations $JT = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,JdbcOperations $JT,...) {
            ...
          }
    - pattern-not: |
        $JT.$METHOD("..." + "...",...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(execute|query|queryForList|queryForMap|queryForObject|queryForRowSet|queryForInt|queryForLong|update)$
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $TYPE $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $JT.batchUpdate(...,$SQL,...)
      - pattern: |
          $JT.batchUpdate(...,String.format(...),...);
      - pattern: |
          $JT.batchUpdate(...,$X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          JdbcTemplate $JT = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,JdbcTemplate $JT,...) {
            ...
          }
      - pattern-inside: |
          JdbcOperations $JT = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,JdbcOperations $JT,...) {
            ...
          }
    - pattern-not: |
        $JT.batchUpdate(...,"..." + "...",...);
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: new PreparedStatementCreatorFactory($SQL,...)
      - pattern: |
          new PreparedStatementCreatorFactory(String.format(...),...)
      - pattern: |
          new PreparedStatementCreatorFactory($X + $Y,...)
    - pattern-not: |
        new PreparedStatementCreatorFactory("..." + "...",...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $BATCH.executeBatchUpdate($SQL,...)
      - pattern: |
          $BATCH.executeBatchUpdate(String.format(...),...)
      - pattern: |
          $BATCH.executeBatchUpdate($X + $Y,...)
    - pattern-not: |
        $BATCH.executeBatchUpdate("..." + "...",...)
    - metavariable-regex:
        metavariable: $BATCH
        regex: ^(BatchUpdateUtils|NamedParameterBatchUpdateUtils)$
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
- id: java.spring.security.audit.spel-injection.spel-injection
  message: |
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        class $CLASS {
          ...
          ExpressionParser $PARSER;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          ExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          ExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          SpelExpressionParser $PARSER;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          SpelExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          SpelExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          TemplateAwareExpressionParser $PARSER;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          TemplateAwareExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          TemplateAwareExpressionParser $PARSER = ...;
          ...
        }
  - pattern: |
      $X $METHOD(...) {
        ...
        $PARSER.parseExpression(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $PARSER.parseExpression("...");
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $PARSER.parseExpression($S);
        ...
      }
- id: java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
  patterns:
  - pattern: |
      @RequestMapping(...)
      $RETURNTYPE $METHOD(...) { ... }
  - pattern-not-inside: |
      @RequestMapping(..., method = $X, ...)
      $RETURNTYPE $METHOD(...) { ... }
  message: Detected a method annotated with 'RequestMapping' that does not specify
    the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS,
    and by default all HTTP methods are allowed when the HTTP method is not explicitly
    specified. This means that a method that performs state changes could be vulnerable
    to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method
    (such as 'RequestMethod.POST').
  severity: WARNING
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING
    references:
    - https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING
  languages:
  - java
- id: java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
  message: |
    Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.
  metadata:
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        return "redirect:" + $URL;
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        String $REDIR = "redirect:" + $URL;
        ...
        return $REDIR;
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        new ModelAndView("redirect:" + $URL);
        ...
      }
  - pattern: |-
      $X $METHOD(...,String $URL,...) {
        ...
        String $REDIR = "redirect:" + $URL;
        ...
        new ModelAndView($REDIR);
        ...
      }
- id: java.lang.correctness.no-string-eqeq.no-string-eqeq
  languages:
  - java
  equivalences:
  - equivalence: $X == $Y ==> $Y == $X
  patterns:
  - pattern-not: null == (String $Y)
  - pattern: $X == (String $Y)
  message: |
    Strings should not be compared with '=='.
    This is a reference comparison operator.
    Use '.equals()' instead.
  severity: WARNING
- id: java.lang.correctness.eqeq.eqeq
  patterns:
  - pattern-not-inside: assert $X;
  - pattern-not-inside: |
      assert $X : $Y;
  - pattern-either:
    - pattern: $X == $X
    - pattern: $X != $X
  - pattern-not: 1 == 1
  message: |
    `$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double).
    To test if `$X` is not-a-number, use `Double.isNaN($X)`.
  languages:
  - java
  severity: ERROR
- id: java.lang.security.do-privileged-use.do-privileged-use
  severity: WARNING
  languages:
  - java
  metadata:
    references:
    - https://docs.oracle.com/javase/8/docs/technotes/guides/security/doprivileged.html
    - https://wiki.sei.cmu.edu/confluence/display/java/Privilege+Escalation
    - http://phrack.org/papers/escaping_the_java_sandbox.html
  message: |
    Marking code as privileged enables a piece of trusted code to temporarily
    enable access to more resources than are available directly to the code
    that called it. Be very careful in your use of the privileged construct,
    and always remember to make the privileged code section as small as possible.
  patterns:
  - pattern-inside: |
      import java.security.*;
      ...
  - pattern-either:
    - pattern: AccessController.doPrivileged(...);
    - pattern: class $ACTION implements PrivilegedAction<Void> { ... }
- id: java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
  message: |
    Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User
    input was detected going directly from the HttpServletRequest into output. Ensure your
    data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (''XSS'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
  severity: ERROR
  patterns:
  - pattern-inside: $TYPE $FUNC(..., HttpServletResponse $RESP, ...) { ... }
  - pattern-inside: $VAR = $REQ.getParameter(...); ...
  - pattern-either:
    - pattern: $RESP.getWriter(...).write(..., $VAR, ...);
    - pattern: |
        $WRITER = $RESP.getWriter(...);
        ...
        $WRITER.write(..., $VAR, ...);
  languages:
  - java
- id: java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
    references:
    - https://www.owasp.org/index.php/Path_Traversal
  message: |
    Detected a potential path traversal. A malicious actor
    could control the location of this file, to include going backwards
    in the directory with '../'. To address this, ensure that user-controlled
    variables in file paths are sanitized. You may aslso consider using a utility
    method such as org.apache.commons.io.FilenameUtils.getName(...) to only
    retrieve the file name from the path.
  patterns:
  - pattern-inside: |
      $RETURNTYPE $FUNC (..., HttpServletRequest $REQ, ...) {
        ...
      }
  - pattern-either:
    - pattern: |
        $VAR = ($TYPE)$REQ.getParameter(...);
        ...
        new File(..., $VAR, ...);
    - pattern: |
        $VAR = $REQ.getParameter(...);
        ...
        new File(..., $VAR, ...);
  severity: ERROR
  languages:
  - java
- id: generic.secrets.security.detected-google-cloud-api-key.detected-google-cloud-api-key
  pattern-regex: AIza[0-9A-Za-z\\-_]{35}
  languages:
  - regex
  message: Google Cloud API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: java.lang.security.audit.url-rewriting.url-rewriting
  message: |
    URL rewriting has significant security risks.
    Since session ID appears in the URL, it may be easily seen by third parties.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URL_REWRITING
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeURL(...);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeUrl(...);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeRedirectURL(...);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeRedirectUrl(...);
        ...
      }
  - pattern: |
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeURL(...);
        ...
      }
  - pattern: |
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeUrl(...);
        ...
      }
  - pattern: |
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeRedirectURL(...);
        ...
      }
  - pattern: |-
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeRedirectUrl(...);
        ...
      }
- id: java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
  message: |
    It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users.
    If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe: 'CWE-276: Incorrect Default Permissions'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OVERLY_PERMISSIVE_FILE_PERMISSION
  pattern-either:
  - pattern: java.nio.file.Files.setPosixFilePermissions($FILE, java.nio.file.attribute.PosixFilePermissions.fromString("=~/(^......r..$)|(^.......w.$)|(^........x$)/"));
  - pattern: |
      $TYPE $P = java.nio.file.attribute.PosixFilePermissions.fromString("=~/(^......r..$)|(^.......w.$)|(^........x$)/");
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - pattern: |
      $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_READ);
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - pattern: |
      $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_WRITE);
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - pattern: |-
      $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_EXECUTE);
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
- id: java.servlets.security.cookie-issecure-false.cookie-issecure-false
  patterns:
  - pattern: |
      $COOKIE = new Cookie(...);
      ...
  - pattern-not-inside: |
      $COOKIE = new Cookie(...);
      ...
      $COOKIE.setSecure(true);
  message: |
    Default session middleware settings: `setSecure` not set to true.
    This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.
  fix-regex:
    regex: setSecure\(false\)
    replacement: setSecure(true)
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://tomcat.apache.org/tomcat-5.5-doc/servletapi/
  languages:
  - java
  severity: WARNING
- id: java.lang.security.audit.object-deserialization.object-deserialization
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION
    references:
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
  message: |
    Found object deserialization using ObjectInputStream. Deserializing entire
    Java objects is dangerous because malicious actors can create Java object
    streams with unintended consequences. Ensure that the objects being deserialized
    are not user-controlled. If this must be done, consider using HMACs to sign
    the data stream to make sure it is not tampered with, or consider only
    transmitting object fields and populating a new object.
  severity: WARNING
  languages:
  - java
  pattern: new ObjectInputStream(...);
- id: java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
  metadata:
    cwe: 'CWE-704: Incorrect Type Conversion or Cast'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION
  message: |
    'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte.
    This mistake weakens the hash value computed since it introduces more collisions.
    Use 'String.format("%02X", ...)' instead.
  severity: WARNING
  languages:
  - java
  pattern: |-
    $X $METHOD(...) {
      ...
      MessageDigest $MD = ...;
      ...
      $MD.digest(...);
      ...
      Integer.toHexString(...);
    }
- id: java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.1 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
  message: |
    A cookie was detected without setting the 'secure' flag. The 'secure' flag
    for cookies prevents the client from transmitting the cookie over insecure
    channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not-inside: $COOKIE.setValue(""); ...
  - pattern-either:
    - pattern: $COOKIE.setSecure(false);
    - patterns:
      - pattern-not-inside: $COOKIE.setSecure(...); ...
      - pattern: $RESPONSE.addCookie($COOKIE);
- id: java.lang.security.audit.script-engine-injection.script-engine-injection
  message: |
    Detected potential code injection using ScriptEngine. Ensure
    user-controlled data cannot enter '.eval()', otherwise, this is
    a code injection vulnerability.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SCRIPT_ENGINE_INJECTION
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        class $CLASS {
          ...
          ScriptEngine $SE;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          ScriptEngine $SE = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          ScriptEngine $SE = ...;
          ...
        }
  - pattern: |
      $X $METHOD(...) {
        ...
        $SE.eval(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $SE.eval("...");
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $SE.eval($S);
        ...
      }
- id: ocaml.lang.correctness.physical_vs_structural.physical-equal
  pattern: $X == $Y
  message: You probably want the structural inequality operator =
  languages:
  - ocaml
  severity: WARNING
- id: java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
  message: |
    Using less than 128 bits for Blowfish is considered insecure. Use 128 bits
    or more, or switch to use AES instead.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: |
      $KEYGEN = KeyGenerator.getInstance("Blowfish");
      ...
      $KEYGEN.init($SIZE);
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 128
- id: java.lang.security.audit.el-injection.el-injection
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#EL_INJECTION
  message: |
    An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF;
          ...
          $X $METHOD(...) {
            ...
            $EF.createValueExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF = ...;
          ...
          $X $METHOD(...) {
            ...
            $EF.createValueExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ExpressionFactory $EF = ...;
          ...
          $EF.createValueExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ExpressionFactory $EF,...) {
          ...
          $EF.createValueExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF;
          ...
          $X $METHOD(...) {
            ...
            $EF.createMethodExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF = ...;
          ...
          $X $METHOD(...) {
            ...
            $EF.createMethodExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ExpressionFactory $EF = ...;
          ...
          $EF.createMethodExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ExpressionFactory $EF,...) {
          ...
          $EF.createMethodExpression($CTX,$INPUT,...);
          ...
        }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $EF.createValueExpression($CTX,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $EF.createValueExpression($CTX,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $EF.createMethodExpression($CTX,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $EF.createMethodExpression($CTX,$S,...);
        ...
      }
- id: javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
  message: |
    Set "rejectUnauthorized" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. "rejectUnauthorized" option must be alway set to True (default value). With self -signed certificat or custom CA, use "ca" option to define Root Certicate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.
  metadata:
    cwe: |
      CWE-295: Improper Certificate Validation
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
  severity: ERROR
  languages:
  - javascript
  - typescript
  patterns:
  - pattern: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions: {
          ssl: {
            rejectUnauthorized: false
          }
        }
       }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
  metadata:
    cwe: 'CWE-287: Improper Authentication'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS
  message: |
    Detected anonymous LDAP bind.
    This permits anonymous users to execute LDAP statements. Consider enforcing
    authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html
    for more information.
  severity: WARNING
  pattern: |
    $ENV.put($CTX.SECURITY_AUTHENTICATION, "none");
    ...
    $DCTX = new InitialDirContext($ENV, ...);
  languages:
  - java
- id: java.lang.security.audit.ognl-injection.ognl-injection
  message: |
    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OGNL_INJECTION
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.translateVariablesCollection($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.shallBeIncluded($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.commaDelimitedStringToSet($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParser $P,...) {
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlTextParser $P,...) {
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.callMethod($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.compile($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,VelocityStrutsUtil $P,...) {
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.isTrue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.getText($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.makeSelectList($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlTool $P,...) {
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.setParameter($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.translateVariablesCollection($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.shallBeIncluded($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.commaDelimitedStringToSet($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParser $P = ...;
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlTextParser $P = ...;
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.callMethod($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.compile($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          VelocityStrutsUtil $P = ...;
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.isTrue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.getText($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.makeSelectList($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlTool $P = ...;
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.setParameter($INPUT,...);
          ...
        }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getGetMethod($T,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getSetMethod($T,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getField($T,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setProperties("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setProperty("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getValue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setValue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.translateVariables("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.translateVariablesCollection("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.shallBeIncluded("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.commaDelimitedStringToSet("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.evaluate("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.callMethod("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.compile("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.isTrue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.findString("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.findValue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getText("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.makeSelectList("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setParameter("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getGetMethod($T,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getSetMethod($T,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getField($T,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setProperties($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setProperty($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getValue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setValue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.translateVariables($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.translateVariablesCollection($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.shallBeIncluded($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.commaDelimitedStringToSet($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.evaluate($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.callMethod($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.compile($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.isTrue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.findString($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.findValue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getText($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.makeSelectList($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setParameter($S,...);
        ...
      }
- id: ocaml.lang.correctness.physical_vs_structural.physical-not-equal
  pattern: $X != $Y
  message: You probably want the structural inequality operator <>
  languages:
  - ocaml
  severity: WARNING
- id: java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
  metadata:
    cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.2 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
  message: |
    A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag
    for cookies instructs the browser to forbid client-side scripts from reading the
    cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not-inside: $COOKIE.setValue(""); ...
  - pattern-either:
    - pattern: $COOKIE.setHttpOnly(false);
    - patterns:
      - pattern-not-inside: $COOKIE.setHttpOnly(...); ...
      - pattern: $RESPONSE.addCookie($COOKIE);
- id: java.lang.security.audit.xml-decoder.xml-decoder
  message: |
    XMLDecoder should not be used to parse untrusted data.
    Deserializing user input can lead to arbitrary code execution.
    Use an alternative and explicitly disable external entities.
    See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    for alternatives and vulnerability prevention.
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XML_DECODER
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: |
      $X $METHOD(...) {
        ...
        new XMLDecoder(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        new XMLDecoder("...");
        ...
      }
  - pattern-not: |-
      $X $METHOD(...) {
        ...
        String $STR = "...";
        ...
        new XMLDecoder($STR);
        ...
      }
- id: java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
  metadata:
    cwe: 'CWE-297: Improper Validation of Certificate with Host Mismatch'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_SMTP_SSL
  message: |
    Insecure SMTP connection detected. This connection will trust any SSL certificate.
    Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.
  severity: WARNING
  patterns:
  - pattern-not-inside: |
      $EMAIL.setSSLCheckServerIdentity(true);
      ...
  - pattern-inside: |
      $EMAIL = new SimpleEmail(...);
      ...
  - pattern: $EMAIL.send(...);
  languages:
  - java
- id: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
  patterns:
  - pattern-either:
    - pattern-inside: |
        $RETURN $METHOD(..., HttpServletResponse $RESP, ...) { ... }
    - pattern-inside: |
        HttpServletResponse $RESPONSE = ...;
        ...
  - pattern-either:
    - pattern: |
        (HttpServletResponse $RESPONSE).getWriter(...).$WRITE(...)
    - pattern: |
        (HttpServletResponse $RESPONSE).getOutputStream(...).$WRITE(...)
    - pattern: |
        (PrintWriter $WRITER).$WRITE(...)
    - pattern: |
        (ServletOutputStream $WRITER).$WRITE(...)
    - pattern: |
        (OutputStream $WRITER).$WRITE(...)
  - pattern-not: $WRITER.$WRITE("...", ...)
  - pattern-not: $WRITER.flush(...)
  - pattern-not: $WRITER.close(...)
  message: |
    Detected a direct write to the HTTP response. This bypasses any
    view or template environments, including HTML escaping, which may
    expose this application to cross-site scripting (XSS) vulnerabilities.
    Consider using a view technology such as JavaServer Faces (JSFs) which
    automatically escapes HTML views.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    references:
    - https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
  metadata:
    owasp: 'A7: Cross-Site Scripting (XSS)'
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_REQUEST_WRAPPER
  message: |
    It looks like you're using an implementation of XSSRequestWrapper from dzone.
    (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html)
    The XSS filtering in this code is not secure and can be bypassed by malicious actors.
    It is recommended to use a stack that automatically escapes in your view or templates
    instead of filtering yourself.
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      class XSSRequestWrapper extends HttpServletRequestWrapper {
        ...
      }
  - pattern: |-
      $P = $X.compile("</script>", $X.CASE_INSENSITIVE);
      $V = $P.matcher(...).replaceAll("");
- id: ocaml.lang.best-practice.string.ocamllint-str-first-chars
  pattern: String.sub $S 0 $N
  message: Use instead `Str.first_chars`
  languages:
  - ocaml
  severity: WARNING
- id: java.lang.security.audit.sqli.jdo-sqli.jdo-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $TYPE $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $Q.$METHOD($SQL,...)
      - pattern: |
          $Q.$METHOD(String.format(...),...);
      - pattern: |
          $Q.$METHOD($X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          javax.jdo.Query $Q = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,javax.jdo.Query $Q,...) {
            ...
          }
    - pattern-not: |
        $Q.$METHOD("..." + "...",...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(setFilter|setGrouping)$
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $PM.newQuery(...,$SQL,...)
      - pattern: |
          $PM.newQuery(...,String.format(...),...);
      - pattern: |
          $PM.newQuery(...,$X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          javax.jdo.PersistenceManager $PM = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,javax.jdo.PersistenceManager $PM,...) {
            ...
          }
    - pattern-not: |
        $PM.newQuery(...,"..." + "...",...);
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
- id: java.lang.security.audit.sqli.turbine-sqli.turbine-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $PEER.executeQuery($SQL,...)
      - pattern: |
          $PEER.executeQuery(String.format(...),...)
      - pattern: |
          $PEER.executeQuery($X + $Y,...)
    - pattern-not: |
        $PEER.executeQuery("..." + "...",...)
    - metavariable-regex:
        metavariable: $PEER
        regex: (BasePeer|GroupPeer)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $P.executeQuery($SQL,...)
      - pattern: |
          $P.executeQuery(String.format(...),...)
      - pattern: |
          $P.executeQuery($X + $Y,...)
    - pattern-either:
      - pattern-inside: |
          BasePeer $P = ...;
          ...
      - pattern-inside: |
          GroupPeer $P = ...;
          ...
      - pattern-inside: |
          $VAL $FUNC(...,GroupPeer $P,...) {
            ...
          }
      - pattern-inside: |
          $VAL $FUNC(...,BasePeer $P,...) {
            ...
          }
    - pattern-not: |
        $P.executeQuery("..." + "...",...)
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
- id: java.lang.security.audit.sqli.vertx-sqli.vertx-sqli
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            String $SQL = $X + $Y;
            ...
        - pattern-inside: |
            String $SQL = String.format(...);
            ...
        - pattern-inside: |
            $TYPE $FUNC(...,String $SQL,...) {
              ...
            }
      - pattern-not-inside: |
          String $SQL = "..." + "...";
          ...
      - pattern: $SC.$METHOD($SQL,...)
    - pattern: |
        $SC.$METHOD(String.format(...),...);
    - pattern: |
        $SC.$METHOD($X + $Y,...);
  - pattern-either:
    - pattern-inside: |
        SqlClient $SC = ...;
        ...
    - pattern-inside: |
        SqlConnection $SC = ...;
        ...
    - pattern-inside: |
        $TYPE $FUNC(...,SqlClient $SC,...) {
          ...
        }
    - pattern-inside: |
        $TYPE $FUNC(...,SqlConnection $SC,...) {
          ...
        }
  - pattern-not: |
      $SC.$METHOD("..." + "...",...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(query|preparedQuery|prepare)$
- id: ruby.jwt.security.audit.jwt-exposed-data.ruby-jwt-exposed-data
  message: |
    The object is passed strictly to jsonwebtoken.sign(...)
    Make sure that sensitive information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern-inside: |
      def $FUNC(...,$INPUT,...)
        ...
      end
  - pattern: |
      JWT.encode($INPUT,...)
- id: meta.metadata-cwe.metadata-cwe
  message: |
    The cwe tag in rule metadata should always be in the format "CWE-000: Title".
  severity: ERROR
  languages:
  - json
  - yaml
  patterns:
  - pattern-inside: 'rules: ...'
  - pattern-inside: 'metadata: ...'
  - pattern: 'cwe: ...'
  - pattern-not: 'cwe: "=~/^CWE-[0-9]+: .+$/"'
- id: meta.metadata-owasp.metadata-owasp
  message: |
    The owasp tag in rule metadata should always be in the format "A0: Title".
  severity: ERROR
  languages:
  - json
  - yaml
  patterns:
  - pattern-inside: 'rules: ...'
  - pattern-inside: 'metadata: ...'
  - pattern: 'owasp: ...'
  - pattern-not: 'owasp: "=~/^A([0-9]|10): .+$/"'
- id: meta.metadata-references.metadata-references
  message: |
    The references in rule metadata should always be a list, even if there's only one.
  severity: ERROR
  languages:
  - json
  - yaml
  patterns:
  - pattern-inside: |
      rules: ...
  - pattern-inside: |
      metadata: ...
  - pattern: |
      references: ...
  - pattern-not: |
      references: [...]
- id: java.lang.security.audit.sqli.jpa-sqli.jpa-sqli
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            String $SQL = $X + $Y;
            ...
        - pattern-inside: |
            String $SQL = String.format(...);
            ...
        - pattern-inside: |
            $TYPE $FUNC(...,String $SQL,...) {
              ...
            }
      - pattern-not-inside: |
          String $SQL = "..." + "...";
          ...
      - pattern: $EM.$METHOD($SQL,...)
    - pattern: |
        $EM.$METHOD(String.format(...),...);
    - pattern: |
        $EM.$METHOD($X + $Y,...);
  - pattern-either:
    - pattern-inside: |
        EntityManager $EM = ...;
        ...
    - pattern-inside: |
        $TYPE $FUNC(...,EntityManager $EM,...) {
          ...
        }
  - pattern-not: |
      $EM.$METHOD("..." + "...",...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(createQuery|createNativeQuery)$
- id: java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitve Data Exposure'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING
    references:
    - https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
  message: |
    Using RSA without OAEP mode weakens the encryption.
  severity: WARNING
  languages:
  - java
  pattern: $CIPHER.getInstance("RSA/NONE/NoPadding")
- id: json.aws.security.public-s3-policy-statement.public-s3-policy-statement
  pattern: |
    {
      "Effect": "Allow",
      "Principal": "*",
      "Resource": [
        ..., "=~/arn:aws:s3.*/", ...
      ],
      ...
    }
  message: |
    Detected public s3 bucket policy. This policy allows anyone to access
    certain properties of or items in the bucket. Do not do this unless you
    will never have sensitive data inside the bucket.
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-264: Permissions, Privileges, and Access Controls'
    references:
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html
  severity: WARNING
  languages:
  - json
- id: python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
  message: |
    The object is passed strictly to jwt.encode(...)
    Make sure that sensitive information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - python
  patterns:
  - pattern-inside: |
      def $FUNC(...,$INPUT,...):
        ...
  - pattern: jwt.encode($INPUT,...)
- id: python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
  message: Avoid using insecure deserialization library, backed by `pickle`, `_pickle`,
    `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code
    execution vulnerabilities.
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-inside: |
      def $X(..., request, ...):
        ...
  - pattern-either:
    - pattern: |
        $VAR = <... request.$Y.get(...) ...>
        ...
        pickle.$FUNC(<... $VAR ...>)
    - pattern: pickle.$FUNC(<... request.$Y.get(...) ...>)
    - pattern: |
        $VAR = <... request.$Y.get(...) ...>
        ...
        _pickle.$FUNC(<... $VAR ...>)
    - pattern: _pickle.$FUNC(<... request.$Y.get(...) ...>)
    - pattern: |
        $VAR = <... request.$Y.get(...) ...>
        ...
        cPickle.$FUNC(<... $VAR ...>)
    - pattern: cPickle.$FUNC(<... request.$Y.get(...) ...>)
    - pattern: |
        $VAR = <... request.$Y.get(...) ...>
        ...
        dill.$FUNC(<... $VAR ...>)
    - pattern: dill.$FUNC(<... request.$Y.get(...) ...>)
    - pattern: |
        $VAR = <... request.$Y.get(...) ...>
        ...
        shelve.$FUNC(<... $VAR ...>)
    - pattern: shelve.$FUNC(<... request.$Y.get(...) ...>)
    - pattern: |
        $VAR = <... request.$Y.get(...) ...>
        ...
        yaml.$FUNC(<... $VAR ...>)
    - pattern: yaml.$FUNC(<... request.$Y.get(...) ...>)
- id: javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
  message: |
    The object is passed strictly to jose.JWT.sign(...)
    Make sure that sensitive information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      require('jose');
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
    - patterns:
      - pattern-inside: function $F(...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
- id: javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
  message: |
    If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set "ssl: true" or define settings "ssl: {...}"
  metadata:
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    - https://nodejs.org/api/tls.html#tls_tls_default_min_version
  severity: WARNING
  languages:
  - javascript
  - typescript
  patterns:
  - pattern: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT
       }
  - pattern-not: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: "postgres",
        dialectOptions: {
            ssl: true
        }
      }
  - pattern-not: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions: {
          ssl: { ... }
        }
      }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
  severity: ERROR
  metadata:
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    owasp: 'A8: Insecure Deserialization'
    references:
    - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
    - https://frohoff.github.io/appseccali-marshalling-pickles/
  message: |
    Using an arbitrary object ('Object $PARAM') with Java RMI is an insecure deserialization
    vulnerability. This object can be manipulated by a malicious actor allowing them to execute
    code on your system. Instead, use an integer ID to look up your object, or consider alternative
    serializiation schemes such as JSON.
  languages:
  - java
  pattern: |
    interface $INTERFACE extends Remote {
      $RETURNTYPE $METHOD(Object $PARAM) throws RemoteException;
    }
- id: java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
  message: |
    Detected the decoding of a JWT token without a verify step.
    JWT tokens must be verified before use, otherwise the token's
    integrity is unknown. This means a malicious actor could forge
    a JWT token with any claims. Call '.verify()' before using the token.
  metadata:
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern: |
      com.auth0.jwt.JWT.decode(...);
  - pattern-not-inside: |-
      class $CLASS {
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          $VERIFIER.verify(...);
          ...
        }
      }
- id: ocaml.lang.portability.slash_tmp.not-portable-tmp-string
  pattern: |
    "=~/\/tmp/"
  message: You should probably use Filename.get_temp_dirname().
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.correctness.useless_if.ocamllint-useless-if
  pattern: if $X then $E else $E
  message: Useless if. Both branches are equal.
  languages:
  - ocaml
  severity: ERROR
- id: ocaml.lang.correctness.useless_eq.useless-equal
  pattern: $X = $X
  message: This is always true. If testing for floating point NaN, use `Float.is_nan`
    instead.
  languages:
  - ocaml
  severity: ERROR
- id: ocaml.lang.best-practice.string.ocamllint-str-last-chars
  pattern: String.sub $S (String.length $S - $N) $N
  message: Use instead `Str.last_chars`
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.string.ocamllint-useless-sprintf
  pattern-either:
  - pattern: Printf.sprintf "..."
  - pattern: Printf.sprintf "%s" $S
  message: Useless sprintf
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.ifs.ocamllint-backwards-if
  pattern: if $E then () else $E2
  message: Backwards if. Rewrite the code as 'if not $E then $E2'.
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.hashtbl.hashtbl-find-outside-try
  patterns:
  - pattern-either:
    - pattern: |
        Hashtbl.find ...
  - pattern-not-inside: |
      try ... with ... -> ...
  message: You should not use Hashtbl.find outside of a try, or you should use Hashtbl.find_opt
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.list.list-find-outside-try
  patterns:
  - pattern-either:
    - pattern: |
        List.find ...
  - pattern-not-inside: |
      try ... with ... -> ...
  message: You should not use List.find outside of a try, or you should use List.find_opt
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.ref.ocamllint-ref-incr
  pattern: $X := $X + 1
  message: You should use `incr`
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.ref.ocamllint-ref-decr
  pattern: $X := $X - 1
  message: You should use `decr
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.bool.ocamllint-bool-true
  pattern-either:
  - pattern: $X = true
  - pattern: $X == true
  - pattern: $X != false
  message: Comparison to boolean. Just use `$X`
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.best-practice.bool.ocamllint-bool-false
  pattern-either:
  - pattern: $X = false
  - pattern: $X == false
  - pattern: $X <> true
  message: Comparison to boolean. Just use `not $X`
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.performance.list.ocamllint-length-list-zero
  pattern: List.length $X = 0
  message: You probably want $X = [], which is faster.
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.performance.list.ocamllint-length-more-than-zero
  pattern: List.length $X > 0
  message: You probably want $X <> [], which is faster.
  languages:
  - ocaml
  severity: WARNING
- id: ocaml.lang.compatibility.deprecated.deprecated-pervasives
  pattern: Pervasives.$X
  message: Pervasives is deprecated and will not be available after 4.10. Use Stdlib.
  languages:
  - ocaml
  severity: ERROR
- id: generic.dockerfile.correctness.alias-must-be-unique.alias-must-be-unique
  severity: ERROR
  languages:
  - generic
  patterns:
  - pattern-either:
    - pattern: |
        FROM ... as $REF
        ...
        ...
        FROM ... as $REF
    - pattern: |
        FROM ... AS $REF
        ...
        ...
        FROM ... AS $REF
  - pattern-not-inside: |
      FROM ... as $REF
      ...
      ...
      FROM ... as $REF-
  - pattern-not-inside: |
      FROM ... AS $REF
      ...
      ...
      FROM ... AS $REF-
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  message: Image aliases must have a unique name, and '$REF' is used twice. Use another
    name for '$REF'.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3024
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3024
- id: generic.dockerfile.correctness.multiple-entrypoint-instructions.multiple-entrypoint-instructions
  severity: ERROR
  languages:
  - generic
  pattern: |
    ENTRYPOINT ...
    ...
    ENTRYPOINT ...
  message: |
    Multiple ENTRYPOINT instructions were found. Only the last one will take effect.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL4004
    references:
    - https://github.com/hadolint/hadolint/wiki/DL4004
    - https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index#//dash_ref_Instructions/Entry/ENTRYPOINT/0
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.correctness.missing-assume-yes-switch.missing-assume-yes-switch
  patterns:
  - pattern: |
      RUN ... apt-get install ... $SOMETHING
  - pattern-not-inside: |
      RUN ... apt-get install ... -y
  - pattern-not-inside: |
      RUN ... apt-get install ... --assume-yes
  - pattern-not-inside: |
      RUN ... apt-get install ... --yes
  languages:
  - generic
  message: |
    This 'apt-get install' is missing the '-y' switch. This might stall
    builds because it requires human intervention. Add the '-y' switch.
  severity: WARNING
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3014
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3014
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.correctness.multiple-cmd-instructions.multiple-cmd-instructions
  severity: ERROR
  languages:
  - generic
  pattern: |
    CMD ...
    ...
    CMD ...
  message: |
    Multiple CMD instructions were found. Only the last one will take effect.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL4003
    references:
    - https://github.com/hadolint/hadolint/wiki/DL4003
    - https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index#//dash_ref_Instructions/Entry/CMD/0
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.remove-package-lists.remove-package-lists
  patterns:
  - pattern: RUN apt-get update
  - pattern-not-inside: RUN apt-get update ... && rm -rf /var/lib/apt/lists/*
  message: The package lists were not deleted after running 'apt-get update', which
    increases the size of the image. Remove the package lists by appending '&& rm
    -rf /var/lib/apt/lists/*' at the end of apt-get command chain.
  severity: WARNING
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3009
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3009
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key
  pattern-regex: '[0-9a-f]{32}-us[0-9]{1,2}'
  languages:
  - regex
  message: MailChimp API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.dockerfile.best-practice.remove-package-cache.remove-package-cache
  patterns:
  - pattern: RUN apt-get update
  - pattern-not-inside: RUN apt-get update ... && apt-get clean
  message: The package cache was not deleted after running 'apt-get update', which
    increases the size of the image. Remove the package cache by appending '&& apt-get
    clean' at the end of apt-get command chain.
  severity: WARNING
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3009
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3009
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-yum-clean-all.missing-yum-clean-all
  severity: WARNING
  languages:
  - generic
  patterns:
  - pattern: yum $COMMAND
  - pattern-not-inside: RUN ... && yum clean all
  message: |
    This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3032
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3032
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-dnf-assume-yes-switch.missing-dnf-assume-yes-switch
  severity: WARNING
  languages:
  - generic
  patterns:
  - pattern: |
      RUN ... dnf install ... $SOMETHING
  - pattern-not-inside: |
      RUN ... dnf install ... -y
  - pattern-not-inside: |
      RUN ... dnf ... --assumeyes
  message: |
    This 'dnf install' is missing the '-y' switch. This might stall
    builds because it requires human intervention. Add the '-y' switch.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3038
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3038
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.use-absolute-workdir.use-absolute-workdir
  pattern: WORKDIR $WORD
  message: Detected a relative WORKDIR. Use absolute paths. This prevents issues based
    on assumptions about the WORKDIR of previous containers.
  severity: WARNING
  languages:
  - generic
  fix: WORKDIR /$WORD
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3000
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3000
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.use-workdir.use-workdir
  pattern: RUN ... cd
  message: Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work
    as expected in a conatiner.
  severity: WARNING
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3003
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3003
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.maintainer-is-deprecated.maintainer-is-deprecated
  severity: INFO
  languages:
  - generic
  pattern: MAINTAINER
  message: |
    MAINTAINER has been deprecated.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL4000
    references:
    - https://github.com/hadolint/hadolint/wiki/DL4000
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-zypper-clean.missing-zypper-clean
  severity: WARNING
  languages:
  - generic
  patterns:
  - pattern: zypper $COMMAND
  - pattern-not-inside: RUN ... && zypper clean
  message: |
    This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3036
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3036
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.avoid-platform-with-from.avoid-platform-with-from
  severity: INFO
  languages:
  - generic
  pattern: FROM ... --platform= ... $IMAGE
  message: Using '--platform' with FROM restricts the image to build on a single platform.
    Further, this must be the same as the build platform. If you intended to specify
    the target platform, use the utility 'docker buildx --platform=' instead.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3029
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3029
    - https://docs.docker.com/buildx/working-with-buildx/
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-yum-assume-yes-switch.missing-yum-assume-yes-switch
  severity: WARNING
  languages:
  - generic
  patterns:
  - pattern: |
      RUN ... yum install ... $SOMETHING
  - pattern-not-inside: |
      RUN ... yum install ... -y
  - pattern-not-inside: |
      RUN ... yum ... --assumeyes
  message: |
    This 'yum install' is missing the '-y' switch. This might stall
    builds because it requires human intervention. Add the '-y' switch.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3030
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3030
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: contrib.react.react_html_parser.react_html_parser
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
  patterns:
  - pattern-either:
    - pattern: |
        ReactHtmlParser(...)
  - pattern-not-inside: |
      import ReactHtmlParser from 'react-html-parser' ;
  message: |
    Untrusted user input in rendering reactHTMLParser can lead to an XSS
  severity: ERROR
  languages:
  - javascript
- id: generic.dockerfile.best-practice.use-shell-instruction.use-shell-instruction
  severity: WARNING
  languages:
  - generic
  pattern: |
    RUN ln ... /bin/sh
  message: |
    Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL4005
    references:
    - https://github.com/hadolint/hadolint/wiki/DL4005
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-image-version.missing-image-version
  patterns:
  - pattern: FROM $IMAGE
  - pattern-not-inside: FROM $IMAGE:$VERSION
  message: Images should be tagged with an explicit version to produce deterministic
    container images.
  severity: WARNING
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3006
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3006
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-zypper-no-confirm-switch.missing-zypper-no-confirm-switch
  severity: WARNING
  languages:
  - generic
  patterns:
  - pattern: |
      RUN ... zypper install ... $SOMETHING
  - pattern-not-inside: |
      RUN ... zypper install ... -y
  - pattern-not-inside: |
      RUN ... zypper install ... --no-confirm
  message: |
    This 'zypper install' is missing the '-y' switch. This might stall
    builds because it requires human intervention. Add the '-y' switch.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3034
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3034
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.nonsensical-command.nonsensical-command
  patterns:
  - pattern: RUN $CMD
  - metavariable-regex:
      metavariable: $CMD
      regex: (shutdown|service|ps|free|top|kill|mount|ifconfig|nano|vim)
  message: Some commands such as `$CMD` do not make sense in a container. Do not use
    these.
  severity: WARNING
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3001
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3001
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.prefer-apt-get.prefer-apt-get
  severity: INFO
  languages:
  - generic
  patterns:
  - pattern: RUN apt
  - pattern-not-inside: RUN apt-get
  message: '''apt-get'' is preferred as an unattended tool for stability. ''apt''
    is discouraged.'
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3027
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3027
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.set-pipefail.set-pipefail
  languages:
  - generic
  message: |
    Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.
    If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL ["/bin/bash", "-o", "pipefail", "-c"] before the command.
    If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL ["/bin/ash"]`.
  metadata:
    references:
    - https://github.com/hadolint/hadolint/wiki/DL4006
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL4006
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  patterns:
  - pattern: RUN $CMD ... | $CMD2
  - pattern-not-inside: |
      SHELL [... "pipefail" ...]
      ...
      ...
  - pattern-not-inside: |
      SHELL ["/bin/ash" ...]
      ...
      ...
  severity: WARNING
- id: generic.dockerfile.best-practice.missing-no-install-recommends.missing-no-install-recommends
  patterns:
  - pattern: |
      RUN ... apt-get install ... $SOMETHING
  - pattern-not-inside: |
      RUN ... apt-get install ... --no-install-recommends
  languages:
  - generic
  message: |
    This 'apt-get install' is missing '--no-install-recommends'. This prevents
    unnecessary packages from being installed, thereby reducing image size. Add
    '--no-install-recommends'.
  severity: INFO
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3015
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3015
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.missing-dnf-clean-all.missing-dnf-clean-all
  severity: WARNING
  languages:
  - generic
  patterns:
  - pattern: dnf $COMMAND
  - pattern-not-inside: RUN ... && dnf clean all
  message: |
    This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3038
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3038
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: generic.dockerfile.best-practice.use-either-wget-or-curl.use-either-wget-or-curl
  severity: INFO
  languages:
  - generic
  message: |
    'wget' and 'curl' are similar tools. Choose one and do not install the other to decrease image size.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL4001
    references:
    - https://github.com/hadolint/hadolint/wiki/DL4001
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern-either:
  - pattern: |
      RUN wget ...
      ...
      RUN curl ...
  - pattern: |
      RUN curl ...
      ...
      RUN wget ...
- id: generic.dockerfile.best-practice.missing-apk-no-cache.missing-apk-no-cache
  patterns:
  - pattern: |
      RUN ... apk $COMMAND ... $SOMETHING
  - pattern-not-inside: |
      RUN ... apk $COMMAND ... --no-cache
  languages:
  - generic
  message: |
    This apk command is missing '--no-cache'. This forces apk to use a package
    index instead of a local package cache, removing the need for '--update'
    and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command.
  severity: INFO
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3019
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3019
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: contrib.nodejsscan.jwt_exposed_data.jwt_exposed_data
  patterns:
  - pattern-inside: |
      ...
      require('jose');
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
    - patterns:
      - pattern-inside: function $F(...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
  message: The object is passed strictly to jose.JWT.sign(...). Make sure  that sensitive
    information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-522: Insufficiently Protected Credentials'
  languages:
  - javascript
- id: generic.nginx.security.request-host-used.request-host-used
  pattern: $http_host
  paths:
    include:
    - '*conf*'
    - '*nginx*'
    - '*vhost*'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: '''$http_host'' uses the ''Host'' request header which could be controlled
    by an attacker. Use the ''$host'' variable instead, which will use server names
    listed in the ''server_name'' directive.'
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/hostspoofing.md
- id: generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: |
    The protocol scheme for this proxy is dynamically determined.
    This can be dangerous if the scheme can be injected by an
    attacker because it may forcibly alter the connection scheme.
    Consider hardcoding a scheme for this proxy.
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
  pattern: proxy_pass $$SCHEME:// ...;
- id: generic.nginx.security.missing-ssl-version.missing-ssl-version
  patterns:
  - pattern: server { ... listen $PORT ssl; ... }
  - pattern-not-inside: server { ... ssl_protocols ... }
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: This server configuration is missing the 'ssl_protocols' directive. By
    default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions
    older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2
    TLSv1.3' to use secure TLS versions.
  metadata:
    references:
    - https://www.acunetix.com/blog/web-security-zone/hardening-nginx/
    - https://nginx.org/en/docs/http/configuring_https_servers.html
- id: generic.nginx.security.alias-path-traversal.alias-path-traversal
  patterns:
  - pattern: |
      location ... {
        ...
        alias ...;
        ...
      }
  - pattern-not-inside: location /.../ { ... ... }
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  fix-regex:
    regex: location\s+([A-Za-z0-9/-_\.]+)
    replacement: location \1/
  languages:
  - generic
  severity: WARNING
  message: The alias in this location block is subject to a path traversal because
    the location path does not end in a path separator (e.g., '/'). To fix, add a
    path separator to the end of the path.
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/aliastraversal.md
- id: generic.nginx.security.insecure-ssl-version.insecure-ssl-version
  patterns:
  - pattern-not: ssl_protocols TLSv1.2 TLSv1.3;
  - pattern-not: ssl_protocols TLSv1.3 TLSv1.2;
  - pattern-not: ssl_protocols TLSv1.2;
  - pattern-not: ssl_protocols TLSv1.3;
  - pattern: ssl_protocols ...;
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2
    and TLS1.3; older versions are known to be broken and are susceptible to attacks.
    Prefer use of TLSv1.2 or later.
  metadata:
    references:
    - https://www.acunetix.com/blog/web-security-zone/hardening-nginx/
    - https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/
- id: generic.nginx.security.header-injection.header-injection
  pattern: |
    location ... <$VARIABLE> ... {
      ...
      add_header ... $$VARIABLE
      ...
    }
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: ERROR
  message: 'The $$VARIABLE path parameter is added as a header in the response. This
    could allow an attacker to inject a newline and add a new header into the response.
    This is called HTTP response splitting. To fix, do not allow whitespace in the
    path parameter: ''[^\s]+''.'
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md
    - https://owasp.org/www-community/attacks/HTTP_Response_Splitting
- id: generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key
  pattern-regex: sk_live_[0-9a-z]{32}
  languages:
  - regex
  message: Picatic API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.nginx.security.header-redefinition.header-redefinition
  patterns:
  - pattern-inside: |
      server {
        ...
        add_header ...;
        ...
        ...
      }
  - pattern-inside: |
      location ... {
        ...
        ...
      }
  - pattern: add_header ...;
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: The 'add_header' directive is called in a 'location' block after headers
    have been set at the server block. Calling 'add_header' in the location block
    will actually overwrite the headers defined in the server block, no matter which
    headers are set. To fix this, explicitly set all headers or set all headers in
    the server block.
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md
- id: generic.hugo.best-practice.invalid-base-url.invalid-base-url
  patterns:
  - pattern: baseURL = "..."
  - pattern-regex: (?!.*http).*
  severity: WARNING
  message: |-
    The 'baseURL' is invalid. This may cause links to not work if deployed.
    Include the scheme (e.g., https://).
  languages:
  - generic
- id: generic.hugo.best-practice.localhost-base-url.localhost-base-url
  patterns:
  - pattern: baseURL = "..."
  - pattern-regex: .*(localhost|127\.0\.0\.1).*
  severity: WARNING
  message: The 'baseURL' is set to localhost. This may cause links to not work if
    deployed.
  languages:
  - generic
- id: generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key
  pattern-regex: '[hH][eE][rR][oO][kK][uU].*[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'
  languages:
  - regex
  message: Heroku API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-generic-api-key.detected-generic-api-key
  pattern-regex: '[aA][pP][iI]_?[kK][eE][yY].*[''|"]?[0-9a-zA-Z]{32,45}[''|"]?'
  languages:
  - regex
  message: Generic API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
  pattern-regex: (A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
  languages:
  - regex
  message: AWS Access Key ID Value detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token
  pattern-regex: access_token\$production\$[0-9a-z]{16}\$[0-9a-z]{32}
  languages:
  - regex
  message: PayPal Braintree Access Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-codeclimate.detected-codeclimate
  pattern-regex: (?i)codeclima.{0,50}["|'|`]?[0-9a-f]{64}["|'|`]?
  languages:
  - regex
  message: CodeClimate detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key
  pattern-regex: rk_live_[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Stripe Restricted API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-username-and-password-in-uri.detected-username-and-password-in-uri
  pattern-regex: ([\w+]{1,24})(://)([^$<]{1})([^\s";]{1,}):([^$<]{1})([^\s";]{1,})@[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,24}([^\s]+)
  languages:
  - regex
  message: Username and password in URI detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-google-gcm-service-account.detected-google-gcm-service-account
  pattern-regex: (("|'|`)?type("|'|`)?\s{0,50}(:|=>|=)\s{0,50}("|'|`)?service_account("|'|`)?,?)
  languages:
  - regex
  message: Google (GCM) Service account detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token
  pattern-regex: amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
  languages:
  - regex
  message: Amazon MWS Auth Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: contrib.owasp.java.ssrf.ssrf.owasp.java.ssrf.java.net.url
  message: |
    A parameter being passed directly into java.net.URL function most likely lead to SSRF.
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    source-rule-url: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        $RETURN $METHOD(...,String $VAR, ...) {
          ...
          URL $URL = new URL($VAR);
          ...
        }
  - pattern-not: $URL = new URL("...");
  languages:
  - java
- id: generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret
  pattern-regex: sq0csp-[0-9A-Za-z\\\-_]{43}
  languages:
  - regex
  message: Square OAuth Secret detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    references:
    - https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py
- id: generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key
  pattern-regex: SK[0-9a-fA-F]{32}
  languages:
  - regex
  message: Twilio API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-square-access-token.detected-square-access-token
  pattern-regex: sq0atp-[0-9A-Za-z\-_]{22}
  languages:
  - regex
  message: Square Access Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-aws-session-token.detected-aws-session-token
  pattern-regex: (("|'|`)?((?i)aws)?_?((?i)session)_?((?i)token)("|'|`)?\s{0,50}(:|=>|=)\s{0,50}("|'|`)?[A-Za-z0-9/+=]{16,}("|'|`)?)
  languages:
  - regex
  message: AWS Session Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-slack-webhook.detected-slack-webhook
  pattern-regex: https://hooks\.slack\.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}
  languages:
  - regex
  message: Slack Webhook detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key
  pattern-regex: (("|'|`)?((?i)aws)_?((?i)secret)_?((?i)access)?_?((?i)key)?_?((?i)id)?("|'|`)?\s{0,50}(:|=>|=)\s{0,50}("|'|`)?[A-Za-z0-9/+=]{40}("|'|`)?)
  languages:
  - regex
  message: AWS Secret Access Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-outlook-team.detected-outlook-team
  pattern-regex: https://outlook\.office\.com/webhook/[0-9a-f-]{36}
  languages:
  - regex
  message: Outlook Team detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token
  pattern-either:
  - pattern-regex: EAACEdEose0cBA[0-9A-Za-z]+
  - pattern-regex: EAAAACZAVC6ygB[0-9A-Za-z]+
  - pattern-regex: EAAAAZAw4[0-9A-Za-z]+
  languages:
  - regex
  message: Facebook Access Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token
  pattern-regex: '[tT][wW][iI][tT][tT][eE][rR].*[1-9][0-9]+-[0-9a-zA-Z]{40}'
  languages:
  - regex
  message: Twitter Access Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-google-oauth.detected-google-oauth-url
  pattern-regex: '[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com'
  languages:
  - regex
  message: Google OAuth url detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-ssh-password.detected-ssh-password
  pattern-regex: sshpass -p.*['|\\\"]
  languages:
  - regex
  message: SSH Password detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-artifactory-password.detected-artifactory-password
  patterns:
  - pattern-regex: |
      \bAP[\dABCDEF][a-zA-Z0-9]{8,}
  - pattern-not-regex: |
      sha(128|256|512).*
  languages:
  - regex
  message: Artifactory token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/artifactory.py
- id: generic.secrets.security.detected-private-key.detected-private-key
  pattern-regex: (?i)-{5}begin( [dr]sa| ec| openssh| encrypted)? private key-{5}
  languages:
  - regex
  message: Private Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-sauce-token.detected-sauce-token
  pattern-regex: (?i)sauce.{0,50}(\\\"|'|`)?[0-9a-f-]{36}(\\\"|'|`)?
  languages:
  - regex
  message: Sauce Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key
  pattern-regex: '[0-9]+:AA[0-9A-Za-z\-_]{33}'
  languages:
  - regex
  message: Telegram Bot API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block
  pattern-regex: '-----BEGIN PGP PRIVATE KEY BLOCK-----'
  languages:
  - regex
  message: PGP private key block detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-generic-secret.detected-generic-secret
  pattern-regex: '[sS][eE][cC][rR][eE][tT].*[''|"]?[0-9a-zA-Z]{32,45}[''|"]?'
  languages:
  - regex
  message: Generic Secret detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-hockeyapp.detected-hockeyapp
  pattern-regex: (?i)hockey.{0,50}(\\\"|'|`)?[0-9a-f]{32}(\\\"|'|`)?
  languages:
  - regex
  message: HockeyApp detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key
  pattern-regex: key-[0-9a-zA-Z]{32}
  languages:
  - regex
  message: Mailgun API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key
  pattern-regex: (?i)sonar.{0,50}(\\\"|'|`)?[0-9a-f]{40}(\\\"|'|`)?
  languages:
  - regex
  message: SonarQube Docs API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
- id: generic.secrets.security.detected-slack-token.detected-slack-token
  pattern-either:
  - pattern-regex: (xox[pboa]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})
  - pattern-regex: xox.-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Slack Token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    references:
    - https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58
- id: generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth
  pattern-regex: '[tT][wW][iI][tT][tT][eE][rR].*[''|"]?[0-9a-zA-Z]{35,44}[''|"]?'
  languages:
  - regex
  message: Twitter OAuth detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
- id: generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var
  message: 'Detected a unquoted template variable as an attribute. If unquoted, a
    malicious actor could inject custom JavaScript handlers. To fix this, add quotes
    around the template expression, like this: "{{ expr }}".'
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
  languages:
  - generic
  paths:
    include:
    - '*.html'
    - '*.mustache'
    - '*.hbs'
  severity: WARNING
  patterns:
  - pattern-inside: <$TAG ...>
  - pattern-not-inside: ="..."
  - pattern-not-inside: ='...'
  - pattern: '{{ ... }}'
  fix-regex:
    regex: '{{(.*?)}}'
    replacement: '"{{\1}}"'
- id: generic.html-templates.security.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For
    Django, you may also consider using the 'json_script' template tag and retrieving
    the data in your script by using the element ID (e.g., `document.getElementById`).
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
  languages:
  - generic
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not-inside: <script ... $ATTR = "..." ...>
  - pattern-not-inside: <script ... $ATTR = '...' ...>
  - pattern: '{{ ... }}'
- id: generic.html-templates.security.var-in-href.var-in-href
  message: Detected a template variable used in an anchor tag with the 'href' attribute.
    This allows a malicious actor to input the 'javascript:' URI and is subject to
    cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely
    generate a URL. If using Django, use the 'url' filter to safely generate a URL.
    If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable
    for relative links (`href="/{{link}}"`). You may also consider setting the Content
    Security Policy (CSP) header.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url
    - https://github.com/pugjs/pug/issues/2952
    - https://content-security-policy.com/
  languages:
  - generic
  paths:
    include:
    - '*.html'
    - '*.mustache'
    - '*.hbs'
  severity: WARNING
  patterns:
  - pattern-inside: <a ...>
  - pattern-either:
    - pattern: href = {{ ... }}
    - pattern: href = "{{ ... }}"
    - pattern: href = '{{ ... }}'
  - pattern-not-inside: href = {{ url_for(...) ... }}
  - pattern-not-inside: href = "{{ url_for(...) ... }}"
  - pattern-not-inside: href = '{{ url_for(...) ... }}'
  - pattern-not-inside: href = "/{{ ... }}"
  - pattern-not-inside: href = '/{{ ... }}'
- id: c.lang.correctness.incorrect-use-ato-fn.incorrect-use-ato-fn
  pattern-either:
  - pattern: atoi(...)
  - pattern: atol(...)
  - pattern: atoll(...)
  message: |
    Avoid the 'ato*()' family of functions. Their use can lead to undefined
    behavior, integer overflows, and lack of appropriate error handling. Instead
    prefer the 'strtol*()' family of functions.
  metadata:
    references:
    - https://stackoverflow.com/q/38393162
    - https://stackoverflow.com/q/14176123
  languages:
  - c
  severity: WARNING
- id: c.lang.correctness.goto-fail.double_goto
  pattern: |
    if ($COND)
      goto $FAIL;
      goto $FAIL;
  message: The second goto statement will always be executed.
  languages:
  - c
  severity: WARNING
- id: c.lang.correctness.incorrect-use-sscanf-fn.incorrect-use-sscanf-fn
  patterns:
  - pattern: sscanf($STR, $FMT, $PTR);
  - metavariable-regex:
      metavariable: $FMT
      regex: '"%(l{0,2}|L)([fegEa]|[dDiouxX])"'
  message: |
    Avoid 'sscanf()' for number conversions. Its use can lead to undefined
    behavior, slow processing, and integer overflows. Instead prefer the
    'strto*()' family of functions.
  metadata:
    references:
    - https://stackoverflow.com/q/22865622
    - https://stackoverflow.com/q/7021725
    - https://www.mattkeeter.com/blog/2021-03-01-happen/
  languages:
  - c
  severity: WARNING
- id: c.lang.correctness.c-string-equality.c-string-equality
  pattern: (char *$X) == (char *$Y)
  message: Using == on char* performs pointer comparison, use strcmp instead
  fix: strcmp($X, $Y) == 0
  languages:
  - c
  severity: ERROR
- id: c.lang.security.insecure-use-string-copy-fn.insecure-use-string-copy-fn
  pattern-either:
  - pattern: strcpy(...)
  - pattern: strncpy(...)
  message: |
    Finding triggers whenever there is a strcpy or strncpy used.
    This is an issue because strcpy or strncpy can lead to buffer overflow vulns.
    Fix this by using strcpy_s instead.
  metadata:
    references:
    - https://cwe.mitre.org/data/definitions/676
    - https://nvd.nist.gov/vuln/detail/CVE-2019-11365
  languages:
  - c
  severity: WARNING
- id: c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn
  pattern: strtok(...)
  message: |
    Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the
    delimiter character. Use 'strtok_r()' instead.
  metadata:
    references:
    - https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged
    - https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS
    - https://stackoverflow.com/a/40335556
  languages:
  - c
  severity: ERROR
- id: c.lang.security.use-after-free.use-after-free
  pattern-either:
  - patterns:
    - pattern: |
        free($VAR);
        ...
        $VAR->$FUNC(...);
    - pattern-not: |
        free($VAR);
        ...
        $VAR = NULL;
        ...
        $VAR->$FUNC(...);
  - patterns:
    - pattern: |
        free($VAR);
        ...
        $FUNC(..., $VAR->$MEMBER, ...);
    - pattern-not: |
        free($VAR);
        ...
        $VAR = NULL;
        ...
        $FUNC(..., $VAR->$MEMBER, ...);
  message: |
    Variable '$VAR' was used after being freed. This can lead to undefined behavior.
  metadata:
    references:
    - https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/
  languages:
  - c
  severity: ERROR
- id: c.lang.security.random-fd-exhaustion.random-fd-exhaustion
  pattern-either:
  - patterns:
    - pattern: |
        $FD = open("/dev/urandom", ...);
        ...
        read($FD, ...);
    - pattern-not: |
        $FD = open("/dev/urandom", ...);
        ...
        $BYTES_READ = read($FD, ...);
  - patterns:
    - pattern: |
        $FD = open("/dev/random", ...);
        ...
        read($FD, ...);
    - pattern-not: |
        $FD = open("/dev/random", ...);
        ...
        $BYTES_READ = read($FD, ...);
  message: |
    Call to 'read()' without error checking is susceptible to file descriptor
    exhaustion. Consider using the 'getrandom()' function.
  metadata:
    references:
    - https://lwn.net/Articles/606141/
  languages:
  - c
  severity: ERROR
- id: c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn
  pattern: scanf(...)
  message: |
    Avoid using 'scanf()'. This function, when used improperly, does not consider
    buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead
    for reading input.
  metadata:
    references:
    - http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html
  languages:
  - c
  severity: ERROR
- id: c.lang.security.double-free.double-free
  patterns:
  - pattern: |
      free($VAR);
      ...
      free($VAR);
  - pattern-not: |
      free($VAR);
      ...
      $VAR = NULL;
      ...
      free($VAR);
  - pattern-not: |
      free($VAR);
      ...
      $VAR = malloc(...);
      ...
      free($VAR);
  message: |
    Variable '$VAR' was freed twice. This can lead to undefined behavior.
  metadata:
    references:
    - https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory
  languages:
  - c
  severity: ERROR
- id: c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn
  pattern: gets(...)
  message: |
    Avoid 'gets()'. This function does not consider buffer boundaries and can lead
    to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
  metadata:
    references:
    - https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s
  languages:
  - c
  severity: ERROR
- id: c.lang.security.insecure-use-strcat-fn.insecure-use-strcat-fn
  pattern-either:
  - pattern: strcat(...)
  - pattern: strncat(...)
  message: |
    Finding triggers whenever there is a strcat or strncat used.
    This is an issue because strcat or strncat can lead to buffer overflow vulns.
    Fix this by using strcat_s instead.
  metadata:
    references:
    - https://nvd.nist.gov/vuln/detail/CVE-2019-12553
    - https://techblog.mediaservice.net/2020/04/cve-2020-2851-stack-based-buffer-overflow-in-cde-libdtsvc/
  languages:
  - c
  severity: WARNING
- id: typescript.react.best-practice.react-find-dom.react-find-dom
  pattern-either:
  - pattern: |
      findDOMNode(...)
  - pattern: |
      $DOM.findDOMNode(...)
  message: |
    findDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction.
  metadata:
    references:
    - https://reactjs.org/docs/react-dom.html#finddomnode
    - https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: contrib.owasp.java.xxe.saxbuilder.owasp.java.xxe.org.jdom2.input.SAXBuilder
  message: |
    SAXBuilder being instantiated without calling the setFeature functions that are generally used for disabling entity processing
  metadata:
    cwe: CWE-611
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        SAXBuilder $SAXBUILDER = ... ;
        ...
        $SAXBUILDER.build(...);
    - pattern: SAXBuilder $SAXBUILDER = new SAXBuilder(...);
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $SAXBUILDER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        $SAXBUILDER.setFeature("http://xml.org/sax/features/external-general-entities", false);
        $SAXBUILDER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  - pattern-not-inside: |
      SAXBuilder $SAXBUILDER = ... ;
      ...
      $SAXBUILDER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      $SAXBUILDER.setFeature("http://xml.org/sax/features/external-general-entities", false);
      $SAXBUILDER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  languages:
  - java
- id: typescript.react.best-practice.react-legacy-component.react-legacy-component
  patterns:
  - pattern: |
      $METHOD(...) {
        ...
      }
  - metavariable-regex:
      metavariable: $METHOD
      regex: componentWillMount|componentWillReceiveProps|componentWillUpdate
  message: |
    Legacy component lifecycle was detected - $METHOD.
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.best-practice.react-props-in-state.react-props-in-state
  pattern-either:
  - patterns:
    - pattern-inside: |
        class $CN extends React.Component {
          ...
        }
    - pattern-either:
      - pattern: |
          state = {$NAME: <... this.props.$PROP ...>}
      - pattern: |
          this.state = {$NAME: <... this.props.$PROP ...>}
  - patterns:
    - pattern-inside: |
        function $FN({$PROP},...) {
          ...
        }
    - pattern-inside: useState(...)
    - pattern: $PROP
  - patterns:
    - pattern-inside: |
        function $FN($PROP,...) {
          ...
        }
    - pattern-inside: useState(...)
    - pattern: $PROP
  message: |
    It is a bad practice to stop the data flow in rendering by copying props into state.
  metadata:
    references:
    - https://overreacted.io/writing-resilient-components/#principle-1-dont-stop-the-data-flow
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.best-practice.define-styled-components-on-module-level.define-styled-components-on-module-level
  patterns:
  - pattern-inside: |
      import styled from 'styled-components';
      ...
  - pattern-either:
    - pattern-inside: |
        function $FUNC(...) {
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
        }
  - pattern-either:
    - pattern: |
        styled.$EL`...`;
    - pattern: |
        styled($EL)`...`;
  message: |
    By declaring a styled component inside the render method of a react component, you are dynamically creating a new component on every render. This means that React will have to discard and re-calculate that part of the DOM subtree on each subsequent render, instead of just calculating the difference of what changed between them. This leads to performance bottlenecks and unpredictable behavior.
  metadata:
    references:
    - https://styled-components.com/docs/faqs#why-should-i-avoid-declaring-styled-components-in-the-render-method
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: contrib.owasp.java.xxe.xmlinputfactory.owasp.java.xxe.javax.xml.stream.XMLInputFactory
  severity: WARNING
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  message: |
    XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $XMLFACTORY = $W.newInstance(...);
      ...
      $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
  - pattern-either:
    - pattern: $XMLFACTORY = $W.newFactory(...);
    - pattern: $XMLFACTORY = new XMLInputFactory(...);
    - pattern: $XMLFACTORY = $W.newInstance(...);
  languages:
  - java
- id: contrib.owasp.java.xxe.documentbuilderfactory.owasp.java.xxe.javax.xml.parsers.DocumentBuilderFactory
  message: |
    DocumentBuilderFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing
  metadata:
    cwe: CWE-611
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        DocumentBuilderFactory $DBF =  ... ;
        ...
        DocumentBuilder $DB = $DBF.newDocumentBuilder();
        ...
        $DB.parse(...);
    - pattern: DocumentBuilderFactory $DBF = DocumentBuilderFactory.newInstance().newDocumentBuilder();
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $DBF.setXIncludeAware(true);
        $DBF.setNamespaceAware(true);
        ...
        $DBF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        $DBF.setFeature("http://xml.org/sax/features/external-general-entities", false);
        $DBF.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  - pattern-not-inside: |
      DocumentBuilderFactory $DBF =  ... ;
      ...
      $DBF.setXIncludeAware(true);
      $DBF.setNamespaceAware(true);
      ...
      $DBF.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      $DBF.setFeature("http://xml.org/sax/features/external-general-entities", false);
      $DBF.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  languages:
  - java
- id: contrib.owasp.java.xxe.xxe-imports.owasp.java.xxe.possible.import.statements
  message: |
    Non-exhaustive list of Libraries that provide functionality to accept XML as an input
  metadata:
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: INFO
  patterns:
  - pattern-either:
    - pattern: import org.jdom2.input.SAXBuilder;
    - pattern: import org.xml.sax.XMLReader;
    - pattern: import org.dom4j.io.SAXReader;
    - pattern: import javax.xml.parsers.SAXParserFactory;
    - pattern: import org.apache.commons.digester3.Digester;
    - pattern: import javax.xml.parsers.DocumentBuilderFactory;
    - pattern: import javax.xml.stream.XMLInputFactory;
    - pattern: import javax.xml.XPathExpression;
    - pattern: import java.beans.XMLDecoder;
    - pattern: import javax.xml.transform.sax.SAXTransformerFactory;
    - pattern: import javax.xml.validation.SchemaFactory;
    - pattern: import javax.xml.validation.Validator;
    - pattern: import javax.xml.transform.TransformerFactory;
  languages:
  - java
- id: contrib.owasp.java.xxe.digester3-digester.owasp.java.xxe.org.apache.commons.digester3.Digester
  message: |
    Digester being instantiated without calling the setFeature functions that are generally used for disabling entity processing
  metadata:
    cwe: CWE-611
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        Digester $DIGESTER =  ... ;
        ...
        $DIGESTER.parse(...);
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $DIGESTER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        $DIGESTER.setFeature("http://xml.org/sax/features/external-general-entities", false);
        $DIGESTER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  languages:
  - java
- id: contrib.owasp.java.xxe.xmlreader.owasp.java.xxe.org.xml.sax.XMLReader
  message: |
    XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing
  metadata:
    cwe: CWE-611
    owasp: 'A4: XML External Entities (XXE)'
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        XMLReader $XMLREADER = ... ;
        ...
        $XMLREADER.parse(...);
    - pattern: XMLReader $XMLREADER = $W.createXMLReader(...);
    - pattern: XMLReader $XMLREADER = $W.getXMLReader(...);
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLREADER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        $XMLREADER.setFeature("http://xml.org/sax/features/external-general-entities", false);
        $XMLREADER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  - pattern-not-inside: |
      XMLReader $XMLREADER = ... ;
      ...
      $XMLREADER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      $XMLREADER.setFeature("http://xml.org/sax/features/external-general-entities", false);
      $XMLREADER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  languages:
  - java
- id: typescript.react.security.audit.react-jwt-in-localstorage.react-jwt-in-localstorage
  patterns:
  - pattern-inside: |
      import jwt_decode from "jwt-decode";
      ...
  - pattern-either:
    - pattern: |
        $DECODED = jwt_decode($TOKEN,...);
        ...
        localStorage.setItem($NAME, <... $TOKEN ...>);
    - pattern: |
        $DECODED = jwt_decode(...);
        ...
        localStorage.setItem($NAME, <... $DECODED ...>);
  message: |
    Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie.
  metadata:
    references:
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property
  patterns:
  - pattern-either:
    - pattern: |
        $X.innerHTML = ...;
    - pattern: |
        $X.outerHTML = ...;
  - pattern-not: |
      $X.innerHTML = "...";
  - pattern-not: |
      $X.outerHTML = "...";
  message: |
    User controlled data in a `$X` is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-jwt-decoded-property.react-jwt-decoded-property
  patterns:
  - pattern-inside: |
      import jwt_decode from "jwt-decode";
      ...
  - pattern-inside: |
      $DECODED = jwt_decode($TOKEN,...);
      ...
  - pattern: $DECODED.$PROPERTY
  message: |
    Property decoded from JWT token without verifying and cannot be trustworthy.
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
  patterns:
  - pattern-either:
    - pattern: $EL.insertAdjacentHTML($P, ...)
    - pattern: document.write(...)
    - pattern: document.writeln(...)
  - pattern-not: $EL.insertAdjacentHTML($P, "...")
  - pattern-not: document.write("...")
  - pattern-not: document.writeln("...")
  message: |
    User controlled data in a insertAdjacentHTML, document.write or document.writeln is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust
  patterns:
  - pattern-either:
    - pattern: $X.bypassSecurityTrustHtml(...)
    - pattern: $X.bypassSecurityTrustStyle(...)
    - pattern: $X.bypassSecurityTrustScript(...)
    - pattern: $X.bypassSecurityTrustUrl(...)
    - pattern: $X.bypassSecurityTrustResourceUrl(...)
  message: Bypassing the built-in sanitization could expose the application to cross-site
    scripting (XSS).
  languages:
  - typescript
  severity: WARNING
  metadata:
    references:
    - https://angular.io/api/platform-browser/DomSanitizer
- id: typescript.angular.security.audit.angular-domsanitizer.angular-sanitize-none-context
  patterns:
  - pattern: $X.sanitize(SecurityContext.NONE, ...)
  message: The output is not sanitized when calling with SecurityContext.NONE.
  languages:
  - typescript
  severity: WARNING
  metadata:
    references:
    - https://angular.io/api/platform-browser/DomSanitizer
- id: typescript.nestjs.security.audit.nestjs-header-xss-disabled.nestjs-header-xss-disabled
  pattern: |
    class $CN {
        ...
        @Header("=~/[Xx]-[Xx][Ss][Ss]-[Pp][Rr][Oo][Tt][Ee][Cc][Tt][Ii][Oo][Nn]/", '0')
        $FN(...) {
            ...
        }
        ...
    }
  message: |
    X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.
  languages:
  - typescript
  severity: WARNING
- id: typescript.nestjs.security.audit.nestjs-open-redirect.nestjs-open-redirect
  patterns:
  - pattern: |
      return {url: $URL}
  - pattern-inside: |
      class $CN {
          @Redirect(...)
          $FN(...) {
              ...
          }
      }
  - pattern-not: |
      return {url: "..."}
  message: |
    Untrusted user input in {url: ...} can result in Open Redirect vulnerability.
  languages:
  - typescript
  severity: WARNING
- id: html.security.missing-noopener.missing-noopener
  patterns:
  - pattern: |
      <a ... target="_blank" ... >
  - pattern-not-inside: |
      <a ... rel="... noopener ..." ... >
  paths:
    include:
    - '*.html'
  message: This anchor tag with 'target="_blank"' is missing 'noopener'. A page opened
    with 'target="_blank"' can access the window object of the origin page. This means
    it can manipulate the 'window.opener' property, which could redirect the origin
    page to a malicious URL. This is called reverse tabnabbing. To prevent this, include
    'rel=noopener' on this tag
  severity: WARNING
  languages:
  - generic
- id: html.security.missing-noreferrer.missing-noreferrer
  patterns:
  - pattern: |
      <a ... target="_blank" ...>
  - pattern-not-inside: |
      <a ... rel="... noreferrer ..." ... >
  paths:
    include:
    - '*.html'
  message: This anchor tag with 'target="_blank"' is missing 'noreferrer'. A page
    opened with 'target="_blank"' can access the window object of the origin page.
    This means it can manipulate the 'window.opener' property, which could redirect
    the origin page to a malicious URL. This is called reverse tabnabbing. To prevent
    this, include 'rel=noreferrer' on this tag.
  severity: WARNING
  languages:
  - generic
- id: typescript.react.best-practice.react-props-spreading.react-props-spreading
  pattern: |
    <$X {...$PROPS} />
  message: It is a good practice to avoid spreading for JSX attributes. This forces
    the code to be explicit about which props are given to the component. This avoids
    situations where warnings are caused by invalid HTML props passed to HTML elements,
    and further, it avoids passing unintentional extra props by malicious actors.
    Instead, consider explicitly passing props to the component.
  languages:
  - typescript
  - javascript
  severity: WARNING
  metadata:
    source-rule-url: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md
    references:
    - https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-props-no-spreading.md
- id: generic.dockerfile.security.last-user-is-root.last-user-is-root
  patterns:
  - pattern: USER root
  - pattern-not-inside: |
      USER root
      ...
      ...
      USER
  message: The last user in the container is 'root'. This is a security hazard because
    if an attacker gains control of the container they will have root access. Switch
    back to another user after running commands as 'root'.
  severity: ERROR
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3002
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3002
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
- id: javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)
  severity: ERROR
  languages:
  - javascript
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  patterns:
  - pattern-inside: |
      ...
      $JWT = require('express-jwt');
      ...
  - pattern-either:
    - pattern: |
        $JWT(<... {secret: "..."} ...>,...);
    - pattern: |
        $OPTS = <... {secret: "..."} ...>;
        ...
        $JWT($OPTS,...);
- id: typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('react-markdown/with-html');
        ...
    - pattern-inside: |
        $X = require('react-markdown');
        ...
    - pattern-inside: |
        import 'react-markdown/with-html';
        ...
    - pattern-inside: |
        import 'react-markdown';
        ...
  - pattern-either:
    - pattern: |
        <$EL allowDangerousHtml />
    - pattern: |
        <$EL transformLinkUri=... />
    - pattern: |
        <$EL transformImageUri=... />
  message: |
    Overwriting `transformLinkUri` or `transformImageUri` to something insecure or turning `allowDangerousHtml` on, will open code up to XSS vectors.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://www.npmjs.com/package/react-markdown#security
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.react-controlled-component-password.react-controlled-component-password
  pattern-either:
  - pattern: <$EL type="password" value={this.state.$X} onChange=...  />
  - pattern: |
      React.createElement($EL,{type: 'password', value: this.state.$X, onChange:...},...)
  - pattern: |
      $PARAMS = {type: 'password', value: this.state.$X, onChange:...};
      ...
      React.createElement($EL,$PARAMS,...);
  message: |
    Password can be leaked if CSS injection exists on the page.
  metadata:
    references:
    - https://no-csp-css-keylogger.badsite.io/
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
  pattern-either:
  - pattern: |
      <$X dangerouslySetInnerHTML=... />
  - pattern: |
      {dangerouslySetInnerHTML: ...}
  message: "Setting HTML from code is risky because it\u2019s easy to inadvertently
    expose your users to a cross-site scripting (XSS) attack.\n"
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-props-injection.react-props-injection
  patterns:
  - pattern-either:
    - pattern-inside: |
        import $PROPS from "...";
        ...
    - pattern-inside: |
        $PROPS = $METHOD(...);
        ...
    - pattern-inside: |
        function $FUNC(...,$PROPS,...) {
          ...
        }
  - pattern-either:
    - pattern: |
        <$EL {...<... $PROPS ...>} />
    - pattern: |
        <$EL {...$F(<... $PROPS ...>)} />
    - pattern: |
        React.createElement($EL, <... $PROPS ...>)
    - pattern: |
        React.createElement($EL, $F(<... $PROPS ...>))
  message: |
    Inject arbitrary props into the new element. It may introduce an XSS vulnerability.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-router-redirect.react-router-redirect
  patterns:
  - pattern-inside: |
      import "react-router-dom";
      ...
  - pattern: |
      <Redirect to={...} />
  - pattern-not: |
      <Redirect to={"..."} />
  - pattern-not: |
      <Redirect to={{pathname: "..."}} />
  message: |
    User controlled data in <Redirect /> can lead to unpredicted redirects.
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-html-element-spreading.react-html-element-spreading
  patterns:
  - pattern: |
      <$EL {...$PROPS} />
  - metavariable-regex:
      metavariable: $EL
      regex: '[a-z]([a-zA-Z])*'
  message: |
    It is a good practice to avoid spreading for JSX attributes. This prevents accidentally
    passing `dangerouslySetInnerHTML` to an element.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-missing-noopener.react-missing-noopener
  pattern-either:
  - patterns:
    - pattern: |
        <$X target="_blank" />
    - pattern-not: |
        <$X target="_blank" rel="..." />
  - patterns:
    - pattern-inside: |
        <$X target="_blank" rel=... />
    - pattern-regex: rel=["']((?!noopener).)*?["']
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank'},...)
    - pattern-not: |
        React.createElement($A, {rel: '...'},...)
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank', rel: $REL},...)
    - metavariable-regex:
        metavariable: $REL
        regex: '["'']((?!noopener).)*?[''"]'
  - patterns:
    - pattern: |
        $P = {target: '_blank'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {rel: '...'};
        ...
        React.createElement($A, $P,...);
  - patterns:
    - pattern: |
        $P = {target: '_blank', rel: $REL};
        ...
        React.createElement($A, $P,...);
    - metavariable-regex:
        metavariable: $REL
        regex: '["'']((?!noopener).)*?[''"]'
  message: |
    Missing 'noopener' on an anchor tag where target='_blank'. This could introduce
    a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
    - https://web.dev/external-anchors-use-rel-noopener/
    - https://owasp.org/www-community/attacks/Reverse_Tabnabbing
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-href-var.react-href-var
  pattern-either:
  - patterns:
    - pattern: |
        <$EL href=... />
    - pattern-not: |
        <$EL href="..." />
  - patterns:
    - pattern: |
        <Link to=... />
    - pattern-not: |
        <Link to="..." />
  - patterns:
    - pattern: |
        React.createElement($EL, {href: ...})
    - pattern-not: |
        React.createElement($EL, {href: "..."})
  - patterns:
    - pattern: |
        $PARAMS = {href: ...};
    - pattern-not: |
        $PARAMS = {href: "..."};
    - pattern-inside: |
        ...
        React.createElement($EL, $PARAMS);
  message: Detected a variable used in an anchor tag with the 'href' attribute. A
    malicious actor may be able to input the 'javascript:' URI, which could cause
    cross-site scripting (XSS). If you are generating a URL to a known host, hardcode
    the base link (or retrieve it from a configuration) and append the path. You may
    also consider funneling link generation through a safe method which sanitizes
    URLs for the 'javascript:' URI.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls
    - https://pragmaticwebsecurity.com/articles/spasecurity/react-xss-part1.html
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-missing-noreferrer.react-missing-noreferrer
  pattern-either:
  - patterns:
    - pattern: |
        <$X target="_blank" />
    - pattern-not: |
        <$X target="_blank" rel="..." />
    - pattern-not: |
        <$X href="=~/^\/[^\/]/i" />
    - pattern-not: |
        <$X to="=~/^\/[^\/]/i" />
  - patterns:
    - pattern-inside: |
        <$X target="_blank" rel=... />
    - pattern-not-inside: |
        <$X href="=~/^\/[^\/]/i" rel=... />
    - pattern-not-inside: |
        <$X to="=~/^\/[^\/]/i" rel=... />
    - pattern-regex: rel=["']((?!noreferrer).)*?["']
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank'},...)
    - pattern-not: |
        React.createElement($A, {rel: '...'},...)
    - pattern-not: |
        React.createElement($A, {href: '=~/^\/[^\/]/i'},...)
  - patterns:
    - pattern: |
        React.createElement($A, {target: '_blank', rel: $REL},...)
    - pattern-not: |
        React.createElement($A, {href: '=~/^\/[^\/]/i'},...)
    - metavariable-regex:
        metavariable: $REL
        regex: '["'']((?!noreferrer).)*?[''"]'
  - patterns:
    - pattern: |
        $P = {target: '_blank'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {rel: '...'};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {href: '=~/^\/[^\/]/i'};
        ...
        React.createElement($A, $P,...);
  - patterns:
    - pattern: |
        $P = {target: '_blank', rel: $REL};
        ...
        React.createElement($A, $P,...);
    - pattern-not: |
        $P = {href: '=~/^\/[^\/]/i'};
        ...
        React.createElement($A, $P,...);
    - metavariable-regex:
        metavariable: $REL
        regex: '["'']((?!noreferrer).)*?[''"]'
  message: |
    This anchor tag with 'target="_blank"' is missing 'noreferrer'.
    A page opened with 'target="_blank"' can access the window object of the origin page.
    This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL.
    This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://web.dev/external-anchors-use-rel-noopener/
    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: typescript.react.security.audit.react-no-refs.react-no-refs
  pattern-either:
  - pattern: <$EL ref=... />
  - pattern: $REACT.createRef(...)
  - pattern: $REACT.useRef(...)
  - pattern: createRef(...)
  - pattern: useRef(...)
  message: |
    `ref` usage found, refs give direct DOM access and may create a possibility for XSS
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - typescript
  - javascript
  severity: WARNING
- id: ruby.lang.security.dangerous-open.dangerous-open
  patterns:
  - pattern: |
      open($CMD,...)
  - pattern-not: |
      open("...",...)
  - metavariable-regex:
      metavariable: $CMD
      regex: '|'
  message: |
    Detected non-static command inside 'open'. Audit the input to 'open'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.dangerous-syscall.dangerous-syscall
  pattern: |
    syscall
  message: |
    'syscall' is essentially unsafe and unportable. The DL (https://apidock.com/ruby/Fiddle) library is preferred for safer and a bit more portable programming.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.dangerous-open3-pipeline.dangerous-open3-pipeline
  patterns:
  - pattern: |
      Open3.$PIPE(...)
  - pattern-not: |
      Open3.$PIPE(...,"...",...)
  - metavariable-regex:
      metavariable: $PIPE
      regex: ^(pipeline|pipeline_r|pipeline_rw|pipeline_start|pipeline_w)$
  message: |
    Detected non-static command inside $PIPE. Audit the input to '$PIPE'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.dangerous-exec.dangerous-exec
  pattern-either:
  - patterns:
    - pattern: |
        $EXEC(...)
    - pattern-not: |
        $EXEC("...",...)
    - pattern-not: |
        $EXEC(["...",...],...)
    - pattern-not: |
        $EXEC({...},"...",...)
    - pattern-not: |
        $EXEC({...},["...",...],...)
    - metavariable-regex:
        metavariable: $EXEC
        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$
  - patterns:
    - pattern-either:
      - pattern: |
          $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",...)
      - pattern: |
          $EXEC({...},"=~/(sh|bash|ksh|csh|tcsh|zsh)/",...)
      - pattern: |
          $EXEC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/",...],...)
      - pattern: |
          $EXEC({...},["=~/(sh|bash|ksh|csh|tcsh|zsh)/",...],...)
    - pattern-not: |
        $EXEC("...","...",...)
    - pattern-not: |
        $EXEC(["...","...",...],...)
    - pattern-not: |
        $EXEC({...},"...","...",...)
    - pattern-not: |
        $EXEC({...},["...","...",...],...)
    - metavariable-regex:
        metavariable: $EXEC
        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$
  - patterns:
    - pattern-either:
      - pattern: |
          $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...)
      - pattern: |
          $EXEC({...},"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...)
      - pattern: |
          $EXEC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...)
      - pattern: |
          $EXEC({...},["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...)
    - pattern-not: |
        $EXEC("...","...","...",...)
    - pattern-not: |
        $EXEC(["...","...","...",...],...)
    - pattern-not: |
        $EXEC({...},"...","...","...",...)
    - pattern-not: |
        $EXEC({...},["...","...","...",...],...)
    - metavariable-regex:
        metavariable: $EXEC
        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$
  message: |
    Detected non-static command inside $EXEC. Audit the input to '$EXEC'.
    If unverified user data can reach this call site, this is a code injection
    vulnerability. A malicious actor can inject a malicious script to execute
    arbitrary code.
  metadata:
    cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp: 'A1: Injection'
  severity: WARNING
  languages:
  - ruby
- id: generic.secrets.security.detected-artifactory-token.detected-artifactory-token
  patterns:
  - pattern-regex: |
      \bAKC[a-zA-Z0-9]{10,}
  - pattern-not-regex: |
      sha(128|256|512).*
  languages:
  - regex
  message: Artifactory token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/artifactory.py
- id: javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
  patterns:
  - pattern-either:
    - pattern: |
        spawn(...,{shell: $SHELL})
    - pattern: |
        spawnSync(...,{shell: $SHELL})
    - pattern: |
        $CP.spawn(...,{shell: $SHELL})
    - pattern: |
        $CP.spawnSync(...,{shell: $SHELL})
  - pattern-not: |
      spawn(...,{shell: false})
  - pattern-not: |
      spawnSync(...,{shell: false})
  - pattern-not: |
      $CP.spawn(...,{shell: false})
  - pattern-not: |
      $CP.spawnSync(...,{shell: false})
  message: |
    Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn
    the command using a shell process. Doing so propagates current shell settings and variables, which
    makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
  severity: WARNING
  languages:
  - javascript
  - typescript
- id: javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
  message: |
    Make sure that unverified user data can not reach vm.SourceTextModule.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern: new $VM.SourceTextModule($CODE,...)
  - pattern-not: new $VM.SourceTextModule("...",...)
  - pattern-not-inside: |-
      $CODE = "...";
      ...
- id: javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
  message: |
    Make sure that unverified user data can not reach vm.runInContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
    - pattern: |
        function $FUNC(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          ...
        }
- id: javascript.lang.security.audit.vm-injection.vm-script-code-injection
  message: |
    Make sure that unverified user data can not reach vm.Script.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern: new $VM.Script($CODE,...)
  - pattern-not: new $VM.Script("...",...)
  - pattern-not-inside: |-
      $CODE = "...";
      ...
- id: javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
  message: |
    Make sure that unverified user data can not reach vm.runInThisContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern: $VM.runInThisContext($CODE,...)
  - pattern-not: $VM.runInThisContext("...",...)
  - pattern-not-inside: |
      $CODE = "...";
      ...
- id: javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
  message: |
    Make sure that unverified user data can not reach vm.compileFunction.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      $VM = require('vm');
      ...
  - pattern: $VM.compileFunction($CODE,...)
  - pattern-not: $VM.compileFunction("...",...)
  - pattern-not-inside: |-
      $CODE = "...";
      ...
- id: python.lang.correctness.tempfile.flush.tempfile-without-flush
  languages:
  - python
  message: Using '$F.name' without '.flush()' or '.close()' may cause an error because
    the file may not exist when '$F.name' is used. Use '.flush()' or close the file
    before using '$F.name'.
  pattern-either:
  - patterns:
    - pattern-not-inside: |
        $F = tempfile.NamedTemporaryFile(...)
        ...
        $F.write(...)
        ...
        $F.flush()
        ...
        $F.name
    - pattern-not-inside: |
        $F = tempfile.NamedTemporaryFile(...)
        ...
        $F.write(...)
        ...
        $F.close()
        ...
        $F.name
    - pattern-not-inside: |
        $F = tempfile.NamedTemporaryFile(..., delete=False, ...)
        ...
        $F.close()
        ...
        $F.name
    - pattern-inside: |
        $F = tempfile.NamedTemporaryFile(...)
        ...
    - pattern: |
        $F.name
  - patterns:
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $F.write(...)
            ...
            $F.flush()
            ...
            $F.name
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $F.write(...)
            ...
            $F.close()
            ...
            $F.name
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $MODULE.dump(..., $F, ...)
            ...
            $F.flush()
            ...
            $F.name
    - pattern-not-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
            $MODULE.dump(..., $F, ...)
            ...
            $F.close()
            ...
            $F.name
    - pattern-inside: |
        with tempfile.NamedTemporaryFile(...) as $F:
            ...
    - pattern: |
        $F.name
  severity: ERROR
- id: javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
  message: |
    TLS1.0 and TLS1.1 are deprecated and should be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is hightly recommanded This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.
  metadata:
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    - https://nodejs.org/api/tls.html#tls_tls_default_min_version
  severity: WARNING
  languages:
  - javascript
  - typescript
  patterns:
  - pattern-inside: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions:
          { ssl: ... }
       }
  - pattern-either:
    - pattern: |
        {
          minVersion: 'TLSv1'
        }
    - pattern: |
        {
          minVersion: 'TLSv1.1'
        }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: java.lang.security.audit.unsafe-reflection.unsafe-reflection
  patterns:
  - pattern: |
      Class.forName($CLASS,...)
  - pattern-not: |
      Class.forName("...",...)
  - pattern-not-inside: |
      $CLASS = "...";
      ...
  message: |
    If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke,
    the potential exists for the attacker to create control flow paths through the application
    that were not intended by the application developers.
    This attack vector may allow the attacker to bypass authentication or access control checks
    or otherwise cause the application to behave in an unexpected manner.
  metadata:
    cwe: 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
      Reflection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection
  severity: WARNING
  languages:
  - java
- id: javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
  message: |
    Detected an explicit unescape in a Pug template, using either
    '!=' or '!{...}'. If external data can reach these locations,
    your application is exposed to a cross-site scripting (XSS)
    vulnerability. If you must do this, ensure no external data
    can reach this location.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://pugjs.org/language/code.html#unescaped-buffered-code
    - https://pugjs.org/language/attributes.html#unescaped-attributes
  languages:
  - regex
  paths:
    include:
    - '*.pug'
  severity: WARNING
  pattern-either:
  - pattern-regex: \w.*(!=)[^=].*
  - pattern-regex: '!{.*?}'
- id: ajinabraham.njsscan.sequelize_tls.sequelize_tls
  message: |
    The Sequelize connection string indicates that database server does not use TLS. Non TLS connections are susceptible to man in the middle (MITM) attacks.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: 2017-Security Misconfiguration'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
  patterns:
  - pattern: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT
       }
  - pattern-not: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: "postgres",
        dialectOptions: {
            ssl: true
        }
      }
  - pattern-not: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions: {
          ssl: { ... }
        }
      }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: yaml.docker-compose.security.privileged-service.privileged-service
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        privileged: true
  message: |
    Service '$SERVICE' is running in privileged mode. This grants the
    container the equivalent of root capabilities on the host machine. This
    can lead to container escapes, privilege escalation, and other security
    concerns. Remove the 'privileged' key to disable this capability.
  metadata:
    references:
    - https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html
    - https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.best-practice.no-fractional-cpu-limits.kubernetes.best-practice.no-fractional-cpu-limits
  patterns:
  - pattern-inside: |
      limits:
        ...
  - pattern: |
      cpu: $CPU_LIMIT
  - metavariable-regex:
      metavariable: $CPU_LIMIT
      regex: \d{0,3}m
  fix: 'cpu: 1000m'
  message: |
    When you set a fractional CPU limit on a container,
    the CPU cycles available will be throttled,
    even though most nodes can handle processes
    alternating between using 100% of the CPU.
  severity: WARNING
  languages:
  - yaml
- id: python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  pattern-either:
  - pattern: |
      jwt.encode($X, "...", ...)
  - pattern: |
      $SECRET = "..."
      ...
      jwt.encode($X, $SECRET, ...)
  languages:
  - python
  severity: ERROR
- id: python.lang.correctness.unchecked-returns.unchecked-subprocess-call
  patterns:
  - pattern: subprocess.call(...)
  - pattern-not-inside: $S = subprocess.call(...)
  - pattern-not-inside: subprocess.call(...) == $X
  - pattern-not-inside: return subprocess.call(...)
  fix: subprocess.check_call(...)
  message: This is not checking the return value of this subprocess call; if it fails
    no exception will be raised. Consider subprocess.check_call() instead
  languages:
  - python
  severity: WARNING
- id: python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
  metadata:
    owasp: 'A8: Insecure Deserialization'
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
  languages:
  - python
  message: |
    Avoid using `load()`. `PyYAML.load` can create arbitrary Python
    objects. A malicious actor could exploit this to run arbitrary
    code. Use `safe_load()` instead.
  fix-regex:
    regex: load
    replacement: safe_load
    count: 1
  severity: ERROR
  patterns:
  - pattern-inside: |
      import yaml
      ...
  - pattern-not-inside: |
      $YAML = ruamel.yaml.YAML(...)
      ...
      $YAML.load(...)
  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)
  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)
  - pattern: yaml.load(...)
- id: python.lang.security.audit.system-wildcard-detected.system-wildcard-detected
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: (tar|chmod|chown|rsync)(.*?)\*
  message: |
    Detected use of the wildcard character in a system call that spawns a shell.
    This subjects the wildcard to normal shell expansion, which can have unintended consequences
    if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this
    will execute a script when 'rsync' is called. See
    https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    for more information.
  metadata:
    cwe: 'CWE-155: Improper Neutralization of Wildcards or Matching Symbols'
    owasp: 'A1: Injection'
    source-url-open: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/injection_wildcard.py
    references:
    - https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.directly-returned-format-string.directly-returned-format-string
  message: |
    Detected Flask route directly returning a formatted string. This
    is subject to cross-site scripting if user input can reach the string.
    Consider using the template engine instead and rendering pages with
    'render_template()'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      @$APP.route(...)
      def $FUNC(...):
        ...
  - pattern-not-inside: return "..."
  - pattern-either:
    - pattern: return "...".format(...)
    - pattern: return "..." % ...
    - pattern: return "..." + ...
    - pattern: return ... + "..."
    - pattern: return f"...{...}..."
    - patterns:
      - pattern: return $X
      - pattern-either:
        - pattern-inside: |
            $X = "...".format(...)
            ...
        - pattern-inside: |
            $X = "..." % ...
            ...
        - pattern-inside: |
            $X = "..." + ...
            ...
        - pattern-inside: |
            $X = ... + "..."
            ...
        - pattern-inside: |
            $X = f"...{...}..."
            ...
- id: python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp.insecure-openerdirector-open-ftp
  message: |
    Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is
    being used with 'ftp://'. Information sent over this connection will be
    unencrypted. Consider using SFTP instead. urllib does not support SFTP,
    so consider a library which supports SFTP.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.OpenerDirector(...).open("=~/^[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/^[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: |
        $URL = "=~/^[Ff][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - patterns:
    - pattern: |
        $URL = "=~/^[Ff][Tt][Pp]://.*/"
        ...
        urllib.request.OpenerDirector(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.OpenerDirector(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp.insecure-urlopener-open-ftp
  message: |
    Detected an insecure transmission channel. 'URLopener.open(...)' is
    being used with 'ftp://'. Use SFTP instead. urllib does not support
    SFTP, so consider using a library which supports SFTP.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.URLopener(...).open("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Ff][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - patterns:
    - pattern: |
        $URL = "=~/[Ff][Tt][Pp]://.*/"
        ...
        urllib.request.URLopener(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Ff][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open.insecure-openerdirector-open
  message: |
    Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is
    being used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.OpenerDirector(...).open("=~/[Hh][Tt][Tt][Pp]://.*/",
      ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - patterns:
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        urllib.request.OpenerDirector(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.OpenerDirector(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp.insecure-request-object-ftp
  message: |
    Detected a 'urllib.request.Request()' object using an insecure transport
    protocol, 'ftp://'. This connection will not be encrypted. Consider using
    SFTP instead. urllib does not support SFTP natively, so consider using
    a library which supports SFTP.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.Request
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.Request("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.Request($URL, ...)
  - pattern: |-
      def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
        ...
        urllib.request.Request($URL, ...)
- id: python.requests.security.no-auth-over-http.no-auth-over-http
  fix-regex:
    regex: http:\/\/
    replacement: https://
    count: 1
  message: |
    Authentication detected over HTTP. HTTP does not provide any
    encryption or protection for these authentication credentials.
    This may expose these credentials to unauthhorized parties.
    Use 'https://' instead.
  metadata:
    cwe: 'CWE-523: Unprotected Transport of Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://pypi.org/project/flake8-flask/
    references:
    - https://blog.r2c.dev/2020/bento-check-no-auth-over-http/
    - https://bento.dev/checks/requests/no-auth-over-http/
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: requests.$W("=~/http:\/\/.*/", ..., auth=$X, ...)
  - pattern: |
      $URL = "=~/http:\/\/.../"
      ...
      requests.$W($URL, ..., auth=$X, ...)
- id: python.django.correctness.model-save.django-db-model-save-super
  patterns:
  - pattern-inside: |
      class $MODEL(django.db.models.Model):
          ...
  - pattern-not: |
      def save(self, ...):
        ...
        super($MODEL, self).save(...)
  - pattern-not: |
      def save(self, ...):
        ...
        super().save(...)
  - pattern: |
      def save(self, ...):
        ...
  message: Detected a django model `$MODEL` is not calling super().save() inside of
    the save method.
  languages:
  - python
  severity: WARNING
- id: python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-not: $F = django.db.models.CharField(...)
  - pattern-not: $F = django.db.models.TextField(...)
  - pattern-not: $F = django.db.models.SlugField(...)
  - pattern-not: $F = django.db.models.EmailField(...)
  - pattern-not: $F = django.db.models.FileField(...)
  - pattern-not: $F = django.db.models.ImageField(...)
  - pattern-not: $F = django.db.models.URLField(...)
  - pattern-not: $F = django.db.models.UUIDField(...)
  - pattern-not: $F = django.db.models.ManyToManyField(...)
  - pattern-not: $F = django.db.models.NullBooleanField(...)
  - pattern-not: $F = $X(..., null=True, blank=True, ...)
  - pattern: $F = $X(..., blank=True, ...)
  message: null=True should be set if blank=True is set on non-text fields.
  languages:
  - python
  severity: ERROR
- id: python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution
  message: |
    Found request data as an index to 'globals()'. This is extremely
    dangerous because it allows an attacker to execute arbitrary code
    on the system. Refactor your code not to use 'globals()'.
  metadata:
    cwe: 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
- id: python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib
  message: |
    Data from request object is passed to a new server-side request.
    This could lead to a server-side request forgery (SSRF). To mitigate,
    ensure that schemes and hosts are validated against an allowlist,
    do not forward the response to the user, and ensure proper authentication
    and transport-layer security in the proxied request.
    See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    to learn more about SSRF vulnerabilities.
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W.get(...), ...),
        ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W.get(...), ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W.get(...)}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: return urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W(...), ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W(...)}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: return urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W[...], ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W[...]}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: return urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W, ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W, ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W, ...)
    - pattern: return urllib.request.urlopen(..., request.$W, ...)
- id: python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests
  message: |
    Data from request object is passed to a new server-side request.
    This could lead to a server-side request forgery (SSRF). To mitigate,
    ensure that schemes and hosts are validated against an allowlist,
    do not forward the response to the user, and ensure proper authentication
    and transport-layer security in the proxied request.
    See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to
    learn more about SSRF vulnerabilities.
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: requests.$METHOD(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W.get(...), ...)
    - pattern: requests.$METHOD(..., f"...{request.$W.get(...)}...", ...)
    - pattern: requests.$METHOD(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W.get(...), ...)
    - pattern: return requests.$METHOD(..., request.$W.get(...), ...)
    - pattern: requests.$METHOD(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W(...), ...)
    - pattern: requests.$METHOD(..., f"...{request.$W(...)}...", ...)
    - pattern: requests.$METHOD(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W(...), ...)
    - pattern: return requests.$METHOD(..., request.$W(...), ...)
    - pattern: requests.$METHOD(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W[...], ...)
    - pattern: requests.$METHOD(..., f"...{request.$W[...]}...", ...)
    - pattern: requests.$METHOD(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W[...], ...)
    - pattern: return requests.$METHOD(..., request.$W[...], ...)
    - pattern: requests.$METHOD(..., $S.format(..., request.$W, ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W, ...)
    - pattern: requests.$METHOD(..., f"...{request.$W}...", ...)
    - pattern: requests.$METHOD(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W, ...)
    - pattern: return requests.$METHOD(..., request.$W, ...)
- id: contrib.nodejsscan.header_xss_protection.header_xss_generic
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $RES.header("=~/[X-XSS-Protection|x-xss-protection]/", 0, ...)
    - pattern: |
        $RES.set("=~/[X-XSS-Protection|x-xss-protection]/", 0, ...)
    - pattern: |
        $RES.set(..., { "=~/[X-XSS-Protection|x-xss-protection]/" : 0 }, ...)
    - pattern: |
        $RES.writeHead(..., {"=~/[X-XSS-Protection|x-xss-protection]/": 0 }, ...);
    - pattern: |
        $VAL = 0;
        ...
        $RES.header("=~/[X-XSS-Protection|x-xss-protection]/", $VAL, ...);
    - pattern: |
        $VAL = 0;
        ...
        $RES.set("=~/[X-XSS-Protection|x-xss-protection]/", $VAL, ...);
    - pattern: |
        $VAL = 0; ... $RES.set(..., { "=~/[X-XSS-Protection|x-xss-protection]/" : $VAL }, ...);
    - pattern: |
        $VAL = 0; ... $RES.writeHead(..., {"=~/[X-XSS-Protection|x-xss-protection]/": $VAL }, ...);
  message: X-XSS-Protection header is set to 0. This will disable the browser's XSS
    Filter.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: contrib.nodejsscan.header_cors_star.express_cors
  patterns:
  - pattern-either:
    - pattern-inside: function ($REQ, $RES, ...) {...}
    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}
    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};
    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})
  - pattern-either:
    - pattern: |
        $APP.options('*', cors(...))
    - pattern: |
        $RES.set("=~/[Access-Control-Allow-Origin|access-control-allow-origin]/", '*', ...)
    - pattern: |
        $RES.set(..., { "=~/[Access-Control-Allow-Origin|access-control-allow-origin]/" : '*' }, ...)
    - pattern: |
        $RES.header("=~/[Access-Control-Allow-Origin|access-control-allow-origin]/", '*', ...)
    - pattern: |
        $RES.writeHead(..., {"=~/[Access-Control-Allow-Origin|access-control-allow-origin]/": '*' }, ...);
    - pattern: |
        $VAL = '*'; ... $RES.set("=~/[Access-Control-Allow-Origin|access-control-allow-origin]/", $VAL, ...);
    - pattern: |
        $VAL = '*'; ... $RES.set(..., { "=~/[Access-Control-Allow-Origin|access-control-allow-origin]/" : $VAL }, ...);
    - pattern: |
        $VAL = '*'; ... $RES.header("=~/[Access-Control-Allow-Origin|access-control-allow-origin]/", $VAL, ...);
    - pattern: |
        $VAL = '*'; ... $RES.writeHead(..., {"=~/[Access-Control-Allow-Origin|access-control-allow-origin]/": $VAL }, ...);
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: ruby.jwt.security.jwt-hardcode.ruby-jwt-hardcoded-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern-either:
    - pattern: |
        JWT.encode($PAYLOAD,"...",...)
    - pattern: |
        JWT.decode($PAYLOAD,"...",...)
    - pattern: |
        JWT.encode($PAYLOAD,nil,...)
    - pattern: |
        JWT.decode($PAYLOAD,nil,...)
    - pattern: |
        $SECRET = "..."
        ...
        JWT.encode($PAYLOAD,$SECRET,...)
    - pattern: |
        $SECRET = "..."
        ...
        JWT.decode($PAYLOAD,$SECRET,...)
  languages:
  - ruby
  severity: ERROR
- id: ruby.lang.security.divide-by-zero.divide-by-zero
  message: |
    Checks for divide by zero. Best practice involves not dividing a variable by zero, as this leads to a Ruby
    ZeroDivisionError.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: |
      $X / 0
  - pattern: |
      $ZERO = 0
      ...
      $X / $ZERO
- id: ruby.lang.security.model-attributes-attr-accessible.model-attributes-attr-accessible
  patterns:
  - pattern-not: |
      class $CLASS
      ...
      attr_accessible
      ...
      end
      ...
      $CLASS.$FUNC(...)
  - pattern: |
      class $CLASS
      ...
      end
      ...
      $CLASS.$FUNC(...)
  message: |
    Checks for models that do not use attr_accessible. This means there is no limiting of which variables can be manipulated
    through mass assignment. For newer Rails applications, parameters should be allowlisted using strong parameters.
    For older Ruby versions, they should be allowlisted using strong_attributes.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attributes.rb
  languages:
  - ruby
  severity: ERROR
- id: go.gorilla.security.audit.handler-assignment-from-multiple-sources.handler-assignment-from-multiple-sources
  metadata:
    cwe: 'CWE-289: Authentication Bypass by Alternate Name'
    owasp: 'A2: Broken Authentication'
    owaspapi: 'API1: Broken Object Level Authorization'
  patterns:
  - pattern-inside: |
      func $HANDLER(..., $R *http.Request, ...) {
        ...
      }
  - pattern-not: |
      $VAR = true
      ...
      $VAR = false
  - pattern-not: |
      $VAR = false
      ...
      $VAR = true
  - pattern-not: |
      $VAR = $X
      ...
      $VAR = $X
  - pattern-not: |
      $VAR = $X
      ...
      $VAR = $Z(..., $VAR, ...)
  - pattern-not: |
      $VAR = $X
      ...
      $VAR = $Z($W(..., $VAR, ...))
  - pattern-not: |
      $VAR = $X
      ...
      $VAR = $VAR[:$Z(..., $VAR, ...)]
  - pattern-not: |
      $VAR = $X
      ...
      $VAR = $VAR[$Z(..., $VAR, ...):]
  - pattern-not: |
      $VAR = $X
      ...
      $VAR = $VAR[$Z(..., $VAR, ...)]
  - pattern: |
      $VAR = $X
      ...
      $VAR = $Y
  message: 'Variable $VAR is assigned from two different sources: ''$X'' and ''$Y''.
    Make sure this is intended, as this could cause logic bugs if they are treated
    as they are the same object.'
  languages:
  - go
  severity: WARNING
- id: go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection
  metadata:
    cwe: 'CWE-300: Channel Accessible by Non-Endpoint'
    references:
    - https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption
  message: Found an insecure gRPC server without 'grpc.Creds()' or options with credentials.
    This allows for a connection without encryption to this server. A malicious attacker
    could tamper with the gRPC message, which could compromise the machine. Include
    credentials derived from an SSL certificate in order to create a secure gRPC connection.
    You can create credentials using 'credentials.NewServerTLSFromFile("cert.pem",
    "cert.key")'.
  languages:
  - go
  severity: ERROR
  patterns:
  - pattern-not: grpc.NewServer(..., grpc.Creds(...), ...)
  - pattern-not-inside: |
      $OPTS := []grpc.ServerOption{
        ...,
        grpc.Creds(credentials.NewClientTLSFromCert(...)),
        ...,
      }
      grpc.NewServer($OPTS...)
  - pattern-not-inside: |
      $CREDS := credentials.NewClientTLSFromCert(...)
      ...
      $OPTS := []grpc.ServerOption{
        ...,
        $CREDS,
        ...,
      }
      grpc.NewServer($OPTS...)
  - pattern: grpc.NewServer(...)
- id: go.lang.correctness.permissions.file_permission.incorrect-default-permission
  message: Expect permissions to be `0600` or less for os.Chmod, os.Mkdir, os.OpenFile,
    os.MkdirAll, and ioutil.WriteFile
  metadata:
    cwe: 'CWE-276: Incorrect Default Permissions'
    source_rule_url: https://github.com/securego/gosec
  severity: WARNING
  languages:
  - go
  patterns:
  - pattern-either:
    - pattern: os.Chmod($NAME, $PERM)
    - pattern: os.Mkdir($NAME, $PERM)
    - pattern: os.OpenFile($NAME, $FLAG, $PERM)
    - pattern: os.MkdirAll($NAME, $PERM)
    - pattern: ioutil.WriteFile($NAME, $DATA, $PERM)
  - metavariable-comparison:
      metavariable: $PERM
      comparison: $PERM > 0o600
      base: 8
- id: javascript.angular.security.detect-angular-resource-loading.detect-angular-resource-loading
  pattern: |
    $sceDelegateProvider.resourceUrlWhitelist([...,'**' ]);
  message: |
    $sceDelegateProvider allowlisting can be introduce security issues if wildcards are used.
  languages:
  - javascript
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
  severity: WARNING
- id: javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
  message: |
    Make sure that unverified user data can not reach `sandbox`.
  severity: WARNING
  languages:
  - javascript
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
  patterns:
  - pattern-inside: |
      ...
      $SANDBOX = require('sandbox');
      ...
  - pattern-not-inside: |
      $CODE = "...";
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $S = new $SANDBOX(...);
          ...
      - pattern: $S.run($CODE,...);
    - pattern: |
        new $SANDBOX(...).run($CODE,...);
  - pattern-not-inside: |
      $S = new $SANDBOX(...);
      ...
      $S.run("...",...);
  - pattern-not-inside: new $SANDBOX(...).run("...",...);
- id: javascript.lang.best-practice.assigned-undefined.assigned-undefined
  languages:
  - javascript
  - typescript
  message: '`undefined` is not a reserved keyword in Javascript, so this is "valid"
    Javascript but highly confusing and likely to result in bugs.'
  pattern-either:
  - pattern: undefined = $X;
  - pattern: var undefined = $X;
  - pattern: let undefined = $X;
  - pattern: const undefined = $X;
  severity: WARNING
- id: javascript.lang.correctness.useless-assign.useless-assignment
  patterns:
  - pattern: |
      $X = $Y;
      $X = $Z;
  - pattern-not: |
      $X = $Y;
      $X = <... $X ...>;
  message: '`$X` is assigned twice; the first assignment is useless'
  languages:
  - javascript
  - typescript
  severity: WARNING
- id: javascript.browser.security.dom-based-xss.dom-based-xss
  pattern-either:
  - pattern: document.write(<... document.location.$W ...>)
  - pattern: document.write(<... location.$W ...>)
  message: |
    Detected possible DOM-based XSS. This occurs because a portion of the URL is being used
    to construct an element added directly to the page. For example, a malicious actor could
    send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script>
    which would add the script to the page.
    Consider allowlisting appropriate values or using an approach which does not involve the URL.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://owasp.org/www-community/attacks/DOM_Based_XSS
  severity: ERROR
  languages:
  - javascript
  - typescript
- id: java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
  message: |
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
  metadata:
    cwe: 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $CLASS {
            ...
            Logger $LOG = ...;
            ...
          }
      - pattern-either:
        - pattern-inside: |
            $X $METHOD(...,HttpServletRequest $REQ,...) {
              ...
            }
        - pattern-inside: |
            $X $METHOD(...,ServletRequest $REQ,...) {
              ...
            }
        - pattern-inside: |
            $X $METHOD(...) {
              ...
              HttpServletRequest $REQ = ...;
              ...
            }
        - pattern-inside: |
            $X $METHOD(...) {
              ...
              ServletRequest $REQ = ...;
              ...
            }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          Logger $LOG = ...;
          ...
          HttpServletRequest $REQ = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          Logger $LOG = ...;
          ...
          ServletRequest $REQ = ...;
          ...
        }
  - pattern-either:
    - pattern: |
        String $VAL = $REQ.getParameter(...);
        ...
        $LOG.$LEVEL(<... $VAL ...>);
    - pattern: |
        String $VAL = $REQ.getParameter(...);
        ...
        $LOG.log($LEVEL,<... $VAL ...>);
    - pattern: |
        $LOG.$LEVEL(<... $REQ.getParameter(...) ...>);
    - pattern: |
        $LOG.log($LEVEL,<... $REQ.getParameter(...) ...>);
- id: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
  message: |
    Application redirects to a destination URL specified by a user-supplied
    parameter that is not validated. This could direct users to malicious locations.
    Consider using an allowlist to validate URLs.
  metadata:
    cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.1.5 Open Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation-requirements
      version: '4'
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,String $URL,...) {
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...,HttpServletResponse $RES,...) {
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        $RES.sendRedirect($REQ.getParameter(...));
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        $RES.sendRedirect($REQ.getParameter(...));
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,String $URL,...) {
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...,HttpServletResponse $RES,...) {
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        $RES.addHeader("Location",$REQ.getParameter(...));
        ...
      }
  - pattern: |-
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        $RES.addHeader("Location",$REQ.getParameter(...));
        ...
      }
- id: ajinabraham.njsscan.sequelize_tls_validation.sequelize_tls_cert_validation
  message: |
    The Sequelize connection string indicates that TLS certificate vailidation of database server is disabled. This is equivalent to not having TLS. An attacker can present any invalid certificate and Sequelize will make database connection ignoring certificate errors. This setting make the connection susceptible to man in the middle (MITM) attacks. Not applicable to SQLite database.
  severity: ERROR
  languages:
  - javascript
  metadata:
    owasp: 'A6: 2017-Security Misconfiguration'
    cwe: 'CWE-295: Improper Certificate Validation'
  patterns:
  - pattern: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions: {
          ssl: {
            rejectUnauthorized: false
          }
        }
       }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: ajinabraham.njsscan.sequelize_weak_tls.sequelize_weak_tls
  message: |
    The Sequelize connection string indicates that an older version of TLS is in use. TLS1.0 and TLS1.1 are deprecated and should be used. By default, Sequelize use TLSv1.2 but it's recommended to use TLS1.3. Not applicable to SQLite database.
  metadata:
    owasp: 'A6: 2017-Security Misconfiguration'
    cwe: 'CWE-757: Selection of Less-Secure Algorithm During Negotiation (''Algorithm
      Downgrade'')'
  severity: ERROR
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions:
          { ssl: ... }
       }
  - pattern-either:
    - pattern: |
        {
          minVersion: 'TLSv1'
        }
    - pattern: |
        {
          minVersion: 'TLSv1.1'
        }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: ajinabraham.njsscan.security_electron.electron_disable_websecurity
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {webSecurity: false}})
    - pattern: |
        var $X = {webPreferences: {webSecurity: false}};
  message: Disabling webSecurity will disable the same-origin policy and allows the
    execution of insecure code from any domain.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-346: Origin Validation Error'
- id: ajinabraham.njsscan.security_electron.electron_allow_http
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {allowRunningInsecureContent: true}})
    - pattern: |
        var $X = {webPreferences: {allowRunningInsecureContent: true}};
  message: Application can load content over HTTP and that makes the app vulnerable
    to Man in the middle attacks.
  languages:
  - javascript
  severity: ERROR
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
- id: ajinabraham.njsscan.security_electron.electron_blink_integration
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {enableBlinkFeatures: '...'}})
    - pattern: |
        var $X = {webPreferences: {enableBlinkFeatures: '...'}};
  message: Blink's expirimental features are enabled in this application. Some of
    the features may affect the security of the application.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: ajinabraham.njsscan.security_electron.electron_nodejs_integration
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {nodeIntegration: true}})
    - pattern: |
        var $X = {webPreferences: {nodeIntegration: true}};
  message: Node integration exposes node.js APIs to the electron app and this can
    introduce remote code execution vulnerabilities to the application if the app
    is vulnerable to Cross Site Scripting (XSS).
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: ajinabraham.njsscan.security_electron.electron_context_isolation
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {contextIsolation: false}})
    - pattern: |
        var $X = {webPreferences: {contextIsolation: false}};
  message: Disabling context isolation can introduce Prototype Pollution vulnerabilities.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-693: Protection Mechanism Failure'
- id: ajinabraham.njsscan.security_electron.electron_experimental_features
  patterns:
  - pattern-either:
    - pattern: |
        new BrowserWindow({webPreferences: {experimentalFeatures: true}})
    - pattern: |
        var $X = {webPreferences: {experimentalFeatures: true}};
  message: Experimental features are not expected to be in production ready applications.
  languages:
  - javascript
  severity: WARNING
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-272: Least Privilege Violation'
- id: javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket
  pattern-regex: ws:\/\/
  languages:
  - regex
  message: Insecure WebSocket Detected. WebSocket Secure (wss) should be used for
    all WebSocket connections.
  metadata:
    asvs:
      section: 'V13: API and Web Service Verification Requirements'
      control_id: 13.5.1 Insecure WebSocket
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x21-V13-API.md#v135-websocket-security-requirements
      version: '4'
  severity: ERROR
- id: java.lang.security.audit.sqli.hibernate-sqli.hibernate-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          String $SQL = $X + $Y;
          ...
      - pattern-inside: |
          String $SQL = String.format(...);
          ...
      - pattern-inside: |
          $VAL $FUNC(...,String $SQL,...) {
          ...
          }
    - pattern-not-inside: |
        String $SQL = "..." + "...";
        ...
    - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($SQL,...)
  - pattern: org.hibernate.criterion.Restrictions.sqlRestriction(String.format(...),...)
  - patterns:
    - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($X + $Y,...)
    - pattern-not: org.hibernate.criterion.Restrictions.sqlRestriction("..." + "...",...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $TYPE $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $SESSION.$METHOD($SQL,...)
      - pattern: |
          $SESSION.$METHOD(String.format(...),...);
      - pattern: |
          $SESSION.$METHOD($X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          org.hibernate.Session $SESSION = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,org.hibernate.Session $SESSION,...) {
            ...
          }
    - pattern-not: |
        $SESSION.$METHOD("..." + "...",...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(createQuery|createSQLQuery)$
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  metadata:
    asvs:
      section: V5 Stored Cryptography Verification Requirements
      control_id: 5.3.5 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
  languages:
  - java
  severity: WARNING
- id: python.django.security.audit.secure-cookies.django-secure-set-cookie
  patterns:
  - pattern-either:
    - pattern-inside: |
        import django.http.HttpResponse
        ...
    - pattern-inside: |
        import django.shortcuts.render
        ...
  - pattern-not-inside: |
      LANGUAGE_QUERY_PARAMETER = 'language'
      ...
      def set_language(request):
          ...
      # Exclude vendored contrib/messages/storage/cookie.py
  - pattern-not-inside: |
      class CookieStorage(django.contrib.messages.storage.base.BaseStorage):
          ...
      # Exclude cookies handled by vendored middleware
  - pattern-not: response.set_cookie(django.conf.settings.SESSION_COOKIE_NAME, ...)
  - pattern-not: response.set_cookie(django.conf.settings.CSRF_COOKIE_NAME, ...)
  - pattern-not: response.set_cookie(django.conf.settings.LANGUAGE_COOKIE_NAME, ...)
  - pattern-not: response.set_cookie(rest_framework_jwt.settings.api_settings.JWT_AUTH_COOKIE,
      ...)
  - pattern-not: response.set_cookie(..., secure=$A, httponly=$B, samesite=$C, ...)
  - pattern-not: response.set_cookie(..., **$A)
  - pattern: response.set_cookie(...)
  message: |
    Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in
    response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting.
    If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript
    read the cookie, set httponly=False. If you want to attach cookies to requests for external sites,
    set samesite=None.
  metadata:
    cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp: 'A3: Sensitive Data Exposure'
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4 Missing Cookie Attributes
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie
    - https://blog.r2c.dev/2020/bento-check-keeping-cookies-safe-in-flask/
    - https://bento.dev/checks/flask/secure-set-cookie/
  languages:
  - python
  severity: WARNING
- id: java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
  message: |
    Detected an element with disabled HTML escaping. If external
    data can reach this, this is a cross-site scripting (XSS)
    vulnerability. Ensure no external data can reach here, or
    remove 'escape=false' from this element.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences'
    references:
    - https://stackoverflow.com/a/7442668
  pattern-regex: .*escape.*?=.*?false.*
  paths:
    include:
    - '*.html'
    - '*.xhtml'
  languages:
  - regex
  severity: WARNING
- id: java.lang.security.audit.xss.jsp.use-jstl-escaping.use-jstl-escaping
  message: |
    Detected an Expression Language segment in a tag that does not escape
    output. This is dangerous because if any data in this expression
    can be controlled externally, it is a cross-site scripting
    vulnerability. Instead, use the 'out' tag from the JSTL taglib
    to escape this expression.
    See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm
    for more information.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    references:
    - https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm
    - https://stackoverflow.com/a/4948856
    - https://stackoverflow.com/a/3180202
  pattern-regex: <(?![A-Za-z0-9]+:out).*?\$\{.*?\}.*>
  paths:
    include:
    - '*.jsp'
  languages:
  - regex
  severity: WARNING
- id: java.lang.security.audit.xss.jsp.use-escapexml.use-escapexml
  message: |
    Detected an Expression Language segment that does not escape
    output. This is dangerous because if any data in this expression
    can be controlled externally, it is a cross-site scripting
    vulnerability. Instead, use the 'escapeXml' function from
    the JSTL taglib. See https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm
    for more information.
  metadata:
    owasp: 'A7: Cross-site Scripting (XSS)'
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    references:
    - https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm
    - https://stackoverflow.com/a/4948856
    - https://stackoverflow.com/a/3180202
  pattern-regex: \$\{(?!.*escapeXml).*\}
  paths:
    include:
    - '*.jsp'
  languages:
  - regex
  severity: WARNING
- id: python.lang.security.insecure-hash-function.insecure-hash-function
  message: |
    Detected use of an insecure MD4 or MD5 hash function.
    These functions have known vulnerabilities and are considered deprecated.
    Consider using 'SHA256' or a similar function instead.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
  - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
- id: go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag
  message: |
    Detected template variable interpolation in an HTML tag.
    This is potentially vulnerable to cross-site scripting (XSS)
    attacks because a malicious actor has control over HTML
    but without the need to use escaped characters. Use explicit
    tags instead.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://github.com/golang/go/issues/19669
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
  languages:
  - generic
  severity: WARNING
  pattern: <{{ ... }} ... >
- id: python.lang.correctness.baseclass-attribute-override.baseclass-attribute-override
  message: |
    Class $C inherits from both `$A` and `$B` which both have a method named
    `$F`; one of these methods will be overwritten.
  languages:
  - python
  severity: WARNING
  pattern: |
    class $A(...):
      def $F(...):
       ...
    ...
    class $B(...):
      def $F(...):
       ...
    ...
    class $C(..., $A, $B, ...):
       ...
- id: python.lang.correctness.common-mistakes.is-not-is-not.is-not-is-not
  message: |
    In Python 'X is not ...' is different from 'X is (not ...)'.
    In the latter the 'not' converts the '...' directly to boolean.
  languages:
  - python
  severity: ERROR
  pattern: $S is (not ...)
- id: python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled
  message: |
    Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.
  metadata:
    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://flask-wtf.readthedocs.io/en/stable/csrf.html
  severity: WARNING
  languages:
  - python
  pattern: $APP.config['WTF_CSRF_ENABLED'] = False
- id: generic.dockerfile.best-practice.avoid-latest-version.avoid-latest-version
  message: |
    Images should be tagged with an explicit version to produce
    deterministic container images. The 'latest' tag may change
    the base container without warning.
  severity: WARNING
  languages:
  - generic
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3007
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3007
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern: FROM $IMAGE:latest
- id: generic.dockerfile.best-practice.prefer-copy-over-add.prefer-copy-over-add
  severity: INFO
  languages:
  - generic
  message: |
    The ADD command will accept and include files from a URL.
    This potentially exposes the container to a man-in-the-middle attack.
    Since ADD can have this and other unexpected side effects, the use of
    the more explicit COPY command is preferred.
  metadata:
    references:
    - https://snyk.io/blog/10-docker-image-security-best-practices/
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern: ADD
- id: generic.dockerfile.best-practice.avoid-apk-upgrade.avoid-apk-upgrade
  languages:
  - generic
  message: |
    Packages in base images should be up-to-date, removing the need for
    'apk upgrade'. If packages are out-of-date, consider contacting the
    base image maintainer.
  severity: INFO
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3017
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3017
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern: apk upgrade
- id: go.lang.security.audit.sqli.pg-sqli.pg-sqli
  languages:
  - go
  message: |
    Detected string concatenation with a non-literal variable in a go-pg
    SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection,
    used parameterized queries instead of string concatenation. You can use parameterized queries like so:
    '(SELECT ? FROM table, data1)'
  metadata:
    references:
    - https://pg.uptrace.dev/
    - https://pkg.go.dev/github.com/go-pg/pg/v10
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $DB.$METHOD(..., $X + $Y, ...)
    - pattern: $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
  - pattern-either:
    - pattern-inside: |
        $DB = pg.Connect(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *pg.DB, ...) {
          ...
        }
  - pattern-not: $DB.$METHOD(..., "..." + "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|ExecContext|ExecOne|ExecOneContext|Query|QueryOne|QueryContext|QueryOneContext)$
- id: python.django.security.passwords.use-none-for-password-default.use-none-for-password-default
  message: |
    '$VAR' is using the empty string as its default and is being used to set
    the password on '$MODEL'. If you meant to set an unusable password, set
    the default value to 'None' or call 'set_unusable_password()'.
  metadata:
    cwe: 'CWE-521: Weak Password Requirements'
    owasp: 'A2: Broken Authentication'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password
  fix-regex:
    regex: (def.*|request.*)(""|'')
    replacement: \1None
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      $VAR = request.$W.get($X, "")
      ...
      $MODEL.set_password($VAR)
      ...
      $MODEL.save(...)
  - pattern: |
      def $F(..., $VAR="", ...):
        ...
        $MODEL.set_password($VAR)
- id: python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator
  message: |
    Found a formatted string in BashOperator: $CMD.
    This could be vulnerable to injection.
    Be extra sure your variables are not controllable by external sources.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command="..." + $CONCAT, ...)
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command="...".format(...), ...)
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command=f"...", ...)
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command="..." % $PARAMS, ...)
  - pattern: |
      $CMD = "..." % $PARAMS
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = $STR.format(...)
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = f"..."
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = "..." + $CONCAT
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = "..."
      ...
      $CMD += $CONCAT
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
- id: go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr
  message: |
    Found a formatted template string passed to 'template.HTMLAttr()'.
    'template.HTMLAttr()' does not escape contents. Be absolutely sure
    there is no user-controlled data in this template.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A1: Injection'
    references:
    - https://golang.org/pkg/html/template/#HTMLAttr
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: template.HTMLAttr($T + $X, ...)
  - pattern: template.HTMLAttr(fmt.$P("...", ...), ...)
  - pattern: |
      $T = "..."
      ...
      $T = $FXN(..., $T, ...)
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T = fmt.$P("...", ...)
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T, $ERR = fmt.$P("...", ...)
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T = $X + $Y
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T = "..."
      ...
      $OTHER, $ERR = fmt.$P(..., $T, ...)
      ...
      template.HTMLAttr($OTHER, ...)
- id: go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js
  message: |
    Found a formatted template string passed to 'template.JS()'.
    'template.JS()' does not escape contents. Be absolutely sure
    there is no user-controlled data in this template.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A1: Injection'
    references:
    - https://golang.org/pkg/html/template/#JS
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: template.JS($T + $X, ...)
  - pattern: template.JS(fmt.$P("...", ...), ...)
  - pattern: |
      $T = "..."
      ...
      $T = $FXN(..., $T, ...)
      ...
      template.JS($T, ...)
  - pattern: |
      $T = fmt.$P("...", ...)
      ...
      template.JS($T, ...)
  - pattern: |
      $T, $ERR = fmt.$P("...", ...)
      ...
      template.JS($T, ...)
  - pattern: |
      $T = $X + $Y
      ...
      template.JS($T, ...)
  - pattern: |
      $T = "..."
      ...
      $OTHER, $ERR = fmt.$P(..., $T, ...)
      ...
      template.JS($OTHER, ...)
- id: go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url
  message: |
    Found a formatted template string passed to 'template.URL()'.
    'template.URL()' does not escape contents. Be absolutely sure
    there is no user-controlled data in this template.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A1: Injection'
    references:
    - https://golang.org/pkg/html/template/#URL
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: template.URL($T + $X, ...)
  - pattern: template.URL(fmt.$P("...", ...), ...)
  - pattern: |
      $T = "..."
      ...
      $T = $FXN(..., $T, ...)
      ...
      template.URL($T, ...)
  - pattern: |
      $T = fmt.$P("...", ...)
      ...
      template.URL($T, ...)
  - pattern: |
      $T, $ERR = fmt.$P("...", ...)
      ...
      template.URL($T, ...)
  - pattern: |
      $T = $X + $Y
      ...
      template.URL($T, ...)
  - pattern: |
      $T = "..."
      ...
      $OTHER, $ERR = fmt.$P(..., $T, ...)
      ...
      template.URL($OTHER, ...)
- id: go.lang.correctness.looppointer.exported_loop_pointer
  message: |
    `$VALUE` is a loop pointer that may be exported from the loop. This pointer is shared between loop iterations, so the exported reference will always point to the last loop value, which is likely unintentional. To fix, copy the pointer to a new pointer within the loop.
  metadata:
    references:
    - https://github.com/kyoh86/looppointer
  severity: WARNING
  languages:
  - go
  pattern-either:
  - pattern: |
      for _, $VALUE := range $SOURCE {
        <... &($VALUE) ...>
      }
  - pattern: |
      for _, $VALUE := range $SOURCE {
        <... func() { <... &$VALUE ...> } ...>
      }
  - pattern: |
      for _, $VALUE := range $SOURCE {
        <... $ANYTHING(..., <... $VALUE ...>, ...) ...>
      }
- id: javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
  message: |
    The target origin of the window.postMessage() API is set to "*". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.
  languages:
  - javascript
  - typescript
  severity: WARNING
  metadata:
    owasp: 'A6: Sensitive Data Exposure'
    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
  pattern: $OBJECT.postMessage(...,'*')
- id: javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.verify($P, $X, {algorithms:[...,'none',...]},...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $T = $JWT.verify($P, $X, {algorithms:[...,'none',...]},...);
  - pattern: |-
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.verify($P, $X, {algorithms:[...,'none',...]},...);
- id: javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.sign($P, "...", ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $T = $JWT.verify($P, "...", ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.sign($P, "...", ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      $JWT.verify($P, "...", ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $SECRET = "...";
      ...
      var $T = $JWT.sign($P, $SECRET, ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $SECRET = "...";
      ...
      var $T = $JWT.verify($P, $SECRET, ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $SECRET = "...";
      ...
      $JWT.sign($P, $SECRET, ...);
  - pattern: |
      var $JWT = require("jsonwebtoken");
      ...
      var $SECRET = "...";
      ...
      $JWT.verify($P, $SECRET, ...);
- id: javascript.jose.security.jwt-none-alg.jwt-none-alg
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
  languages:
  - javascript
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $T = JWT.verify($P, JWK.None,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      $T = JWT.verify($P, JWK.None,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      JWT.verify($P, JWK.None,...);
- id: javascript.angular.security.detect-angular-element-methods.detect-angular-element-methods
  message: |
    Use of angular.element can lead to XSS if after,append,html,prepend,replaceWith,wrap are used with user-input.
  languages:
  - javascript
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/function/angular.element
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
  fix: ''
  severity: WARNING
  pattern-either:
  - pattern: |
      angular.element($SOURCE).html(...);
  - pattern: |
      angular.element($SOURCE).append(...);
  - pattern: |
      angular.element($SOURCE).prepend(...);
  - pattern: |
      angular.element($SOURCE).replaceWith(...);
  - pattern: |
      angular.element($SOURCE).wrap(...);
  - pattern: |
      angular.element($SOURCE).after(...);
- id: javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
  message: |
    The Mustache escape function is being overwritten. This could bypass
    HTML escaping safety measures built into the rendering engine, exposing
    your application to cross-site scripting (XSS) vulnerabilities. If you
    need unescaped HTML, use the triple brace operator in your template:
    '{{{ ... }}}'.
  languages:
  - javascript
  severity: WARNING
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://github.com/janl/mustache.js/#variables
  pattern-either:
  - pattern: Mustache.escape = ...
  - patterns:
    - pattern-inside: |
        $MUSTACHE = require("mustache");
        ...
    - pattern: $MUSTACHE.escape = ...
- id: problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
  message: |
    Checks for requests sent via HttpURLConnection and URLObj to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      URL $URL = new URL ("=~/[Hh][Tt][Tt][Pp]://.*/", ...);
      ...
      $CON = (HttpURLConnection) $URL.openConnection(...);
      ...
      $CON.$FUNC(...);
  - pattern: |
      String $STRURL = "=~/[Hh][Tt][Tt][Pp]://.*/";
      ...
      URL $URL = new URL ($STRURL, ...);
      ...
      $CON = (HttpURLConnection) $URL.openConnection(...);
      ...
      $CON.$FUNC(...);
  - pattern: |
      String $STRURL = "=~/[Hh][Tt][Tt][Pp]://.*/";
      ...
      URL $URL = new URL ($STRURL, ...);
      ...
      $CON = $URL.openConnection(...);
      ...
      $CON.$FUNC(...);
  - pattern: |
      URL $URL = new URL ("=~/[Hh][Tt][Tt][Pp]://.*/", ...);
      ...
      $CON = $URL.openConnection(...);
      ...
      $CON.$FUNC(...);
- id: problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
  message: |
    Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://hc.apache.org/httpcomponents-client-ga/quickstart.html
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      $HTTPCLIENT = HttpClients.$CREATE(...);
      ...
      $HTTPREQ = new $HTTPFUNC("=~/[hH][tT][tT][pP]://.*/");
      ...
      $RESPONSE = $HTTPCLIENT.execute($HTTPREQ);
  - pattern: |
      $HTTPCLIENT = HttpClients.$CREATE(...);
      ...
      $RESPONSE = $HTTPCLIENT.execute(new $HTTPFUNC("=~/[hH][tT][tT][pP]://.*/"));
- id: problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
  message: |
    Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly
    leading to PII being sent plaintext over the network.
  fix-regex:
    regex: '[fF][tT][pP]://'
    replacement: sftp://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server
    - https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      FTPClient $FTPCLIENT = new FTPClient();
      ...
      $FTPCLIENT.connect(...);
  - pattern: |
      URL $URL = new URL("=~/^[fF][tT][pP]://.*/");
      ...
      URLConnection $CONN = $URL.openConnection(...);
- id: problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
  message: |
    Checks for requests sent via Unirest to http:// URLS. This is dangerous because
    the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to
    https:// URLS.
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://kong.github.io/unirest-java/#requests
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      Unirest.get("=~/[hH][tT][tT][pP]://.*/")
  - pattern: |
      Unirest.post("=~/[hH][tT][tT][pP]://.*/")
- id: problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
  message: |
    Insecure transport rules to catch socket connections to http, telnet, and ftp servers.
    This is dangerous because these are protocols that do not encrypt traffic.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      $SOCKET = new Socket("=~/[tT][eE][lL][nN][eE][tT]://.*/", ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SOCKET = new Socket("=~/^[fF][tT][pP]://.*/", ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SOCKET = new Socket("=~/[hH][tT][tT][pP]://.*/", ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SERVERNAMESTR = "=~/[tT][eE][lL][nN][eE][tT]://.*/";
      ...
      $SOCKET = new Socket($SERVERNAMESTR, ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SERVERNAMESTR = "=~/^[fF][tT][pP]://.*/";
      ...
      $SOCKET = new Socket($SERVERNAMESTR, ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SERVERNAMESTR = "=~/[hH][tT][tT][pP]://.*/";
      ...
      $SOCKET = new Socket($SERVERNAMESTR, ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
- id: problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification
  message: |
    Checks for disabling of TLS/SSL certificate verification.
     This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: |
      tls.Config{..., InsecureSkipVerify: true, ...}
  - pattern: |
      $CONFIG = &tls.Config{...}
      ...
      $CONFIG.InsecureSkipVerify = true
- id: problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request
  message: |
    Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library.
    This is dangerous because it could result in plaintext PII being passed around the network.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://godoc.org/github.com/dghubble/sling#Sling.Add
    - https://github.com/dghubble/sling
  severity: WARNING
  languages:
  - go
  pattern-either:
  - patterns:
    - pattern-inside: |
        $REQ = sling.New()
        ...
        $RES = ...
    - pattern: |
        $REQ.$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
  - patterns:
    - pattern-either:
      - pattern: sling.New().$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
  - patterns:
    - pattern-inside: |
        $REQ = sling.New()
        ...
        $URL = "=~/[hH][tT][tT][pP]://.*/"
        ...
        $RES = ...
    - pattern: |
        $REQ.$FUNC($URL)
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
  - patterns:
    - pattern-inside: |
        $URL = "=~/[hH][tT][tT][pP]://.*/"
        ...
        $RES = ...
    - pattern: |
        sling.New().$FUNC($URL)
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
- id: problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request
  message: |
    Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly
    leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.
  fix-regex:
    regex: '[fF][tT][pP]://'
    replacement: sftp://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://godoc.org/github.com/jlaffaye/ftp#Dial
    - https://github.com/jlaffaye/ftp
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: |
      ftp.Dial("=~/^[fF][tT][pP]://.*/", ...)
  - pattern: |
      ftp.DialTimeout("=~/^[fF][tT][pP]://.*/", ...)
  - pattern: |
      ftp.Connect("=~/^[fF][tT][pP]://.*/")
  - pattern: |
      $URL = "=~/^[fF][tT][pP]://.*/"
      ...
      ftp.Dial($URL, ...)
  - pattern: |
      $URL = "=~/^[fF][tT][pP]://.*/"
      ...
      ftp.DialTimeout($URL, ...)
  - pattern: |
      $URL = "=~/^[fF][tT][pP]://.*/"
      ...
      ftp.Connect($URL)
- id: problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request
  message: |
    Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library.
    This is dangerous because it could result in plaintext PII being passed around the network.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://github.com/parnurzeal/gorequest
  severity: WARNING
  languages:
  - go
  pattern-either:
  - patterns:
    - pattern-inside: |
        $REQ = gorequest.New()
        ...
        $RES = ...
    - pattern: |
        $REQ.$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Patch)
  - patterns:
    - pattern: gorequest.New().$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Patch)
- id: problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
  message: |
    Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of
    http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks
    in which the attacker is able to read sensitive information.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://nodejs.org/api/http.html#http_class_http_agent
    - https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY
  languages:
  - javascript
  severity: WARNING
  pattern-either:
  - pattern: |
      http.$FUNC(...);
  - pattern: |
      new http.$FUNC2(...);
- id: problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
  message: |
    Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries,
    including node-rest-client, axios, and got.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.npmjs.com/package/axios
    - https://www.npmjs.com/package/got
    - https://www.npmjs.com/package/node-rest-client
  severity: WARNING
  languages:
  - javascript
  pattern-either:
  - pattern: |
      $CLIENT = require('node-rest-client').Client;
      ...
      $C = new $CLIENT();
      ...
      $C.$REQ("=~/http://.*/", ...);
  - pattern: |
      $AXIOS = require('axios');
      ...
      $AXIOS({url: "=~/http://.*/"});
  - pattern: |
      $AXIOS = require('axios');
      ...
      $AXIOS.$REQ("=~/http://.*/", ...);
  - pattern: |
      $GOT = require('got');
      ...
      $GOT.$REQ("=~/http://.*/", ...);
  - pattern: |
      $GOT = require('got');
      ...
      $GOT("=~/http://.*/", ...);
- id: problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
  message: |
    Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports
    no encryption, and data passes through unencrypted.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.npmjs.com/package/telnet
    - https://www.npmjs.com/package/telnet-client
  languages:
  - javascript
  severity: WARNING
  pattern-either:
  - pattern: |
      $TEL = require('telnet-client');
      ...
      $SERVER = new $TEL();
      ...
      $SERVER.on(...);
  - pattern: |
      $TEL = require('telnet-client');
      ...
      $SERVER = new $TEL();
      ...
      $SERVER.connect(...);
  - pattern: |
      $TEL = require('telnet');
      ...
      $TEL.createServer(...);
- id: problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request
  message: |
    Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic,   possibly
    leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.ruby-lang.org/en/2.0.0/Net/FTP.html
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: |
      $FTP = Net::FTP.new('...')
      ...
      $FTP.login
  - pattern: |
      Net::FTP.open('...') do |ftp|
        ...
        ftp.login
      end
- id: problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request
  message: |
    Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as     the telnet protocol supports
    no encryption, and data passes through unencrypted.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.ruby-lang.org/en/2.2.0/Net/Telnet.html
    - https://www.rubydoc.info/gems/net-ssh-telnet2/0.1.0/Net/SSH/Telnet
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: |
      Net::Telnet::new(...)
  - pattern: |
      Net::SSH::Telnet.new(...)
- id: problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests
  message: |
    Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP       libraries,
    including httparty and restclient.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://github.com/rest-client/rest-client
    - https://github.com/jnunemaker/httparty/tree/master/docs
  severity: WARNING
  languages:
  - ruby
  pattern-either:
  - pattern: |
      HTTParty.$PARTYVERB("=~/[hH][tT][tT][pP]://.*/", ...)
  - pattern: |
      $STRING = "=~/[hH][tT][tT][pP]://.*/"
      ...
      HTTParty.$PARTYVERB($STRING, ...)
  - pattern: |
      RestClient.$RESTVERB "=~/[hH][tT][tT][pP]://.*/", ...
  - pattern: |
      RestClient::Request.execute(..., url: "=~/[hH][tT][tT][pP]://.*/", ...)
- id: problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request
  message: |
    Checks for requests to http and ftp (unencrypted) sites using OpenURI.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html
  severity: WARNING
  languages:
  - ruby
  pattern-either:
  - pattern: |
      URI.open('=~/[hH][tT][tT][pP]://.*/', ...)
  - pattern: |
      $URI = URI.parse('=~/[hH][tT][tT][pP]://.*/', ...)
      ...
      $URI.open
  - pattern: |
      URI.open('=~/^[fF][tT][pP]://.*/', ...)
  - pattern: |
      $URI = URI.parse('=~/^[fF][tT][pP]://.*/', ...)
      ...
      $URI.open
- id: problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
  message: |
    Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities,
    as simple errors in the code can result in lack of proper certificate validation.
    This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate
    - https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      new HostnameVerifier() {
        ...
        public boolean verify(String hostname, SSLSession session) {
          ...
        }
        ...
      };
  - pattern: |
      public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
        ...
        TrustStrategy $FUNCNAME = (X509Certificate[] chain, String authType) -> ...;
        ...
      }
  - pattern: |
      TrustStrategy $FUNCNAME= new TrustStrategy() {
        ...
        public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
          ...
        }
        ...
      };
- id: problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
  message: |
    Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly
    leading to PII being sent plaintext over the network.
  fix-regex:
    regex: '[fF][tT][pP]://'
    replacement: sftp://
    count: 1
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      $SF = new DefaultFtpSessionFactory(...);
      ...
      $SF.setHost("=~/^[fF][tT][pP]://.*/");
      ...
      $SF.$FUNC(...);
  - pattern: |
      $SF = new DefaultFtpSessionFactory(...);
      ...
      String $URL = "=~/^[fF][tT][pP]://.*/";
      ...
      $SF.setHost($URL);
      ...
      $SF.$FUNC(...);
- id: python.boto3.security.hardcoded-token.hardcoded-token
  message: |
    Hardcoded AWS access token detected. Use environment variables
    to access tokens (e.g., os.environ.get(...)) or use non version-controlled
    configuration files.
  metadata:
    cwe: 'CWE-798: Use of Hard-coded Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://pypi.org/project/flake8-boto3/
    references:
    - https://bento.dev/checks/boto3/hardcoded-access-token/
    - https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: $W(..., aws_secret_access_key="=~/^[A-Za-z0-9/+=]+$/", ...)
  - pattern: $W(..., aws_access_key_id="=~/^AKI/", ...)
  - pattern: $W(..., aws_session_token="...", ...)
- id: python.django.security.injection.mass-assignment.mass-assignment
  languages:
  - python
  severity: WARNING
  message: |
    Mass assignment detected. This can result in assignment to
    model fields that are unintended and can be exploited by
    an attacker. Instead of using '**request.$W', assign each field you
    want to edit individually to prevent mass assignment. You can read
    more about mass assignment at
    https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.
  metadata:
    cwe: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    owasp: 'A1: Injection'
    owaspapi: 'API6: Mass Assignment'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html
  pattern-either:
  - pattern: $MODEL.objects.create(**request.$W)
  - pattern: |
      $OBJ.update(**request.$W)
      ...
      $OBJ.save()
- id: python.django.security.injection.request-data-write.request-data-write
  message: |
    Found request data in '.write(...)'. This could be dangerous if a malicious
    actor is able to control data into sensitive files. For example, a malicious
    actor could force rolling of critical log files, or cause a denial-of-service
    by using up available disk space. Ensure content is validated.
  metadata:
    cwe: 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    owasp: 'A1: Injection'
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: $F.write(..., request.$W.get(...), ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W.get(...), ...)
  - pattern: return $F.write(..., request.$W.get(...), ...)
  - pattern: $F.write(..., request.$W(...), ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W(...), ...)
  - pattern: return $F.write(..., request.$W(...), ...)
  - pattern: $F.write(..., request.$W[...], ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W[...], ...)
  - pattern: return $F.write(..., request.$W[...], ...)
  - pattern: $F.write(..., request.$W, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W, ...)
  - pattern: return $F.write(..., request.$W, ...)
- id: python.django.security.audit.query-set-extra.avoid-query-set-extra
  message: This is a last resort. You should be careful when using QuerySet.extra
    due to SQLi https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: $X.objects.$FUNC(...).extra(...)
  - pattern: $X.objects.$FUNC(...).$FILTER(...).extra(...)
  - pattern: $X.objects.$FUNC(...).$FILTER(...).$UPDATE(...).extra(...)
- id: python.django.security.audit.extends-custom-expression.extends-custom-expression
  languages:
  - python
  message: |
    Found extension of custom expression: $CLASS. Extending expressions
    in this way could inadvertently expose a SQL injection vulnerability.
    See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection
    for more information.
  metadata:
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
  severity: WARNING
  pattern-either:
  - pattern: |
      class $CLASS(..., django.db.models.Func, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Func, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Expression, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Expression, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Value, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Value, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.DurationValue, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.DurationValue, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.RawSQL, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.RawSQL, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Star, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Star, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Random, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Random, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Col, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Col, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Ref, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Ref, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.ExpressionList, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.ExpressionList, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.ExpressionWrapper, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.ExpressionWrapper, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.When, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.When, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Case, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Case, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Subquery, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Subquery, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Exists, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Exists, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Window, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Window, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.WindowFrame, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.WindowFrame, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.RowRange, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.RowRange, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.ValueRange, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.ValueRange, ...):
          ...
- id: python.django.security.audit.xss.context-autoescape-off.context-autoescape-off
  message: |
    Detected a Context with autoescape diabled. If you are
    rendering any web pages, this exposes your application to cross-site
    scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it
    to 'True'.
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-site Scripting (XSS)'
    references:
    - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
  languages:
  - python
  severity: WARNING
  fix-regex:
    regex: (autoescape.*?)False
    replacement: \1True
  pattern-either:
  - pattern: '{..., "autoescape": False, ...}'
  - pattern: $D["autoescape"] = False
- id: python.django.performance.upsell_earliest_latest.use-earliest-or-latest
  message: Looks like you are only accessing first element of an ordered QuerySet.
    Use `latest()` or `earliest()` instead. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.latest
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: $X.objects.order_by(...)[0]
  - pattern: $X.objects.$FUNC(...).order_by(...)[0]
  - pattern: $X.objects.$FUNC(...).$FILTER(...).order_by(...)[0]
- id: python.django.performance.upsell-count.use-count-method
  message: Looks like you need to determine the number of records. Django provides
    the count() method which is more efficient than .len(). See https://docs.djangoproject.com/en/3.0/ref/models/querysets/
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: $X.objects.$FUNC(...).len()
  - pattern: $X.objects.$FUNC(...).$FILTER().len()
  - pattern: $X.objects.$FUNC(...).$FILTER().$UPDATE(...).len()
- id: python.lang.correctness.useless-comparison.no-strings-as-booleans
  message: |
    Using strings as booleans in Python has unexpected results.
    `"one" and "two"` will return "two".
    `"one" or "two"` will return "one".
     In Python, strings are truthy, and strings with a non-zero length evaluate to True.
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      if <... "..." and ... ...>:
          ...
  - pattern: |
      if <... "..." or ... ...>:
          ...
  - patterns:
    - pattern-not: |
        if $X in "...":
          ...
    - pattern: |
        if "...":
            ...
- id: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
  message: |
    The HTTPSConnection API has changed frequently with minor releases of Python.
    Ensure you are using the API for your version of Python securely.
    For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
    See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    for more information.
  metadata:
    owasp: 'A6: Security Misconfiguration'
    cwe: 'CWE-295: Improper Certificate Validation'
    references:
    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: httplib.HTTPSConnection(...)
  - pattern: http.client.HTTPSConnection(...)
  - pattern: six.moves.http_client.HTTPSConnection(...)
- id: python.lang.security.audit.formatted-sql-query.formatted-sql-query
  message: |
    Detected possible formatted SQL query. Use parameterized queries instead.
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://stackoverflow.com/questions/775296/mysql-parameterized-queries
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: $DB.execute("..." % ...)
  - pattern: $DB.execute("...".format(...))
  - pattern: $DB.execute(f"...")
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = "..." % ...
          ...
      - pattern-inside: |
          $SQL = "...".format(...)
          ...
      - pattern-inside: |
          $SQL = f"...{$X}..."
          ...
    - pattern: $DB.execute($SQL)
- id: python.lang.security.audit.weak-ssl-version.weak-ssl-version
  message: |
    An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
    are considered weak encryption and are deprecated.
    Use 'ssl.PROTOCOL_TLSv1_2' or higher.
  metadata:
    cwe: 'CWE-326: Inadequate Encryption Strength'
    owasp: 'A3: Sensitive Data Exposure'
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
    references:
    - https://tools.ietf.org/html/rfc7568
    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html
    - https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: ssl.PROTOCOL_SSLv2
  - pattern: ssl.PROTOCOL_SSLv3
  - pattern: ssl.PROTOCOL_TLSv1
  - pattern: ssl.PROTOCOL_TLSv1_1
  - pattern: pyOpenSSL.SSL.SSLv2_METHOD
  - pattern: pyOpenSSL.SSL.SSLv23_METHOD
  - pattern: pyOpenSSL.SSL.SSLv3_METHOD
  - pattern: pyOpenSSL.SSL.TLSv1_METHOD
  - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
- id: python.lang.security.audit.network.http-not-https-connection.http-not-https-connection
  message: |
    Detected HTTPConnectionPool. This will transmit data in cleartext.
    It is recommended to use HTTPSConnectionPool instead for to encrypt
    communications.
  metadata:
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: urllib3.HTTPConnectionPool(...)
  - pattern: urllib3.connectionpool.HTTPConnectionPool(...)
- id: python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces
  message: |
    Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly
    expose the server publicly as it binds to all available interfaces. Consider
    instead getting correct address from an environment variable or
    configuration file.
  metadata:
    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp: 'A6: Security Misconfiguration'
  languages:
  - python
  severity: INFO
  pattern-either:
  - pattern: |
      $S = socket.socket(...)
      ...
      $S.bind(("0.0.0.0", ...))
  - pattern: |
      $S = socket.socket(...)
      ...
      $S.bind(("::", ...))
  - pattern: |
      $S = socket.socket(...)
      ...
      $S.bind(("", ...))
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen
  message: |
    Detected 'urllib.urlopen()' using 'http://'. This request will not be
    encrypted. Use 'https://' instead.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  pattern-either:
  - pattern: urllib.request.urlopen("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.urlopen($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlopen($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp.insecure-urlopen-ftp
  message: |
    Detected 'urllib.urlopen()' using 'ftp://'. This request will not be
    encrypted. Consider using SFTP instead. urllib does not support SFTP,
    so consider switching to a library which supports SFTP.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.urlopen("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.urlopen($URL, ...)
  - pattern: |-
      def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlopen($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-request-object.insecure-request-object
  message: |
    Detected a 'urllib.request.Request()' object using an insecure transport
    protocol, 'http://'. This connection will not be encrypted. Use
    'https://' instead.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.Request
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.Request("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.Request($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        urllib.request.Request($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp.insecure-urlretrieve-ftp
  message: |
    Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be
    encrypted. Use SFTP instead. urllib does not support SFTP, so consider
    switching to a library which supports SFTP.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.urlretrieve("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.urlretrieve($URL, ...)
  - pattern: |-
      def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlretrieve($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp.insecure-urlopener-retrieve-ftp
  message: |
    Detected an insecure transmission channel. 'URLopener.retrieve(...)' is
    being used with 'ftp://'. Use SFTP instead. urllib does not support
    SFTP, so consider using a library which supports SFTP.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.URLopener(...).retrieve("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.retrieve("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Ff][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.retrieve($URL, ...)
  - patterns:
    - pattern: |
        $URL = "=~/[Ff][Tt][Pp]://.*/"
        ...
        urllib.request.URLopener(...).retrieve($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Ff][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).retrieve($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.retrieve($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve.insecure-urlopener-retrieve
  message: |
    Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is
    being used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.URLopener(...).retrieve("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.retrieve("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.retrieve($URL, ...)
  - patterns:
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        urllib.request.URLopener(...).retrieve($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).retrieve($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.retrieve($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open.insecure-urlopener-open
  message: |
    Detected an unsecured transmission channel. 'URLopener.open(...)' is
    being used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.URLopener(...).open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - patterns:
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        urllib.request.URLopener(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-urlretrieve
  message: |
    Detected 'urllib.urlretrieve()' using 'http://'. This request will not be
    encrypted. Use 'https://' instead.
  metadata:
    owasp: 'A3: Sensitve Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  pattern-either:
  - pattern: urllib.request.urlretrieve("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.urlretrieve($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlretrieve($URL, ...)
- id: python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  message: |
    Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
  metadata:
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: requests.$W("=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"
      ...
      requests.$W($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/^[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        requests.$W($URL, ...)
  - pattern: requests.request($METHOD, "=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"
      ...
      requests.request($METHOD, $URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/^[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        requests.request($METHOD, $URL, ...)
  - pattern: requests.Request($METHOD, "=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"
      ...
      requests.Request($METHOD, $URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/^[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        requests.Request($METHOD, $URL, ...)
- id: python.lang.maintainability.useless-assign-keyed.useless-assignment-keyed
  message: key `$Y` in `$X` is assigned twice; the first assignment is useless
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $X[$Y] = ...
      $X[$Y] = ...
  - pattern: |
      $X[$Y][$Z] = ...
      $X[$Y][$Z] = ...
- id: python.lang.correctness.list-modify-iterating.list-modify-while-iterate
  message: |
    It appears that `$LIST` is a list that is being modified while in a for loop.
    This will likely cause a runtime error or an infinite loop.
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.pop(...)
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.push(...)
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.append(...)
  - pattern: |
      for $ELEMENT in $LIST:
        ...
        $LIST.extend(...)
- id: python.lang.correctness.dict-modify-iterating.dict-del-while-iterate
  message: 'It appears that `$DICT[$KEY]` is a dict with items being deleted while
    in a for loop. This is usually a bad idea and will likely lead to a RuntimeError:
    dictionary changed size during iteration'
  metadata:
    references:
    - https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      for $KEY, $VALUE in $DICT.items():
          ...
          del $DICT[$KEY]
  - pattern: |
      for $KEY in $DICT.keys():
          ...
          del $DICT[$KEY]
- id: python.lang.correctness.common-mistakes.default-mutable-dict.default-mutable-dict
  message: 'Function $F mutates default dict $D. Python only instantiates default
    function arguments once and shares the instance across the function calls. If
    the default function argument is mutated, that will modify the instance used by
    all future function calls. This can cause unexpected results, or lead to security
    vulnerabilities whereby one function consumer can view or modify the data of another
    function consumer. Instead, use a default argument (like None) to indicate that
    no argument was provided and instantiate a new dictionary at that time. For example:
    `if $D is None: $D = {}`.'
  languages:
  - python
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern: |
        def $F(..., $D={}, ...):
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {}
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict(...)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D.copy()
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.copy($D)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict.copy($D)
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {... for ... in ...}
          ...
          $D[...] = ...
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D or {}
          ...
          $D[...] = ...
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D={}, ...):
            ...
            $D[...] = ...
  - patterns:
    - pattern: |
        def $F(..., $D={}, ...):
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {}
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict(...)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D.copy()
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.copy($D)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict.copy($D)
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {... for ... in ...}
          ...
          $D.update(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D or {}
          ...
          $D.update(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D={}, ...):
            ...
            $D.update(...)
  - patterns:
    - pattern: |
        def $F(..., $D={}, ...):
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {}
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict(...)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D.copy()
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = copy.copy($D)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = dict.copy($D)
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = {... for ... in ...}
          ...
          $D.setdefault(...)
    - pattern-not: |
        def $F(..., $D={}, ...):
          ...
          $D = $D or {}
          ...
          $D.setdefault(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D={}, ...):
            ...
            $D.setdefault(...)
- id: python.lang.correctness.common-mistakes.default-mutable-list.default-mutable-list
  message: 'Function $F mutates default list $D. Python only instantiates default
    function arguments once and shares the instance across the function calls. If
    the default function argument is mutated, that will modify the instance used by
    all future function calls. This can cause unexpected results, or lead to security
    vulnerabilities whereby one function consumer can view or modify the data of another
    function consumer. Instead, use a default argument (like None) to indicate that
    no argument was provided and instantiate a new list at that time. For example:
    `if $D is None: $D = []`.'
  languages:
  - python
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.append(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.append(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.append(...)
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.extend(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.extend(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.extend(...)
  - patterns:
    - pattern: |
        def $F(..., $D=[], ...):
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = []
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [...]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list(...)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.deepcopy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = copy.copy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = list.copy($D)
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D[:]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = [... for ... in ...]
          ...
          $D.insert(...)
    - pattern-not: |
        def $F(..., $D=[], ...):
          ...
          $D = $D or []
          ...
          $D.insert(...)
    - pattern-not-inside: |
        def $A(...):
          ...
          def $F(..., $D=[], ...):
            ...
            $D.insert(...)
- id: python.lang.correctness.exceptions.exceptions.raise-not-base-exception
  message: In Python3, a runtime `TypeError` will be thrown if you attempt to raise
    an object or class which does not inherit from `BaseException`
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: raise "..."
  - pattern: |
      $X: BaseException
      raise $X(...)
  - patterns:
    - pattern: raise $EXCEPTION
    - metavariable-regex:
        metavariable: $EXCEPTION
        regex: '[0-9]*\.?[0-9]+'
- id: python.flask.security.dangerous-template-string.dangerous-template-string
  message: |
    Found a template created with string formatting.
    This is susceptible to server-side template injection
    and cross-site scripting attacks.
  metadata:
    cwe: 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html
    - https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      $V = "...".format(...)
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = "...".format(...)
      ...
      return flask.render_template_string($V, ...), $MORE
  - pattern: |
      $V = "..." % $S
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = "..." % $S
      ...
      return flask.render_template_string($V, ...), $MORE
  - pattern: |
      $V = "..."
      ...
      $V += $O
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = "..."
      ...
      $V += $O
      ...
      return flask.render_template_string($V, ...), $MORE
  - pattern: |
      $V = f"...{$X}..."
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = f"...{$X}..."
      ...
      return flask.render_template_string($V, ...), $CODE
- id: python.flask.security.unsanitized-input.response-contains-unsanitized-input
  message: |
    Flask response reflects unsanitized user input. This could lead to a
    cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/)
    in which an attacker causes arbitrary code to be executed in the user's browser.
    To prevent, please sanitize the user input, e.g. by rendering the response
    in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).
  metadata:
    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp: 'A7: Cross-Site Scripting (XSS)'
    references:
    - https://flask.palletsprojects.com/en/1.0.x/security/
    - https://owasp.org/www-community/attacks/xss/
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response("...".format($X))
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response(f"...{$X}...")
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response(f"...{$X}")
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response(f"{$X}...")
- id: python.flask.security.injection.user-eval.eval-injection
  languages:
  - python
  severity: ERROR
  message: Detected user data flowing into eval. This is code injection and should
    be avoided.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
  pattern-either:
  - patterns:
    - pattern: eval(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            eval(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            eval(..., <... $INTERM ...>, ...)
  - patterns:
    - pattern-either:
      - pattern: eval(..., <... flask.request.$W.get(...) ...>, ...)
      - pattern: eval(..., <... flask.request.$W[...] ...>, ...)
      - pattern: eval(..., <... flask.request.$W(...) ...>, ...)
      - pattern: eval(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W.get(...) ...>
            ...
            eval(..., <... $INTERM ...>, ...)
        - pattern: eval(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W[...] ...>
            ...
            eval(..., <... $INTERM ...>, ...)
        - pattern: eval(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W(...) ...>
            ...
            eval(..., <... $INTERM ...>, ...)
        - pattern: eval(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W ...>
            ...
            eval(..., <... $INTERM ...>, ...)
        - pattern: eval(...)
- id: python.flask.security.injection.path-traversal-open.path-traversal-open
  languages:
  - python
  severity: ERROR
  message: Found request data in a call to 'open'. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks.
  metadata:
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
  pattern-either:
  - patterns:
    - pattern: open(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            open(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            with open(..., <... $ROUTEVAR ...>, ...) as $FD:
              ...
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            open(..., <... $INTERM ...>, ...)
  - patterns:
    - pattern-either:
      - pattern: open(..., <... flask.request.$W.get(...) ...>, ...)
      - pattern: open(..., <... flask.request.$W[...] ...>, ...)
      - pattern: open(..., <... flask.request.$W(...) ...>, ...)
      - pattern: open(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W.get(...) ...>
            ...
            open(<... $INTERM ...>, ...)
        - pattern: open(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W[...] ...>
            ...
            open(<... $INTERM ...>, ...)
        - pattern: open(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W(...) ...>
            ...
            open(<... $INTERM ...>, ...)
        - pattern: open(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W ...>
            ...
            open(<... $INTERM ...>, ...)
        - pattern: open(...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W.get(...) ...>
            ...
            with open(<... $INTERM ...>, ...) as $F:
              ...
        - pattern: open(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W[...] ...>
            ...
            with open(<... $INTERM ...>, ...) as $F:
              ...
        - pattern: open(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W(...) ...>
            ...
            with open(<... $INTERM ...>, ...) as $F:
              ...
        - pattern: open(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W ...>
            ...
            with open(<... $INTERM ...>, ...) as $F:
              ...
        - pattern: open(...)
- id: python.flask.security.injection.ssrf-requests.ssrf-requests
  languages:
  - python
  severity: ERROR
  message: Data from request object is passed to a new server-side request. This could
    lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes
    and hosts are validated against an allowlist, do not forward the response to the
    user, and ensure proper authentication and transport-layer security in the proxied
    request.
  metadata:
    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
  pattern-either:
  - patterns:
    - pattern: requests.$FUNC(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $ROUTE_FUNC(..., $ROUTEVAR, ...):
            ...
            requests.$FUNC(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $ROUTE_FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            requests.$FUNC(..., <... $INTERM ...>, ...)
  - patterns:
    - pattern-either:
      - pattern: requests.$FUNC(..., <... flask.request.$W.get(...) ...>, ...)
      - pattern: requests.$FUNC(..., <... flask.request.$W[...] ...>, ...)
      - pattern: requests.$FUNC(..., <... flask.request.$W(...) ...>, ...)
      - pattern: requests.$FUNC(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W.get(...) ...>
            ...
            requests.$FUNC(<... $INTERM ...>, ...)
        - pattern: requests.$FUNC(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W[...] ...>
            ...
            requests.$FUNC(<... $INTERM ...>, ...)
        - pattern: requests.$FUNC(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W(...) ...>
            ...
            requests.$FUNC(<... $INTERM ...>, ...)
        - pattern: requests.$FUNC(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W ...>
            ...
            requests.$FUNC(<... $INTERM ...>, ...)
        - pattern: requests.$FUNC(...)
- id: python.flask.security.injection.os-system-injection.os-system-injection
  languages:
  - python
  severity: ERROR
  message: User data detected in os.system. This could be vulnerable to a command
    injection and should be avoided. If this must be done, use the 'subprocess' module
    instead and pass the arguments as a list.
  metadata:
    cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
  pattern-either:
  - patterns:
    - pattern: os.system(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            os.system(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            os.system(..., <... $INTERM ...>, ...)
  - patterns:
    - pattern-either:
      - pattern: os.system(..., <... flask.request.$W.get(...) ...>, ...)
      - pattern: os.system(..., <... flask.request.$W[...] ...>, ...)
      - pattern: os.system(..., <... flask.request.$W(...) ...>, ...)
      - pattern: os.system(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W.get(...) ...>
            ...
            os.system(<... $INTERM ...>)
        - pattern: os.system(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W[...] ...>
            ...
            os.system(<... $INTERM ...>)
        - pattern: os.system(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W(...) ...>
            ...
            os.system(<... $INTERM ...>)
        - pattern: os.system(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W ...>
            ...
            os.system(<... $INTERM ...>)
        - pattern: os.system(...)
- id: python.flask.security.injection.user-exec.exec-injection
  languages:
  - python
  severity: ERROR
  message: Detected user data flowing into exec. This is code injection and should
    be avoided.
  metadata:
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp: 'A1: Injection'
    references:
    - https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html
  pattern-either:
  - patterns:
    - pattern: exec(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            exec(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            exec(..., <... $INTERM ...>, ...)
  - patterns:
    - pattern-either:
      - pattern: exec(..., <... flask.request.$W.get(...) ...>, ...)
      - pattern: exec(..., <... flask.request.$W[...] ...>, ...)
      - pattern: exec(..., <... flask.request.$W(...) ...>, ...)
      - pattern: exec(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W.get(...) ...>
            ...
            exec(..., <... $INTERM ...>, ...)
        - pattern: exec(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W[...] ...>
            ...
            exec(..., <... $INTERM ...>, ...)
        - pattern: exec(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W(...) ...>
            ...
            exec(..., <... $INTERM ...>, ...)
        - pattern: exec(...)
      - patterns:
        - pattern-inside: |
            $INTERM = <... flask.request.$W ...>
            ...
            exec(..., <... $INTERM ...>, ...)
        - pattern: exec(...)
- id: python.flask.maintainability.deprecated.deprecated-apis.flask-deprecated-apis
  message: deprecated Flask API
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $F = Flask(...)
      ...
      $F.open_session(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.save_session(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.make_null_session(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.init_jinja_globals(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.request_globals_class(...)
  - pattern: |
      $F = Flask(...)
      ...
      $F.static_path(...)
  - pattern: app.open_session(...)
  - pattern: app.save_session(...)
  - pattern: app.make_null_session(...)
  - pattern: app.init_jinja_globals(...)
  - pattern: app.request_globals_class(...)
  - pattern: app.static_path(...)
  - pattern: app.config.from_json(...)
  - pattern: flask.json_available
  - pattern: flask.request.module
  - pattern: flask.testing.make_test_environ_builder(...)
- id: python.requests.security.disabled-cert-validation.disabled-cert-validation
  message: |
    Certificate verification has been explicitly disabled. This
    permits insecure connections to insecure servers. Re-enable
    certification validation.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A3: Sensitive Data Exposure'
    references:
    - https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: requests.put(..., verify=False, ...)
  - pattern: requests.patch(..., verify=False, ...)
  - pattern: requests.delete(..., verify=False, ...)
  - pattern: requests.head(..., verify=False, ...)
  - pattern: requests.options(..., verify=False, ...)
  - pattern: requests.request(..., verify=False, ...)
  - pattern: requests.get(..., verify=False, ...)
  - pattern: requests.post(..., verify=False, ...)
- id: html.best-practice.robots-denied.robots-denied
  message: This page denies crawlers from indexing the page. Remove the robots 'meta'
    tag.
  severity: INFO
  languages:
  - generic
  pattern-either:
  - pattern: <meta name="robots" ...>
  - pattern: <META NAME="ROBOTS" ...>
- id: typescript.react.security.react-insecure-request.react-insecure-request
  message: |
    Unencrypted request over HTTP detected.
  metadata:
    vulnerability: Insecure Transport
    owasp: 'A3: Sensitive Data Exposure'
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.npmjs.com/package/axios
  languages:
  - typescript
  - javascript
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $AXIOS from 'axios';
          ...
          $AXIOS.$METHOD(...)
      - pattern-inside: |
          $AXIOS = require('axios');
          ...
          $AXIOS.$METHOD(...)
    - pattern-either:
      - pattern: $AXIOS.get("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.post("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.delete("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.head("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.patch("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.put("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.options("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $AXIOS from 'axios';
          ...
          $AXIOS(...)
      - pattern-inside: |
          $AXIOS = require('axios');
          ...
          $AXIOS(...)
    - pattern-either:
      - pattern: '$AXIOS({url: "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"}, ...)'
      - pattern: |
          $OPTS = {url: "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"}
          ...
          $AXIOS($OPTS, ...)
  - pattern: fetch("=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
- id: ruby.lang.security.weak-hashes-md5.weak-hashes-md5
  message: |
    Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks.
    Could also result in collisions,leading to potential collision attacks. Use SHA256 or other hashing functions instead.
  metadata:
    references:
    - https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: Digest::MD5.base64digest $X
  - pattern: Digest::MD5.hexdigest $X
  - pattern: Digest::MD5.digest $X
  - pattern: Digest::MD5.new
  - pattern: OpenSSL::Digest::MD5.base64digest $X
  - pattern: OpenSSL::Digest::MD5.hexdigest $X
  - pattern: OpenSSL::Digest::MD5.digest $X
  - pattern: OpenSSL::Digest::MD5.new
- id: ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1
  message: |
    Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities.
    Use SHA256, SHA3 or other hashing functions instead.
  metadata:
    references:
    - https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html
    - https://shattered.io/
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: Digest::SHA1.$FUNC $X
  - pattern: Digest::SHA1.$FUNC
  - pattern: OpenSSL::Digest::SHA1.$FUNC $X
  - pattern: OpenSSL::Digest::SHA1.$FUNC
  - pattern: OpenSSL::HMAC.$FUNC("sha1",...)
- id: ruby.lang.security.no-eval.ruby-eval
  message: |
    Use of eval detected. This can run arbitrary code. Ensure external data
    does not reach here, otherwise this is a security vulnerability.
    Consider other ways to do this without eval.
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: eval(...)
  - pattern: $BIND.eval(...)
  - pattern: |
      $CLASS.class_eval do
        ...
      end
  - pattern: |
      $CLASS.instance_eval do
        ...
      end
  - pattern: |
      $CLASS.module_eval do
        ...
      end
  - pattern: |
      $CLASS.class_eval(...)
  - pattern: |
      $CLASS.instance_eval(...)
  - pattern: |
      $CLASS.module_eval(...)
  - pattern: |
      $VM.compile(...).eval
  - patterns:
    - pattern: |
        $IS.eval
    - pattern-inside: |
        $IS = $VM.compile(...)
        ...
- id: c.lang.security.info-leak-on-non-formatted-string.info-leak-on-non-formated-string
  message: |
    Use %s, %d, %c... to format your variables, otherwise this could leak information.
  metadata:
    references:
    - http://nebelwelt.net/files/13PPREW.pdf
  languages:
  - c
  severity: ERROR
  pattern: printf(argv[$NUM]);
- id: c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn
  message: |
    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'.
    These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits.
    Instead, use 'snprintf' and 'vsnprintf'.
  metadata:
    references:
    - https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions
    - https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html
  languages:
  - c
  severity: WARNING
  pattern-either:
  - pattern: |
      $FUNC($BUFFER, argv[$NUM], ...);
      ...
      vsprintf(..., $BUFFER, ...);
  - pattern: vsprintf(..., argv[$NUM], ...)
  - pattern: |
      $FUNC($BUFFER, argv[$NUM], ...);
      ...
      sprintf(..., $BUFFER, ...);
  - pattern: sprintf(...,argv[$NUM],...)
  - pattern: |
      $FUNC($BUFFER, argv[$NUM], ...);
      ...
      printf(..., $BUFFER, ...);
  - pattern: printf(...,argv[$NUM],...)
- id: generic.dockerfile.best-practice.prefer-json-notation.prefer-json-notation
  severity: INFO
  languages:
  - generic
  message: Prefer JSON notation when using CMD or ENTRYPOINT. This allows signals
    to be passed from the OS.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3024
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3024
    - https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern-either:
  - patterns:
    - pattern: CMD $WORD
    - pattern-not-inside: CMD [...]
  - patterns:
    - pattern: ENTRYPOINT $WORD
    - pattern-not-inside: ENTRYPOINT [...]
- id: generic.dockerfile.best-practice.avoid-apt-get-upgrade.avoid-apt-get-upgrade
  message: Packages in base containers should be up-to-date, removing the need to
    upgrade or dist-upgrade. If a package is out of date, contact the maintainers.
  languages:
  - generic
  severity: WARNING
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3005
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3005
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern-either:
  - pattern: RUN ... apt-get upgrade
  - pattern: RUN ... apt-get dist-upgrade
- id: generic.dockerfile.correctness.copy-from-own-alias.copy-from-own-alias
  severity: ERROR
  languages:
  - generic
  message: COPY instructions cannot copy from its own alias. The '$REF' alias is used
    before switching to a new image. If you meant to switch to a new image, include
    a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement.
  metadata:
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3023
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3023
  paths:
    include:
    - '*dockerfile*'
    - '*Dockerfile*'
  pattern-either:
  - pattern: |
      FROM $IMAGE:$TAG as $REF
      ...
      COPY --from=$REF
      ...
      FROM
  - pattern: |
      FROM $IMAGE:$TAG AS $REF
      ...
      COPY --from=$REF
      ...
      FROM
- id: generic.ci.security.bash_reverse_shell
  message: Semgrep found a bash reverse shell
  severity: ERROR
  languages:
  - generic
  pattern-either:
  - pattern: |
      sh -i >& /dev/udp/.../... 0>&1
  - pattern: |
      <...>/dev/tcp/.../...; sh <&... >&... 2>&
  - pattern: |
      <...>/dev/tcp/.../...; cat <&... | while read line; do $line 2>&... >&...;done
  - pattern: |
      sh -i ...<...> /dev/tcp/.../... ...<&... 1>&... 2>&
- id: generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: The host for this proxy URL is dynamically determined. This can be dangerous
    if the host can be injected by an attacker because it may forcibly alter destination
    of the proxy. Consider hardcoding acceptable destinations and retrieving them
    with 'map' or something similar.
  metadata:
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
    - https://nginx.org/en/docs/http/ngx_http_map_module.html
  pattern-either:
  - pattern: proxy_pass $SCHEME://$$HOST ...;
  - pattern: proxy_pass $$SCHEME://$$HOST ...;
- id: java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
  message: |
    Detected use of the 'none' algorithm in a JWT token.
    The 'none' algorithm assumes the integrity of the token has already
    been verified. This would allow a malicious actor to forge a JWT token
    that will automatically be verified. Do not explicitly use the 'none'
    algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: |
      $JWT.sign(com.auth0.jwt.algorithms.Algorithm.none());
  - pattern: |
      $NONE = com.auth0.jwt.algorithms.Algorithm.none();
      ...
      $JWT.sign($NONE);
  - pattern: |-
      class $CLASS {
        ...
        $TYPE $NONE = com.auth0.jwt.algorithms.Algorithm.none();
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          $JWT.sign($NONE);
          ...
        }
        ...
      }
- id: java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
  message: |
    Hardcoded JWT secret or private key is used.
    This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
  metadata:
    cwe: 'CWE-522: Insufficiently Protected Credentials'
    owasp: 'A2: Broken Authentication'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: |
      com.auth0.jwt.algorithms.Algorithm.HMAC256("...");
  - pattern: |
      $SECRET = "...";
      ...
      com.auth0.jwt.algorithms.Algorithm.HMAC256($SECRET);
  - pattern: |
      class $CLASS {
        ...
        $TYPE $SECRET = "...";
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC256($SECRET);
          ...
        }
        ...
      }
  - pattern: |
      com.auth0.jwt.algorithms.Algorithm.HMAC384("...");
  - pattern: |
      $SECRET = "...";
      ...
      com.auth0.jwt.algorithms.Algorithm.HMAC384($SECRET);
  - pattern: |
      class $CLASS {
        ...
        $TYPE $SECRET = "...";
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC384($SECRET);
          ...
        }
        ...
      }
  - pattern: |
      com.auth0.jwt.algorithms.Algorithm.HMAC512("...");
  - pattern: |
      $SECRET = "...";
      ...
      com.auth0.jwt.algorithms.Algorithm.HMAC512($SECRET);
  - pattern: |
      class $CLASS {
        ...
        $TYPE $SECRET = "...";
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC512($SECRET);
          ...
        }
        ...
      }
- id: java.lang.security.audit.http-response-splitting.http-response-splitting
  metadata:
    cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
    owasp: 'A1: Injection'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING
    references:
    - https://www.owasp.org/index.php/HTTP_Response_Splitting
  message: |
    Older Java application servers are vulnreable to HTTP response splitting, which may occur if an HTTP
    request can be injected with CRLF characters. This finding is reported for completeness; it is recommended
    to ensure your environment is not affected by testing this yourself.
  severity: INFO
  languages:
  - java
  pattern-either:
  - pattern: |
      $VAR = $REQ.getParameter(...);
      ...
      $COOKIE = new Cookie(..., $VAR, ...);
      ...
      $RESP.addCookie($COOKIE, ...);
  - patterns:
    - pattern-inside: |
        $RETTYPE $FUNC(...,@PathVariable $TYPE $VAR, ...) {
          ...
        }
    - pattern: |
        $COOKIE = new Cookie(..., $VAR, ...);
        ...
        $RESP.addCookie($COOKIE, ...);
- id: java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
  message: |
    Insecure HostnameVerifier implementation detected. This will accept
    any SSL certificate with any hostname, which creates the possibility
    for man-in-the-middle attacks.
  metadata:
    cwe: 'CWE-295: Improper Certificate Validation'
    owasp: 'A6: Security Misconfiguration'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      class $CLASS implements HostnameVerifier {
        ...
        public boolean verify(...) { return true; }
      }
  - pattern: |-
      new HostnameVerifier(...){
        public boolean verify(...) {
          return true;
        }
      }
- id: java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli
  message: |
    Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized.
    Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            String $SQL = $X + $Y;
            ...
        - pattern-inside: |
            String $SQL = String.format(...);
            ...
        - pattern-inside: |
            $VAL $FUNC(...,String $SQL,...) {
              ...
            }
      - pattern-not-inside: |
          String $SQL = "..." + "...";
          ...
      - pattern: $S.$METHOD($SQL,...)
    - pattern: |
        $S.$METHOD(String.format(...),...);
    - pattern: |
        $S.$METHOD($X + $Y,...);
  - pattern-either:
    - pattern-inside: |
        java.sql.Statement $S = ...;
        ...
    - pattern-inside: |
        $TYPE $FUNC(...,java.sql.Statement $S,...) {
          ...
        }
  - pattern-not: |
      $S.$METHOD("..." + "...",...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(executeQuery|execute|executeUpdate|executeLargeUpdate|addBatch|nativeSQL)$
- id: java.lang.correctness.assignment-comparison.assignment-comparison
  message: The value of `$X` is being ignored and will be used in the conditional
    test
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: if ($X=true) { ... }
  - pattern: if ($X=false) { ... }
- id: java.lang.correctness.hardcoded-conditional.hardcoded-conditional
  message: useless if statement, always the same behavior
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: if (<... true ...>) { ... }
  - pattern: if (<... false ...>) { ... }
- id: java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
  metadata:
    owasp: 'A1: Injection'
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
    references:
    - https://www.owasp.org/index.php/Path_Traversal
  message: |
    Detected a potential path traversal. A malicious actor
    could control the location of this file, to include going backwards
    in the directory with '../'. To address this, ensure that user-controlled
    variables in file paths are sanitized. You may aslso consider using a utility
    method such as org.apache.commons.io.FilenameUtils.getName(...) to only
    retrieve the file name from the path.
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $RETURNTYPE $FUNC (..., @PathParam(...) $TYPE $VAR, ...) {
        ...
        new File(..., $VAR, ...);
        ...
      }
  - pattern: |-
      $RETURNTYPE $FUNC (..., @javax.ws.rs.PathParam(...) $TYPE $VAR, ...) {
        ...
        new File(..., $VAR, ...);
        ...
      }
- id: java.jboss.security.session_sqli.find-sql-string-concatenation
  message: |
    In $METHOD, $X is used to construct a SQL query via string concatenation.
  fix: ''
  languages:
  - java
  severity: WARNING
  pattern-either:
  - pattern: |
      $RETURN $METHOD(...,String $X,...){
        ...
        Session $SESSION = ...;
        ...
        String $QUERY = ... + $X + ...;
        ...
        PreparedStatement $PS = $SESSION.connection().prepareStatement($QUERY);
        ...
        ResultSet $RESULT = $PS.executeQuery();
        ...
      }
  - pattern: |
      $RETURN $METHOD(...,String $X,...){
        ...
        String $QUERY = ... + $X + ...;
        ...
        Session $SESSION = ...;
        ...
        PreparedStatement $PS = $SESSION.connection().prepareStatement($QUERY);
        ...
        ResultSet $RESULT = $PS.executeQuery();
        ...
      }
