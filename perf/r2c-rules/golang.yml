rules:
  - id: go.lang.security.audit.reflect-makefunc.reflect-makefunc
    message: |
      'reflect.MakeFunc' detected. This will sidestep protections that are
      normally afforded by Go's type system. Audit this call and be sure that
      user input cannot be used to affect the code generated by MakeFunc;
      otherwise, you will have a serious security vulnerability.
    metadata:
      owasp: "A8: Insecure Deserialization"
      cwe: "CWE-913: Improper Control of Dynamically-Managed Code Resources"
    severity: WARNING
    pattern: reflect.MakeFunc(...)
    languages:
      - go
  - id: go.lang.security.audit.database.string-formatted-query.string-formatted-query
    languages:
      - go
    message: |
      String-formatted SQL query detected. This could lead to SQL injection if
      the string is not sanitized properly. Audit this call to ensure the
      SQL is not manipulatable by external data.
    severity: WARNING
    metadata:
      owasp: "A1: Injection"
      cwe:
        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command
        ('SQL Injection')"
      source-rule-url: https://github.com/securego/gosec
    patterns:
      - pattern-either:
          - pattern: $OBJ.Exec("..." + $X)
          - pattern: $OBJ.ExecContext($CTX, "..." + $X)
          - pattern: $OBJ.Query("..." + $X)
          - pattern: $OBJ.QueryContext($CTX, "..." + $X)
          - pattern: $OBJ.QueryRow("..." + $X)
          - pattern: $OBJ.QueryRow($CTX, "..." + $X)
          - pattern: $OBJ.QueryRowContext($CTX, "..." + $X)
          - pattern: $OBJ.Exec(fmt.$P("...", ...))
          - pattern: $OBJ.ExecContext($CTX, fmt.$P("...", ...))
          - pattern: $OBJ.Query(fmt.$P("...", ...))
          - pattern: $OBJ.QueryContext($CTX, fmt.$P("...", ...))
          - pattern: $OBJ.QueryRow(fmt.$P("...", ...))
          - pattern: $OBJ.QueryRow($CTX, fmt.$P("...", ...))
          - pattern: $OBJ.QueryRowContext($CTX, fmt.$P("...", ...))
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.Exec($QUERY, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.Query($QUERY, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.ExecContext($CTX, $QUERY, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryContext($CTX, $QUERY, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryRow($QUERY)
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryRow($CTX, $QUERY)
          - pattern: |
              $QUERY = "..."
              ...
              $QUERY = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryRowContext($CTX, $QUERY, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.Exec($OTHER, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.Query($OTHER, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.ExecContext($CTX, $OTHER, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryContext($CTX, $OTHER, ...)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryRow($OTHER)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryRow($CTX, $OTHER)
          - pattern: |
              $QUERY = "..."
              ...
              $OTHER = $FXN(..., $QUERY, ...)
              ...
              $OBJ.QueryRowContext($CTX, $OTHER, ...)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.Exec($QUERY, ...)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.Query($QUERY, ...)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.ExecContext($CTX, $QUERY, ...)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.QueryContext($CTX, $QUERY, ...)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.QueryRow($QUERY)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.QueryRow($CTX, $QUERY)
          - pattern: |
              $QUERY = "..." + $X
              ...
              $OBJ.QueryRowContext($CTX, $QUERY, ...)
  - id: go.lang.security.audit.crypto.tls.tls-with-insecure-cipher
    message: |
      Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak.
      Use the function 'tls.CipherSuites()' to get a list of good cipher suites.
      See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites
      for why and what other cipher suites to use.
    metadata:
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp: "A9: Using Components with Known Vulnerabilities"
      source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls.go
      references:
        - https://golang.org/pkg/crypto/tls/#InsecureCipherSuites
    languages:
      - go
    severity: WARNING
    pattern-either:
      - pattern: |
          tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_RC4_128_SHA,...}}
      - pattern: |
          tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_AES_128_CBC_SHA256,...}}
      - pattern: |
          tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,...}}
      - pattern: |
          tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,...}}
      - pattern: |
          tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,...}}
      - pattern: |
          tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,...}}
      - pattern: |
          tls.CipherSuite{..., TLS_RSA_WITH_RC4_128_SHA ,...}
      - pattern: |
          tls.CipherSuite{..., TLS_RSA_WITH_AES_128_CBC_SHA256 ,...}
      - pattern: |
          tls.CipherSuite{..., TLS_ECDHE_ECDSA_WITH_RC4_128_SHA ,...}
      - pattern: |
          tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_RC4_128_SHA ,...}
      - pattern: |
          tls.CipherSuite{..., TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 ,...}
      - pattern: tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 ,...}
  - id: go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key
    message: |
      Disabled host key verification detected. This allows man-in-the-middle
      attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do
      host key verification.
      See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/
      to learn more about the problem and how to fix it.
    metadata:
      cwe: "CWE-322: Key Exchange without Entity Authentication"
      owasp: "A3: Sensitive Data Exposure"
      source-rule-url: https://github.com/securego/gosec
      references:
        - https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/
        - https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d
    languages:
      - go
    severity: WARNING
    pattern: ssh.InsecureIgnoreHostKey()
  - id: go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure
    message: |
      SSLv3 is insecure because it has known vulnerabilities.
      Starting with go1.14, SSLv3 will be removed. Instead, use
      'tls.VersionTLS13'.
    metadata:
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp: "A9: Using Components with Known Vulnerabilities"
      source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls_config.go
      references:
        - https://golang.org/doc/go1.14#crypto/tls
        - https://www.us-cert.gov/ncas/alerts/TA14-290A
    languages:
      - go
    severity: ERROR
    patterns:
      - pattern: "tls.Config{..., MinVersion: $TLS.VersionSSL30, ...}"
    fix-regex:
      regex: VersionSSL30
      replacement: VersionTLS13
  - id: go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion
    message: |
      `MinVersion` is missing from this TLS configuration. The default
      value is TLS1.0 which is considered insecure. Explicitly set the
      `MinVersion` to a secure version of TLS, such as `VersionTLS13`.
    metadata:
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp: "A9: Using Components with Known Vulnerabilities"
      source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls_config.go
      references:
        - https://golang.org/doc/go1.14#crypto/tls
        - https://golang.org/pkg/crypto/tls/#:~:text=MinVersion
        - https://www.us-cert.gov/ncas/alerts/TA14-290A
    languages:
      - go
    severity: ERROR
    patterns:
      - pattern: tls.Config{...}
      - pattern-not-inside: "tls.Config{..., MinVersion: ..., ...}"
    fix-regex:
      regex: Config\s*\{
      replacement: "Config{MinVersion: SSL.VersionTLS13,"
  - id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
    message: |
      Detected MD5 hash algorithm which is considered insecure. MD5 is not
      collision resistant and is therefore not suitable as a cryptographic
      signature. Use SHA256 or SHA3 instead.
    languages:
      - go
    severity: WARNING
    metadata:
      owasp: "A9: Using Components with Known Vulnerabilities"
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source-rule-url: https://github.com/securego/gosec#available-rules
    pattern-either:
      - pattern: |
          md5.New()
      - pattern: |
          md5.Sum(...)
  - id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1
    message: |
      Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
      collision resistant and is therefore not suitable as a cryptographic
      signature. Use SHA256 or SHA3 instead.
    languages:
      - go
    severity: WARNING
    metadata:
      owasp: "A9: Using Components with Known Vulnerabilities"
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source-rule-url: https://github.com/securego/gosec#available-rules
    pattern-either:
      - pattern: |
          sha1.New()
      - pattern: |
          sha1.Sum(...)
  - id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES
    message: |
      Detected DES cipher algorithm which is insecure. The algorithm is
      considered weak and has been deprecated. Use AES instead.
    languages:
      - go
    severity: WARNING
    metadata:
      owasp: "A9: Using Components with Known Vulnerabilities"
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source-rule-url: https://github.com/securego/gosec#available-rules
    pattern-either:
      - pattern: |
          des.NewTripleDESCipher(...)
      - pattern: |
          des.NewCipher(...)
  - id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4
    message: |
      Detected RC4 cipher algorithm which is insecure. The algorithm has many
      known vulnerabilities. Use AES instead.
    languages:
      - go
    severity: WARNING
    metadata:
      owasp: "A9: Using Components with Known Vulnerabilities"
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      source-rule-url: https://github.com/securego/gosec#available-rules
    pattern: rc4.NewCipher(...)
  - id: go.lang.security.audit.net.use-tls.use-tls
    pattern: http.ListenAndServe($ADDR, $HANDLER)
    fix: http.ListenAndServeTLS($ADDR, certFile, keyFile, $HANDLER)
    metadata:
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      owasp: "A3: Sensitive Data Exposure"
      references:
        - https://golang.org/pkg/net/http/#ListenAndServeTLS
    message:
      Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead.
      See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.
    languages:
      - go
    severity: WARNING
  - id: go.lang.security.audit.net.pprof.pprof-debug-exposure
    metadata:
      cwe: "CWE-489: Active Debug Code"
      owasp: "A6: Security Misconfiguration"
      source-rule-url: https://github.com/securego/gosec#available-rules
      references:
        - https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/
    message: |
      The profiling 'pprof' endpoint is automatically exposed on /debug/pprof.
      This could leak information about the server.
      Instead, use `import "net/http/pprof"`. See
      https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/
      for more information and mitigation.
    languages:
      - go
    severity: WARNING
    patterns:
      - pattern-inside: |
          import _ "net/http/pprof"
          ...
      - pattern-inside: |
          func $ANY(...) {
            ...
          }
      - pattern-not: http.ListenAndServe("=~/^localhost.*/", ...)
      - pattern-not: http.ListenAndServe("=~/^127[.]0[.]0[.]1.*/", ...)
      - pattern: http.ListenAndServe(...)
  - id: go.lang.security.audit.net.formatted-template-string.formatted-template-string
    message: |
      Found a formatted template string passed to 'template.HTML()'.
      'template.HTML()' does not escape contents. Be absolutely sure
      there is no user-controlled data in this template. If user data
      can reach this template, you may have a XSS vulnerability.
    metadata:
      cwe:
        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site
        Scripting')"
      owasp: "A1: Injection"
      references:
        - https://golang.org/pkg/html/template/#HTML
    languages:
      - go
    severity: WARNING
    patterns:
      - pattern-not: template.HTML("..." + "...")
      - pattern-either:
          - pattern: template.HTML($T + $X, ...)
          - pattern: template.HTML(fmt.$P("...", ...), ...)
          - pattern: |
              $T = "..."
              ...
              $T = $FXN(..., $T, ...)
              ...
              template.HTML($T, ...)
          - pattern: |
              $T = fmt.$P("...", ...)
              ...
              template.HTML($T, ...)
          - pattern: |
              $T, $ERR = fmt.$P("...", ...)
              ...
              template.HTML($T, ...)
          - pattern: |
              $T = $X + $Y
              ...
              template.HTML($T, ...)
          - pattern: |
              $T = "..."
              ...
              $OTHER, $ERR = fmt.$P(..., $T, ...)
              ...
              template.HTML($OTHER, ...)
  - id: go.lang.maintainability.useless-ifelse.useless-if-conditional
    patterns:
      - pattern-either:
          - pattern: |-
              if ($X) {
                  ...
              } else if ($X) {
                  ...
              }
    message: |
      Detected an if block that checks for the same condition on both branches (`$X`)
    languages:
      - go
    severity: WARNING
  - id: go.lang.maintainability.useless-ifelse.useless-if-body
    patterns:
      - pattern: |-
          if ($X) {
              $S
          } else {
              $S
          }
    message: |
      Detected identical if-statement bodies. Is this intentional?
    languages:
      - go
    severity: WARNING
