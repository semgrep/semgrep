rules:
  - id: ruby.lang.security.no-eval.ruby-eval
    patterns:
      - pattern-either:
          - pattern: eval(...)
          - pattern: |
              $CLASS.class_eval do
                ...
              end
          - pattern: |
              $CLASS.instance_eval do
                ...
              end
          - pattern: |
              $CLASS.module_eval do
                ...
              end
          - pattern: |
              $CLASS.class_eval(...)
          - pattern: |
              $CLASS.instance_eval(...)
          - pattern: |
              $CLASS.module_eval(...)
    message: |
      Use of eval detected. This can run arbitrary code. Ensure external data
      does not reach here, otherwise this is a security vulnerability.
      Consider other ways to do this without eval.
    languages:
      - ruby
    severity: WARNING
  - id: ruby.lang.security.filter-skipping.filter-skipping
    patterns:
      - pattern-not: |
          $CALL "=~/.*(/:action.*).*/", $ACTION
      - pattern: |
          $CALL "=~/.*(/:action.*).*/"
    message: |
      Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an
      attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing
      additional constraints.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_filter_skipping.rb
        - https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.bad-deserialization.bad-deserialization
    patterns:
      - pattern-either:
          - pattern: |
              YAML.load(...)
          - pattern: |
              CSV.load(...)
          - pattern: |
              Marshal.load(...)
          - pattern: |
              Marshal.restore(...)
          - pattern: |
              $OBJ.object_load(...)
      - pattern-not: |
          YAML.load(..., safe: true, ...)
    message: |
      Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,
      then later loaded from strings. However, uses of load and object_load can cause remote code execution.
      Loading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use JSON securely instead.
    metadata:
      references:
        - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.divide-by-zero.divide-by-zero
    patterns:
      - pattern-either:
          - pattern: |
              $X / 0
          - pattern: |
              $ZERO = 0
              ...
              $X / $ZERO
    message: |
      Checks for divide by zero. Best practice involves not dividing a variable by zero, as this leads to a Ruby
      ZeroDivisionError.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb
    languages:
      - ruby
    severity: WARNING
  - id: ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller
    pattern: |
      class $CONTROLLER < ApplicationController
        ...
        http_basic_authenticate_with ..., :password => "...", ...
      end
    message: |
      Detected hardcoded password used in basic authentication in a controller
      class. Including this password in version control could expose this
      credential. Consider refactoring to use environment variables or
      configuration files.
    severity: ERROR
    metadata:
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp: "A3: Sensitive Data Exposure"
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown
    languages:
      - ruby
  - id: ruby.lang.security.force-ssl-false.force-ssl-false
    patterns:
      - pattern: |
          config.force_ssl = false
    message: |
      Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which
      could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb
    languages:
      - ruby
    severity: WARNING
  - id: ruby.lang.security.cookie-serialization.cookie-serialization
    patterns:
      - pattern-either:
          - pattern: |
              Rails.application.config.action_dispatch.cookies_serializer = :marshal
          - pattern: |
              Rails.application.config.action_dispatch.cookies_serializer = :hybrid
    message: |
      Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to
      remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb
        - https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.file-disclosure.file-disclosure
    patterns:
      - pattern: |
          config.serve_static_assets = true
    message: |
      Special requests can determine whether a file exists on a filesystem that's outside the Ruby app's
      root directory. To fix this, set config.serve_static_assets = false.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb
        - https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.create-with.create-with
    patterns:
      - pattern-not: |
          $FUNC.create_with($PARAMSB.permit(...))
      - pattern: |
          $FUNC.create_with($PARAMSA)
    message: |
      Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which
      could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls
      or use the permit function to specify tags that are allowed to be set.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb
        - https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.no-send.bad-send
    patterns:
      - pattern-either:
          - pattern: |
              $PARAM = params[...]
              ...
              $RES = $MOD.send($PARAM.$FUNC)
          - pattern: |
              $PARAM = params[...]
              ...
              $RES = $MOD.try($PARAM.$FUNC)
          - pattern: |
              $PARAM = params[...]
              ...
              $RES = $MOD.__send__($PARAM.$FUNC)
          - pattern: |
              $PARAM = params[...]
              ...
              $RES = $MOD.public_send($PARAM.$FUNC)
    message: |
      Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe
      use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code     execution.
      Please be sure to sanitize input in order to avoid this.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb
        - https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled
    pattern: $MODEL.new(params[...], ..., :without_protection => true, ...)
    message: |
      Mass assignment protection disabled for '$MODEL'. This could
      permit assignment to sensitive model fields without intention. Instead,
      use 'attr_accessible' for the model or disable mass assigment using
      'config.active_record.whitelist_attributes = true'.
      ':without_protection => true' must be removed for this to take effect.
    metadata:
      cwe:
        "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
        Attributes"
      owasp: "A1: Injection"
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/mass_assignment/index.markdown
    severity: WARNING
    languages:
      - ruby
  - id: ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify
    pattern: OpenSSL::SSL::VERIFY_NONE
    message: |
      Detected SSL that will accept an unverified connection.
      This makes the connections susceptible to man-in-the-middle attacks.
      Use 'OpenSSL::SSL::VERIFY_PEER' intead.
    fix-regex:
      regex: VERIFY_NONE
      replacement: VERIFY_PEER
    severity: WARNING
    languages:
      - ruby
  - id: ruby.lang.security.timing-attack.timing-attack
    patterns:
      - pattern: |
          http_basic_authenticate_with ...
    message: |
      Checks for unsafe use of method http_basic_authenticate_with, which is vulnerable to timing attacks as it
      does not use constant-time checking when comparing passwords. Affected Rails versions include:
      5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1. Avoid this function if possible.
    metadata:
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_basic_auth_timing_attack.rb
        - https://groups.google.com/g/rubyonrails-security/c/ANv0HDHEC3k/m/mt7wNGxbFQAJ
    languages:
      - ruby
    severity: ERROR
  - id: ruby.lang.security.missing-csrf-protection.missing-csrf-protection
    patterns:
      - pattern: |
          class $CONTROLLER < ActionController::Base
            ...
          end
      - pattern-not: |
          class $CONTROLLER < ActionController::Base
            ...
            protect_from_forgery :with => :exception
          end
      - pattern-not: |
          class $CONTROLLER < ActionController::Base
            ...
            protect_from_forgery prepend: true, with: :exception
          end
    message: |
      Detected controller which does not enable cross-site request forgery
      protections using 'protect_from_forgery'. Add
      'protect_from_forgery :with => :exception' to your controller class.
    severity: ERROR
    metadata:
      cwe: "CWE-352: Cross-Site Request Forgery (CSRF)"
      owasp: "A6: Security Misconfiguration"
      source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross-site_request_forgery/index.markdown
    languages:
      - ruby
  - id: ruby.lang.security.weak-hashes-md5.weak-hashes-md5
    patterns:
      - pattern-either:
          - pattern: Digest::MD5.base64digest $X
          - pattern: Digest::MD5.hexdigest $X
          - pattern: Digest::MD5.digest $X
          - pattern: Digest::MD5.new
          - pattern: OpenSSL::Digest::MD5.base64digest $X
          - pattern: OpenSSL::Digest::MD5.hexdigest $X
          - pattern: OpenSSL::Digest::MD5.digest $X
          - pattern: OpenSSL::Digest::MD5.new
    message: |
      Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks.
      Could also result in collisions,leading to potential collision attacks. Use SHA256 or other hashing functions instead.
    metadata:
      references:
        - https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575
    languages:
      - ruby
    severity: WARNING
  - id: ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln
    patterns:
      - pattern-either:
          - pattern: |
              $MOD.new(params[$CODE])
          - pattern: |
              $MOD.new(..., params[$CODE], :without_protection => true, ...)
      - pattern-not-inside: |
          attr_accessible $VAR
          ...
          $MOD.new(params[$CODE])
    message: |
      Checks for calls to without_protection during mass assignment (which allows record creation from hash values).
      This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default.
      Fix: Don't use :without_protection => true. Instead, configure attr_acessible to control attribute access.
    metadata:
      owasp: "A1: Injection"
      cwe:
        "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
        Attributes"
      references:
        - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb
        - https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/
    languages:
      - ruby
    severity: WARNING
