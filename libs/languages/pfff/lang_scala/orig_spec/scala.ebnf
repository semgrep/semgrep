From https://scala-lang.org/files/archive/spec/2.13/13-syntax-summary.html

  CompilationUnit      ::= ("package" QualId semi)* TopStatSeq

  Literal              ::= integerLiteral
                         | floatingPointLiteral
                         | booleanLiteral
                         | characterLiteral
                         | stringLiteral
                         | interpStart interpolatedString
                         | symbolLiteral
                         | "null"

  QualId               ::= id ("." id)*

  Ids                  ::= id ("," id)*

  Path                 ::= StableId
                         | (id ".")? "this"

  StableId             ::= id
                         | Path "." id
                         | (id ".")? "super" ClassQualifier? "." id

  ClassQualifier       ::= "[" id "]"

  ValDef               ::= "val" id "=" Literal

  Type                 ::= FunctionArgTypes "=>" Type
                         | InfixType  ExistentialClause?

  FunctionArgTypes     ::= InfixType
                         | "(" ParamType ("," ParamType )*? ")"

  ExistentialClause    ::= "forSome" "{" ExistentialDcl (semi ExistentialDcl)* "}"

  ExistentialDcl       ::= "type" TypeDcl
                         | "val" ValDcl

  InfixType            ::= CompoundType (id nl? CompoundType)*

  CompoundType         ::= AnnotType ("with" AnnotType)* Refinement?
                         | Refinement

  AnnotType            ::= SimpleType Annotation*

  SimpleType           ::= SimpleType TypeArgs
                         | SimpleType "#" id
                         | StableId
                         | Path "." "type"
                         | "(" Types ")"

  TypeArgs             ::= "[" Types "]"

  Types                ::= Type ("," Type)*

  Refinement           ::= nl? "{" RefineStat? (semi RefineStat)* "}"

  RefineStat           ::= Dcl
                         | "type" TypeDef

  TypePat              ::= Type

  Ascription           ::= ":" InfixType
                         | ":" Annotation Annotation*
                         | ":" "_" "*"

  IfExpression         ::= "if" "(" Expr ")" nl* Expr (semi? "else" Expr)?

  WhileExpression      ::= "while" "(" Expr ")" nl* Expr

  TryExpression        ::= "try" Expr ("catch" Expr)? ("finally" Expr)?

  DoExpression         ::= "do" Expr semi? "while" "(" Expr ")"

  ThrowExpression      ::= "throw" Expr

  ReturnExpression     ::= "return" Expr?

  ForExpression        ::= "for" ("(" Enumerators ")" | "{" Enumerators semi? "}") nl* "yield"? Expr

  CaseExpression       ::= PostfixExpr "match" "{" CaseClauses "}"

  Expr                 ::= (Bindings | "implicit"? id | "_") "=>" Expr
                         | Expr1

  Expr1                ::= IfExpression
                         | WhileExpression
                         | TryExpression
                         | DoExpression
                         | ThrowExpression
                         | ReturnExpression
                         | ForExpression
                         | PostfixExpr
                         | PostfixExpr Ascription
                         | CaseExpression

  PostfixExpr          ::= InfixExpr (id nl?)?

  InfixExpr            ::= PrefixExpr
                         | InfixExpr id nl? InfixExpr

  PrefixExpr           ::= ("-" | "+" | "~" | "!")? SimpleExpr

  SimpleExpr           ::= "new" (ClassTemplate | TemplateBody)
                         | BlockExpr
                         | SimpleExpr1 "_"?

  SimpleExpr1          ::= Literal
                         | Path
                         | "_"
                         | "(" Exprs? ")"
                         | SimpleExpr "." id
                         | SimpleExpr TypeArgs
                         | SimpleExpr1 ArgumentExprs

  Exprs                ::= Expr ("," Expr)*

  ArgumentExprs        ::= "(" Exprs? ")"
                         | "(" (Exprs ",")? PostfixExpr ":" "_" "*" ")"
                         | nl? BlockExpr

  BlockExpr            ::= "{" CaseClauses "}"
                         | "{" nl* Block "}"

  Block                ::= BlockStat (semi BlockStat)* ResultExpr?

  BlockStat            ::= Import
                         | Annotation* "implicit"? "lazy"? Def
                         | Annotation* LocalModifier* TmplDef
                         | Expr1
                         | empty

  ResultExpr           ::= Expr1
                         | (Bindings | ("implicit"? id | "_") ":" CompoundType) "=>" Block

  Enumerators          ::= Generator (semi Generator)*

  Generator            ::= Pattern1 "<-" Expr (semi? Guard | semi Pattern1 "=" Expr)*

  CaseClauses          ::= CaseClause (semi? CaseClause)*

  CaseClause           ::= "case" Pattern Guard? "=>" Block

  Guard                ::= "if" PostfixExpr

  Pattern              ::= Pattern1 ("|" Pattern1)*

  Pattern1             ::= boundvarid ":" TypePat
                         | "_" ":" TypePat
                         | Pattern2

  Pattern2             ::= id ("@" Pattern3)?
                         | Pattern3

  Pattern3             ::= SimplePattern
                         | SimplePattern (id nl? SimplePattern)*

  SimplePattern        ::= "_"
                         | varid
                         | Literal
                         | StableId
                         | StableId "(" Patterns? ")"
                         | StableId "(" (Patterns ",")? (id "@")? "_" "*" ")"
                         | "(" Patterns? ")"

  Patterns             ::= Pattern ("," Patterns)?
                         | "_" "*"

  TypeParamClause      ::= "[" VariantTypeParam ("," VariantTypeParam)* "]"

  FunTypeParamClause   ::= "[" TypeParam ("," TypeParam)* "]"

  VariantTypeParam     ::= Annotation* ("+" | "-")? TypeParam

  TypeParam            ::= (id | "_") TypeParamClause? (">:" Type)? ("<:" Type)? ("<%" Type)* (":" Type)*

  ParamClauses         ::=  ParamClause* (nl? "(" "implicit" Params ")")?

  ParamClause          ::= nl? "(" Params? ")"

  Params               ::= Param ("," Param)*

  Param                ::= Annotation* id (":" ParamType)? ("=" Expr)?

  ParamType            ::= Type
                         | "=>" Type
                         |  Type "*"

  ImplicitClassParams  ::= "(" "implicit" ClassParams ")"

  ClassParamClauses    ::=  ClassParamClause* (nl? ImplicitClassParams?)

  ClassParamClause     ::= nl? "(" ClassParams? ")"

  ClassParams          ::= ClassParam ("," ClassParam)*

  ClassParam           ::= Annotation* Modifier* (("val" | "var"))? id ":" ParamType ("=" Expr)?

  Bindings             ::= "(" Binding ("," Binding)* ")"

  Binding              ::= (id | "_") (":" Type)?

  Modifier             ::= LocalModifier
                         | AccessModifier
                         | "override"

  LocalModifier        ::= "abstract"
                         | "final"
                         | "sealed"
                         | "implicit"
                         | "lazy"

  AccessModifier       ::= ("private" | "protected") AccessQualifier?

  AccessQualifier      ::= "[" (id | "this") "]"

  Annotation           ::= "@" SimpleType ArgumentExprs*

  ConstrAnnotation     ::= "@" SimpleType ArgumentExprs

  TemplateBody         ::= nl? "{" SelfType? TemplateStat (semi TemplateStat)* "}"

  TemplateStat         ::= Import
                         | (Annotation nl?)* Modifier* Def
                         | (Annotation nl?)* Modifier* Dcl
                         | Expr
                         | empty


  SelfType             ::= id (":" Type)? "=>"
                         | "this" ":" Type "=>"

  Import               ::= "import" ImportExpr ("," ImportExpr)*

  ImportExpr           ::= StableId "." (id | "_" | ImportSelectors)

  ImportSelectors      ::= "{" (ImportSelector ",")* (ImportSelector | "_") "}"

  ImportSelector       ::= id ("=>" id | "=>" "_")?

  Dcl                  ::= "val" ValDcl
                         | "var" VarDcl
                         | "def" FunDcl
                         | "type" nl* TypeDcl

  ValDcl               ::= Ids ":" Type

  VarDcl               ::= Ids ":" Type

  FunDcl               ::= FunSig (":" Type)?

  FunSig               ::= id FunTypeParamClause? ParamClauses

  TypeDcl              ::= id  TypeParamClause? (">:" Type)? ("<:" Type)?

  PatVarDef            ::= "val" PatDef
                         | "var" VarDef

  Def                  ::= PatVarDef
                         | "def" FunDef
                         | "type" nl* TypeDef
                         | TmplDef

  PatDef               ::= Pattern2 (":" Type)? "=" Expr

  VarDef               ::= PatDef
                         | Ids ":" Type "=" "_"

  FunDef               ::= FunSig (":" Type)? "=" Expr
                         | FunSig nl? "{" Block "}"
                         | "this" ParamClause ParamClauses ("=" ConstrExpr | nl? ConstrBlock)

  TypeDef              ::= id TypeParamClause? "=" Type

  TmplDef              ::= "case"? "class" ClassDef
                         | "case"? "object" ObjectDef
                         | "trait" TraitDef

  ClassDef             ::= id TypeParamClause? ConstrAnnotation* AccessModifier? ClassParamClauses ClassTemplateOpt

  TraitDef             ::= id TypeParamClause? TraitTemplateOpt

  ObjectDef            ::= id ClassTemplateOpt

  ClassTemplateOpt     ::=  "extends" ClassTemplate
                        | ("extends"? TemplateBody)?

  TraitTemplateOpt     ::=  "extends" TraitTemplate
                        | ("extends"? TemplateBody)?

  ClassTemplate        ::= EarlyDefs? ClassParents TemplateBody?

  TraitTemplate        ::= EarlyDefs? TraitParents TemplateBody?

  ClassParents         ::= Constr ("with" AnnotType)*

  TraitParents         ::= AnnotType ("with" AnnotType)*

  Constr               ::= AnnotType ArgumentExprs*

  EarlyDefs            ::= "{" (EarlyDef (semi EarlyDef)*)? "}" "with"

  EarlyDef             ::= (Annotation nl?)* Modifier* PatVarDef

  ConstrExpr           ::= SelfInvocation
                         | ConstrBlock

  ConstrBlock          ::= "{" SelfInvocation (semi BlockStat)* empty? "}"

  SelfInvocation       ::= "this" ArgumentExprs ArgumentExprs*

  TopStatSeq           ::= TopStat (semi TopStat)*

  TopStat              ::= (Annotation nl?)* Modifier* TmplDef
                         | Import
                         | Packaging
                         | PackageObject

  Packaging            ::= "package" QualId nl? "{" TopStatSeq "}"

  PackageObject        ::= "package" "object" ObjectDef
