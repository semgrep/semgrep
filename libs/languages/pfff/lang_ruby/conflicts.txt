# -*- org -*-

See https://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/

See "Ruby Intermediate Language" paper a DLS'09

* opening '[' and a[i] vs a [i], array access vs call

T_LBRACK vs T_LBRACK_ARG


* keyword argument,  foo a:1, b:2

It's tempting to extend the lexer with
  (* ----------------------------------------------------------------------- *)
  (* Keyword arguments (or hash) *)
  (* ----------------------------------------------------------------------- *)
  | id as s ":" { T_KWD_ARG (s, tk lexbuf) }

but then 'Process::' is parsed as that. So you need at least:
  | id as s ":" ws { T_KWD_ARG (s, tk lexbuf) }

but then code such as
  return true ? nil: x
is wrong.

The right solution is to do like in tree-sitter-ruby and
parse separately the identifier and the ':' but in the
GLR grammar later check if ':' follow immediately the identifier
 (token.immediate(":") in tree-sitter-ruby.
