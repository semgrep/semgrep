(* Semgrep metrics.
 *
 * The goal of this module is to specify the schema for the metrics
 * data sent by the Semgrep CLI to metrics.semgrep.dev.
 *
 * translated originally from semgrep/cli/.../metrics.py
 *
 * TODO:
 *  - at some point we should move this file to semgrep-interfaces/
 *    and use it also server-side.
*)

(*****************************************************************************)
(* Entry point *)
(*****************************************************************************)

type payload = {
    inherit toplevel;
    environment: environment;
    performance: performance;
    errors: errors;
    value: value;
    fix_rate: fix_rate;
    parse_rate: (language * parse_stat) list;
}

(*****************************************************************************)
(* Toplevel *)
(*****************************************************************************)

type toplevel = {
    event_id: uuid;
    anonymous_user_id: string;
    started_at: datetime;
    sent_at: datetime;
}

(* TODO: better type *)
type uuid = string

(* TODO: better type *)
type datetime = string

(*****************************************************************************)
(* Environment *)
(*****************************************************************************)

type environment = {
    version: string;
    projectHash: sha256hash option;
    configNamesHash: sha256hash;
    rulesHash: sha256hash;
    ci: string option;
    isAuthenticated: bool;
  }

type sha256hash = string

(*****************************************************************************)
(* Performance *)
(*****************************************************************************)

type performance = {
    numRules: int option;
    numTargets: int option;
    totalBytesScanned: int option;
    fileStats: file_stats list;
    ruleStats: rule_stats list;
    profilingTimes: (string * float) list;
  }

type file_stats = {
    size: int;
    numTimesScanned: int;
    (* LATER: factorize with semgrep_output_v1.atd? *)
    parseTime: float option;
    matchTime: float option;
    runTime: float option;
  }

type rule_stats = {
    ruleHash: string;
    bytesScanned: int;
    matchTime: float option;
}

(*****************************************************************************)
(* Parsing stats *)
(*****************************************************************************)

(* TODO: use modules and reference Semgrep_language.atd? *)
type language = string

type parse_stat = {
    targets_parsed: int;
    num_targets: int;
    bytes_parsed: int;
    num_bytes: int;
}

(*****************************************************************************)
(* Errors *)
(*****************************************************************************)

type errors = {
    returnCode: int option;
    errors: string list;
}

(*****************************************************************************)
(* Misc *)
(*****************************************************************************)

(* TODO? why called value? *)

type value = {
    inherit value_required;
    numFinding: int;
    numIgnored: int;
    ruleHashesWithFindings: (string * int) list;
  }

type value_required = {
    features: string list; (* TODO: was a Set in metrics.py *)
}

type fix_rate = {
    lowerLimits: (string * int) list;
    upperLimits: (string * int) list;
}
