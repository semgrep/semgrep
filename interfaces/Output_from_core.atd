(*
   Type definitions for semgrep-core's JSON output, meant for the
   python wrapper, 'semgrep'.

   This file is translated into OCaml modules by atdgen:
   - Xxx_t: type definitions
   - Xxx_j: json serialization of those types
   Look for the corresponding Xxx_t.mli, Xxx_j.mli, etc.
   under dune's _build folder (where Xxx is Output_from_core).

   Those types were originally inferred from JSON_report.ml for use
   by spacegrep when it was separate from semgrep-core. It's now also used
   in JSON_report.ml.

   There are other very important form of outputs which are not specified here:
    - the schema for the generic AST dump is in AST_generic_v1.atd
    - The parsing stats have its own Parsing_stats.atd
*)

(*****************************************************************************)
(* Location *)
(*****************************************************************************)

type location = {
  path: string (* source file *);
  start: position;
  end_ <json name="end">: position;
  lines: string list;
}

type position = {
  line: int; (* starts from 1 *)
  col: int; (* starts from 1 *)
  offset: int; (* byte position from the beginning of the file, starts at 0 *)
}

(*****************************************************************************)
(* Match results *)
(*****************************************************************************)

type match_results = {
  matches: match_ list;
  errors: error list;
  skipped: skipped_target list;
  stats: stats;
  ?time: time option;
}

type match_ = {
  ?rule_id: rule_id option;
  location: location;
  extra: match_extra;
}

type rule_id = string

type match_extra = {
  ?message: string option; (* rule.message (?) *)

  (*
     name/value map of the matched metavariables.
     The leading '$' must be included in the metavariable name.
  *)
  metavars: (string * metavar_value) list <json repr="object">;
}

type metavar_value = {
  (* for certain metavariable like $...ARGS, 'end' may be equal to 'start'
   * to represent an empty metavariable value. The rest of the Python
   * code (message metavariable substitution and autofix) works
   * without change for empty ranges (when end = start).
   *)
  start: position;
  end_ <json name="end">: position;
  abstract_content: string; (* value? *)

  (* The unique ID of a metavariable indicates the kind object that was
     captured for equality purposes. In the simplest case, this is only
     the name of the metavariable. In semgrep, it can additionally include
     a disambiguator. For example, consider this target code:

       let foo = 1;
       {
         let foo = 2;
       }

     The pattern '$X' would match the first 'foo' and the second 'foo'.
     In semgrep, these two 'foo's are identified as different variables,
     and this is done by setting the metavariable capture's unique ID to
     something like foo-1' and 'foo-2'. Even though their contents look
     identical, they're not the same thing.

     Spacegrep doesn't make this analysis, so these two captures will
     be considered identical, which is not as good.
  *)
  unique_id: unique_id;
}

(*
   This is just the variant for type=AST.
   In order to accommodate two record types into one variant, use
   the atdgen feature called a json adapter.
*)
type unique_id = {
  (* pad: we should use a sum type here because it's either
     AST of md5sum | Id of sid * ... but that would require
     to update the python side, so for now I use optional
     fields, but really at least one of md5sum or sid should be a Some
   *)
  type_ <json name="type">: unique_id_type;
  (* AST case *)
  ?md5sum: string option;
  (* ID case *)
  ?sid: int option;
}

type unique_id_type = [
  | ID <json name="id">
  | AST
]

(*****************************************************************************)
(* Errors *)
(*****************************************************************************)

(* See Semgrep_error_code *)
type error = {
  ?rule_id: rule_id option;
  error_type: string;
  severity: severity;
  location: location;
  message: string;
  ?details: string option;
  ?yaml_path: string list option;
}


type severity = [
  | Error <json name="error">
  | Warning <json name="warning">
] <ocaml repr="classic">


type stats = {
  okfiles: int;
  errorfiles: int;
}


(*****************************************************************************)
(* Skipping information *)
(*****************************************************************************)

(*
   If the 'rule_id' field is missing, the target is assumed to have
   been skipped for all the rules.
*)
type skipped_target = {
  path: string;
  reason: skip_reason;
  details: string;
  ?rule_id: rule_id option;
}

(*
   A reason for skipping a target file or a pair (target, rule).
*)
type skip_reason = [
  | Excluded_by_config <json name="excluded_by_config">
  | Wrong_language <json name="wrong_language">
  | Too_big <json name="too_big">
  | Minified <json name="minified">
  | Binary <json name="binary">
  | Irrelevant_rule <json name="irrelevant_rule">
  | Too_many_matches <json name="too_many_matches">
] <ocaml repr="classic">

(*****************************************************************************)
(* Profiling information *)
(*****************************************************************************)

type time = {
  targets: target_time list;

  (* List of rules received by core *)
  (* Needs to be separate to include rules read but not run on any target *)
  rules: string list;
  ?rules_parse_time: float option; (* not used in spacegrep *)
}

type target_time = {
  path: string;

  (* parse and match time for each rule on target *)
  rule_times: rule_times list;

  (* run time for all rules on target *)
  run_time: float;
}

type rule_times = {
  rule_id: string;

  parse_time: float;

  match_time: float;
}

(*****************************************************************************)
(* TODO incremental findings *)
(*****************************************************************************)
