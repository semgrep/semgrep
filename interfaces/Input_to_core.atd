(*
   Type definitions for semgrep-core's JSON input, coming from pysemgrep.

   There are other very important form of inputs which are not specified here:
    - The rule syntax and schema (see rule_schema_v1.yaml; only the
      semgrep matching engine options are specified in Config_semgrep.atd)
    - The syntax for all the target files (see the grammar for the different
      tree-sitter and pfff parsers)
*)

(*****************************************************************************)
(* Targets *)
(*****************************************************************************)

(* For -targets.
 * coupling: if you change the type here, you probably also want to change
 * tests/e2e/target
*)

type xlang <ocaml attr="deriving show"> = string wrap <ocaml module="Xlang">

(* Need to maintain pairity between this and semgrep_output_v1.product. *)
type product
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = [
  | SAST (* a.k.a. Code *) <json name="sast">
  | SCA <json name="sca">
  | Secrets <json name="secrets">
]

type lockfile_kind <ocaml attr="deriving show"> = [
  | PackageLock
  (* TODO: the rest of them *)
]

type analyzer <ocaml attr="deriving show"> = [
  | XLang of xlang
  | Lockfile of lockfile_kind
]


type lockfile_data <ocaml attr="deriving show"> = {
  path : string;
  lockfile_kind : lockfile_kind;
}

type target <ocaml attr="deriving show"> = {
  path: string (* source file *);
  (* Must be a valid target analyzer as defined in Xlang.mli.
     examples: "ocaml", "python", but also "spacegrep" or "regexp".
  *)
  analyzer: analyzer;
  products: product list;
  ?lockfile_data : lockfile_data option;
}

(* The same path can be present multiple times in targets below, with
 * different languages each time, so a Python file can be both analyzed
 * with Python rules, but also with generic/regexp rules.
 *
 * alt: we could have a list of languages instead in target above, but
 * because of the way semgrep-core is designed (with its file_and_more type),
 * you could have at most one PL language, and then possibly
 * "generic" and "regexp".
 *)
type targets <ocaml attr="deriving show"> = target list

(*****************************************************************************)
(* Synthesizing from diffs (see locate_patched_functions in Synthesizing.mli) *)
(*****************************************************************************)

type diff_file <ocaml attr="deriving show"> = {
  filename : string;
  diffs : string (* start_line-end_line *) list;
  url : string (* metadata to help SCA rule generation *)
}

type diff_files <ocaml attr="deriving show"> = {
  cve_diffs : diff_file list;
}
