{
  "TEMPLATE": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.TEMPLATE",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.TEMPLATE",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.TEMPLATE",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.TEMPLATE",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.TEMPLATE",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.TEMPLATE",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.TEMPLATE",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.TEMPLATE",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.TEMPLATE",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.TEMPLATE",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.TEMPLATE",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.TEMPLATE",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.TEMPLATE",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.TEMPLATE",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.TEMPLATE",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.TEMPLATE",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.TEMPLATE",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.TEMPLATE",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.TEMPLATE",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.TEMPLATE",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.TEMPLATE",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.TEMPLATE",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.TEMPLATE",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.TEMPLATE",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.TEMPLATE",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.TEMPLATE",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "bash": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "baz() {\n  # MATCH:\n  foo bar\n\n  foo bar baz\n\n  # MATCH:\n  foo \"$(echo 'hello' | bar)\"\n}\n",
          "code_path": "bash/deep_expr_operator.bash",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 3,
                "offset": 28
              },
              "start": {
                "col": 3,
                "line": 3,
                "offset": 21
              }
            },
            {
              "end": {
                "col": 30,
                "line": 8,
                "offset": 85
              },
              "start": {
                "col": 3,
                "line": 8,
                "offset": 58
              }
            }
          ],
          "pattern": "foo <... bar ...>\n",
          "pattern_path": "bash/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "foo() {\n  # ERROR: match\n  foo\n  bar\n  # ERROR: not sure this should match really\n  foo\n  x=$(bar)\n  # ERROR: match\n  foo\n  foo2 \"$(bar)\"\n  # ERROR: match, but not sure it should match really\n  foo\n  bloo | bar > /dev/null\n}\n",
          "code_path": "bash/deep_exprstmt.bash",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 4,
                "offset": 36
              },
              "start": {
                "col": 3,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 98
              },
              "start": {
                "col": 3,
                "line": 6,
                "offset": 84
              }
            },
            {
              "end": {
                "col": 16,
                "line": 10,
                "offset": 137
              },
              "start": {
                "col": 3,
                "line": 9,
                "offset": 118
              }
            },
            {
              "end": {
                "col": 13,
                "line": 13,
                "offset": 210
              },
              "start": {
                "col": 3,
                "line": 12,
                "offset": 194
              }
            }
          ],
          "pattern": "foo\nbar\n",
          "pattern_path": "bash/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "# ERROR:\nfoo bar\n\n# ERROR:\nfoo \"bar\"\n\nfoo \"$bar\"\n\n# ERROR:\nfoo 'bar'\n",
          "code_path": "bash/concrete_syntax.bash",
          "highlights": [
            {
              "end": {
                "col": 8,
                "line": 2,
                "offset": 16
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 10,
                "line": 5,
                "offset": 36
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 10,
                "line": 10,
                "offset": 68
              },
              "start": {
                "col": 1,
                "line": 10,
                "offset": 59
              }
            }
          ],
          "pattern": "foo bar\n",
          "pattern_path": "bash/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.bash",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.bash",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.bash",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "# ERROR:\nfoo 1 2\n\n# ERROR:\nfoo \"$(date)\" 2\n\nfoo 2\n",
          "code_path": "bash/metavar_arg.bash",
          "highlights": [
            {
              "end": {
                "col": 8,
                "line": 2,
                "offset": 16
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 16,
                "line": 5,
                "offset": 42
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 27
              }
            }
          ],
          "pattern": "foo $X 2\n",
          "pattern_path": "bash/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.bash",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.bash",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "# ERROR:\nsomething foo bar\n\n# ERROR:\n\"$thing\" foo bar\n",
          "code_path": "bash/metavar_call.bash",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 2,
                "offset": 26
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 53
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 37
              }
            }
          ],
          "pattern": "$CMD foo bar\n",
          "pattern_path": "bash/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "# ERROR:\nfoo() {\n  echo hello\n}\n\n# ERROR:\nfunction foo() {\n  echo hello\n}\n\n",
          "code_path": "bash/metavar_func_def.bash",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 4,
                "offset": 31
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 2,
                "line": 9,
                "offset": 73
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 42
              }
            }
          ],
          "pattern": "function $F() {\n  ...\n}\n",
          "pattern_path": "bash/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.bash",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.bash",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.bash",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.bash",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.bash",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.bash",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.bash",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "# ERROR:\ncp a b c b\n\ncp a b c d\n",
          "code_path": "bash/metavar_equality_expr.bash",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 2,
                "offset": 19
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "cp ... $X ... $X\n",
          "pattern_path": "bash/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.bash",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "# ERROR:\nout=''\ntouch \"$out\"\n",
          "code_path": "bash/metavar_equality_var.bash",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 28
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "$FILE=''\ntouch \"${$FILE}\"\n",
          "pattern_path": "bash/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "foo\n\n# ERROR:\nfoo 5\n\n# ERROR:\nfoo 1 2 3 4 5\n\nfoo 5 6\n",
          "code_path": "bash/dots_args.bash",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 4,
                "offset": 19
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 14
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 43
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 30
              }
            }
          ],
          "pattern": "foo ... 5\n",
          "pattern_path": "bash/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.bash",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "# MATCH:\nif [[ -e foo ]]; then\n  echo \"foo exists\"\nelse\n  echo \"error: foo is missing\"\n  exit 1\nfi\n",
          "code_path": "bash/dots_nested_stmts.bash",
          "highlights": [
            {
              "end": {
                "col": 9,
                "line": 6,
                "offset": 95
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "if ...; then\n  ...\nelse\n  ...\nfi\n",
          "pattern_path": "bash/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "# ERROR:\nCMD=$(cat)\neval $CMD\n\n# ERROR:\ncmd=$(cat)\necho \"User entered: $cmd\"\neval $cmd\n",
          "code_path": "bash/dots_stmts.bash",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 3,
                "offset": 29
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 10,
                "line": 8,
                "offset": 86
              },
              "start": {
                "col": 1,
                "line": 6,
                "offset": 40
              }
            }
          ],
          "pattern": "$V=$(cat)\n...\neval ${$V}\n",
          "pattern_path": "bash/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "# simple strings\nfoo bar\nfoo \"bar\"\nfoo 'bar'\n\n# string made of multiple fragments\n# ERROR:\nfoo \"${HOME}/bar\"\n\n",
          "code_path": "bash/dots_string.bash",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 8,
                "offset": 108
              },
              "start": {
                "col": 1,
                "line": 8,
                "offset": 91
              }
            }
          ],
          "pattern": "foo \"...\"\n",
          "pattern_path": "bash/dots_string.sgrep"
        }
      ]
    }
  },
  "c": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "int main() {\n    int bar = 0;\n    //ERROR: match\n    foo(bar + 42);\n}\n",
          "code_path": "c/deep_expr_operator.c",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 53
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "int main(int argc, char *argv[]) {\n\t//ERROR: match\n        foo();\n\tbar();\n\t//ERROR: match\n        foo();\n\tint x = bar();\n\t//ERROR: match\n        foo();\n\tfoo(bar());\n\t//ERROR: match\n        foo();\n\treturn bar();\n}\n",
          "code_path": "c/deep_exprstmt.c",
          "highlights": [
            {
              "end": {
                "col": 8,
                "line": 4,
                "offset": 73
              },
              "start": {
                "col": 9,
                "line": 3,
                "offset": 59
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 119
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 98
              }
            },
            {
              "end": {
                "col": 13,
                "line": 10,
                "offset": 164
              },
              "start": {
                "col": 9,
                "line": 9,
                "offset": 145
              }
            },
            {
              "end": {
                "col": 14,
                "line": 13,
                "offset": 209
              },
              "start": {
                "col": 9,
                "line": 12,
                "offset": 189
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "void foo() {\n //ERROR:\n    foo(1,2);\n\n //ERROR:\n foo(1,\n     2);\n\n //ERROR:\n foo (1, // comment\n      2);\n\n foo(2,1);\n}\n\n\n",
          "code_path": "c/concrete_syntax.c",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 35
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 63
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 49
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 104
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 77
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.c",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Argument": [
        {
          "code": "void foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n\n",
          "code_path": "c/metavar_arg.c",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 38
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 99
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 58
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 155
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 191
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 175
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "void foo() {\n    x = 1;\n    //ERROR:\n    if (x > 2)\n        foo();\n}\n\n",
          "code_path": "c/metavar_cond.c",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 5,
                "offset": 66
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "void foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n",
          "code_path": "c/metavar_call.c",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 38
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.c",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.c",
          "highlights": [],
          "pattern": "#include $X\n",
          "pattern_path": "c/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.c",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "void foo() {\n    v = 1;\n    //ERROR:\n    if (v > 2)\n        return 1;\n}\n\n",
          "code_path": "c/metavar_stmt.c",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 68
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.c",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": "int test_equal() {\n    int a = 1;\n    int b = 2;\n    if (a == b) return 1;\n    if (3 == 4) return 2;\n\n    int *p = malloc(sizeof(int));\n    int *q = malloc(sizeof(int));\n    if (p == q) return 1;\n\n    char *x = \"hello\";\n    char *y = \"bye\";\n    //ERROR: match\n    if (x == y) return 2;\n    //ERROR: match\n    if (x == \"nope\") return 3;\n    //ERROR: match\n    if (\"lit1\" == \"lit2\") return 4;\n    return 0;\n}\n\n",
          "code_path": "c/metavar_typed.c",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 14,
                "offset": 274
              },
              "start": {
                "col": 9,
                "line": 14,
                "offset": 268
              }
            },
            {
              "end": {
                "col": 20,
                "line": 16,
                "offset": 324
              },
              "start": {
                "col": 9,
                "line": 16,
                "offset": 313
              }
            },
            {
              "end": {
                "col": 25,
                "line": 18,
                "offset": 379
              },
              "start": {
                "col": 9,
                "line": 18,
                "offset": 363
              }
            }
          ],
          "pattern": "(char *$X) == $Y\n",
          "pattern_path": "c/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.c",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "void foo() {\n    //ERROR: match\n    char path = \"/location/1\";\n}\n\n",
          "code_path": "c/regexp_string.c",
          "highlights": [
            {
              "end": {
                "col": 30,
                "line": 3,
                "offset": 61
              },
              "start": {
                "col": 10,
                "line": 3,
                "offset": 41
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "void test_equal() {\n    a = 1;\n    b = 2;\n    //ERROR: match\n    if (a+b == a+b)\n        return 1;\n    return 0;\n}\n\n",
          "code_path": "c/metavar_equality_expr.c",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 79
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 69
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "void foo() {\n    //ERROR:\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n    }\n}\n\n\n\n",
          "code_path": "c/metavar_equality_stmt.c",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 9,
                "offset": 121
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "void foo() {\n  //ERROR:\n    myfile = open();\n    close(myfile);\n}\n\n\n\n",
          "code_path": "c/metavar_equality_var.c",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "void foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n\n",
          "code_path": "c/dots_args.c",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 65
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 59
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.c",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.c",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "void foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n\n\n",
          "code_path": "c/dots_stmts.c",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 7,
                "offset": 107
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 31
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "void foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n}\n\n",
          "code_path": "c/dots_string.c",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "cairo": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "\nfn foo() {\n  //ERROR:\n  let x = foo(bar(1 + 42));\n\n  let y = foo(1);\n}\n",
          "code_path": "cairo/deep_expr_operator.cairo",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 4,
                "offset": 49
              },
              "start": {
                "col": 11,
                "line": 4,
                "offset": 33
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.cairo",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.cairo",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.cairo",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.cairo",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.cairo",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.cairo",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.cairo",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.cairo",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.cairo",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.cairo",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.cairo",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.cairo",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "fn foo() {\n    let v = 1;\n    //ERROR:\n    if v > 2 {\n        return 1;\n    }\n}\n",
          "code_path": "cairo/metavar_stmt.cairo",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 6,
                "offset": 77
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 43
              }
            }
          ],
          "pattern": "if $X > $Y {\n   $S;\n}\n",
          "pattern_path": "cairo/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.cairo",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.cairo",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.cairo",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.cairo",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.cairo",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.cairo",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.cairo",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "\nfn foo() {\n    //ERROR:\n    bar(1,2,3,4,5);\n    //ERROR:\n    bar(5);\n}\n",
          "code_path": "cairo/dots_args.cairo",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 43
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 29
              }
            },
            {
              "end": {
                "col": 11,
                "line": 6,
                "offset": 68
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 62
              }
            }
          ],
          "pattern": "\nbar(...);\n",
          "pattern_path": "cairo/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "\nfn main() {\n    // ERROR: match\n    let result = Logic::Adder::new()\n        .args(20)\n        .args(30)\n        .compute();\n}\n",
          "code_path": "cairo/dots_method_chaining.cairo",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 7,
                "offset": 124
              },
              "start": {
                "col": 18,
                "line": 4,
                "offset": 50
              }
            }
          ],
          "pattern": "Logic::Adder::new(...). ... .compute(...);\n",
          "pattern_path": "cairo/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.cairo",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.cairo",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.cairo",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "clojure": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.clojure",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.clojure",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.clojure",
          "highlights": [],
          "pattern": "(foo 1 2)\n",
          "pattern_path": "clojure/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.clojure",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.clojure",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.clojure",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.clojure",
          "highlights": [],
          "pattern": "(foo $X 2)\n",
          "pattern_path": "clojure/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.clojure",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.clojure",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.clojure",
          "highlights": [],
          "pattern": "($F 1 2)\n",
          "pattern_path": "clojure/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.clojure",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.clojure",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.clojure",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.clojure",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.clojure",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.clojure",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.clojure",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.clojure",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.clojure",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.clojure",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.clojure",
          "highlights": [],
          "pattern": "(setq $V (open()))\n(close $V)\n",
          "pattern_path": "clojure/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.clojure",
          "highlights": [],
          "pattern": "(foo ... 5)\n",
          "pattern_path": "clojure/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.clojure",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.clojure",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.clojure",
          "highlights": [],
          "pattern": "(setq $V (get()))\n...\n(eval $V)\n\n\n",
          "pattern_path": "clojure/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.clojure",
          "highlights": [],
          "pattern": "(foo \"...\")\n\n\n",
          "pattern_path": "clojure/dots_string.sgrep"
        }
      ]
    }
  },
  "cpp": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "int main() {\n    int bar = 0;\n    //ERROR: match\n    foo(bar + 42);\n}\n",
          "code_path": "cpp/deep_expr_operator.cpp",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 53
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "int main(int argc, char *argv[]) {\n\t//ERROR: match\n        foo();\n\tbar();\n\t//ERROR: match\n        foo();\n\tint x = bar();\n\t//ERROR: match\n        foo();\n\tfoo(bar());\n\t//ERROR: match\n        foo();\n\treturn bar();\n}\n",
          "code_path": "cpp/deep_exprstmt.cpp",
          "highlights": [
            {
              "end": {
                "col": 8,
                "line": 4,
                "offset": 73
              },
              "start": {
                "col": 9,
                "line": 3,
                "offset": 59
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 119
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 98
              }
            },
            {
              "end": {
                "col": 13,
                "line": 10,
                "offset": 164
              },
              "start": {
                "col": 9,
                "line": 9,
                "offset": 145
              }
            },
            {
              "end": {
                "col": 15,
                "line": 13,
                "offset": 210
              },
              "start": {
                "col": 9,
                "line": 12,
                "offset": 189
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "void foo() {\n //ERROR:\n    foo(1,2);\n\n //ERROR:\n foo(1,\n     2);\n\n //ERROR:\n foo (1, // comment\n      2);\n\n foo(2,1);\n}\n\n\n",
          "code_path": "cpp/concrete_syntax.cpp",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 35
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 63
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 49
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 104
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 77
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.cpp",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.cpp",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.cpp",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "void foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n\n",
          "code_path": "cpp/metavar_arg.cpp",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 38
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 99
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 58
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 155
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 191
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 175
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.cpp",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "void foo() {\n    x = 1;\n    //ERROR:\n    if (x > 2)\n        foo();\n}\n\n",
          "code_path": "cpp/metavar_cond.cpp",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 5,
                "offset": 66
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "void foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n",
          "code_path": "cpp/metavar_call.cpp",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 38
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.cpp",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.cpp",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.cpp",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "void foo() {\n    v = 1;\n    //ERROR:\n    if (v > 2)\n        return 1;\n}\n\n",
          "code_path": "cpp/metavar_stmt.cpp",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.cpp",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.cpp",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.cpp",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "void foo() {\n    //ERROR: match\n    char path = \"/location/1\";\n}\n\n",
          "code_path": "cpp/regexp_string.cpp",
          "highlights": [
            {
              "end": {
                "col": 30,
                "line": 3,
                "offset": 61
              },
              "start": {
                "col": 10,
                "line": 3,
                "offset": 41
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "void test_equal() {\n    a = 1;\n    b = 2;\n    //ERROR: match\n    if (a+b == a+b)\n        return 1;\n    return 0;\n}\n\n",
          "code_path": "cpp/metavar_equality_expr.cpp",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 79
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 69
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "void foo() {\n    //ERROR:\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n    }\n}\n\n\n\n",
          "code_path": "cpp/metavar_equality_stmt.cpp",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 9,
                "offset": 121
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "void foo() {\n  //ERROR:\n    myfile = open();\n    close(myfile);\n}\n\n\n\n",
          "code_path": "cpp/metavar_equality_var.cpp",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "void foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n\n",
          "code_path": "cpp/dots_args.cpp",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 65
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 59
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.cpp",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.cpp",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "void foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n\n\n",
          "code_path": "cpp/dots_stmts.cpp",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 7,
                "offset": 107
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 31
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "void foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n}\n\n",
          "code_path": "cpp/dots_string.cpp",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "csharp": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        int x = 13;\n        //ERROR:\n        Console.WriteLine(x + 12 + x);\n    }\n}\n",
          "code_path": "csharp/deep_expr_operator.cs",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 7,
                "offset": 130
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 101
              }
            },
            {
              "end": {
                "col": 33,
                "line": 7,
                "offset": 125
              },
              "start": {
                "col": 27,
                "line": 7,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 37,
                "line": 7,
                "offset": 129
              },
              "start": {
                "col": 27,
                "line": 7,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 33,
                "line": 7,
                "offset": 125
              },
              "start": {
                "col": 31,
                "line": 7,
                "offset": 123
              }
            }
          ],
          "pattern": "<... 12 ...>",
          "pattern_path": "csharp/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "using System;\n\nclass HelloWorldFuncCall\n{\n    public static string Test()\n    {\n        //ERROR:\n        foo();\n        bar();\n\n        //ERROR:\n        foo();\n        Console.WriteLine(bar());\n\n        //ERROR:\n        foo();\n        var x = bar();\n\n\t//ERROR:\n        foo();\n\treturn bar();\n    }\n\n    private static string bar()\n    {\n        return \"hello world\";\n    }\n}\n",
          "code_path": "csharp/deep_exprstmt.cs",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 9,
                "offset": 126
              },
              "start": {
                "col": 9,
                "line": 8,
                "offset": 105
              }
            },
            {
              "end": {
                "col": 34,
                "line": 13,
                "offset": 193
              },
              "start": {
                "col": 9,
                "line": 12,
                "offset": 153
              }
            },
            {
              "end": {
                "col": 22,
                "line": 17,
                "offset": 248
              },
              "start": {
                "col": 9,
                "line": 16,
                "offset": 220
              }
            },
            {
              "end": {
                "col": 15,
                "line": 21,
                "offset": 290
              },
              "start": {
                "col": 9,
                "line": 20,
                "offset": 269
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "public class ConcreteSyntax\n{\n    public static void Main()\n    {\n        // ERROR:\n        Foo(1, 2);\n\n        // ERROR:\n        Foo(1,\n            2);\n\n        // ERROR:\n        Foo(1, // comment\n            2);\n\n        Foo(2, 1);\n\n        Foo(1, 2, 3);\n    }\n\n    private static void Foo(int a, int b, int c = 3)\n    {\n    }\n}",
          "code_path": "csharp/concrete_syntax.cs",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 6,
                "offset": 101
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 92
              }
            },
            {
              "end": {
                "col": 15,
                "line": 10,
                "offset": 151
              },
              "start": {
                "col": 9,
                "line": 9,
                "offset": 130
              }
            },
            {
              "end": {
                "col": 15,
                "line": 14,
                "offset": 212
              },
              "start": {
                "col": 9,
                "line": 13,
                "offset": 180
              }
            }
          ],
          "pattern": "Foo(1, 2)",
          "pattern_path": "csharp/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        String x = \"world\";\n        //ERROR:\n        Console.WriteLine(x);\n    }\n}\n",
          "code_path": "csharp/equivalence_constant_propagation.cs",
          "highlights": [
            {
              "end": {
                "col": 30,
                "line": 7,
                "offset": 130
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 109
              }
            }
          ],
          "pattern": "Console.WriteLine(\"world\");",
          "pattern_path": "csharp/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.cs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": "// ERROR:\n[Serializable]\npublic class Test {\n}",
          "code_path": "csharp/metavar_anno.cs",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 4,
                "offset": 46
              },
              "start": {
                "col": 2,
                "line": 2,
                "offset": 11
              }
            }
          ],
          "pattern": "[$ANNO]\nclass $CLASS{ ... }",
          "pattern_path": "csharp/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "public class MetaVar\n{\n    public static void Main()\n    {\n        // ERROR:\n        Foo(1, 2);\n\n        // ERROR:\n        Foo(int.MaxValue,\n            2);\n\n        // ERROR:\n        Foo(int.Parse(\"3\"), // comment\n            2);\n\n        // ERROR:\n        Foo(Bar(1, 3), 2);\n\n\t// OK:\n        Foo(2, 1);\n\n\t// OK:\n\tFoo(1, 2, 3);\n    }\n}\n",
          "code_path": "csharp/metavar_arg.cs",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 6,
                "offset": 94
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 85
              }
            },
            {
              "end": {
                "col": 15,
                "line": 10,
                "offset": 155
              },
              "start": {
                "col": 9,
                "line": 9,
                "offset": 123
              }
            },
            {
              "end": {
                "col": 15,
                "line": 14,
                "offset": 229
              },
              "start": {
                "col": 9,
                "line": 13,
                "offset": 184
              }
            },
            {
              "end": {
                "col": 26,
                "line": 17,
                "offset": 275
              },
              "start": {
                "col": 9,
                "line": 17,
                "offset": 258
              }
            }
          ],
          "pattern": "Foo($X, 2)\n",
          "pattern_path": "csharp/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "// ERROR:\nclass Foo {\n}\n\ninterface Foo {\n}\n\nnamespace Foo {\n}\n",
          "code_path": "csharp/metavar_class_def.cs",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 3,
                "offset": 23
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            }
          ],
          "pattern": "class $KLASS {}",
          "pattern_path": "csharp/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        //ERROR:\n        if (x == some_cond)\n            Console.WriteLine(\"matched\");\n        else\n            Console.WriteLine(\"not matched\");\n    }\n}\n",
          "code_path": "csharp/metavar_cond.cs",
          "highlights": [
            {
              "end": {
                "col": 46,
                "line": 9,
                "offset": 201
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "if ($COND) { ... }\n",
          "pattern_path": "csharp/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "public class Test\n{\n    public static int Test()\n    {\n        // ERROR:\n        Foo(1, 2);\n        return 1;\n    }\n}\n",
          "code_path": "csharp/metavar_call.cs",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 6,
                "offset": 90
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "public class Test\n{\n    // ERROR:\n    public static int Test()\n    {\n        Foo(1, 2);\n        return 1;\n    }\n\n    // ERROR:\n    int Test2() {\n        return 1;\n    }\n\n    // ERROR:\n    public static void Main()\n    {\n        Foo(1, 2);\n        return 1;\n    }\n}\n",
          "code_path": "csharp/metavar_func_def.cs",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 8,
                "offset": 111
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 38
              }
            },
            {
              "end": {
                "col": 6,
                "line": 13,
                "offset": 168
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 131
              }
            },
            {
              "end": {
                "col": 6,
                "line": 20,
                "offset": 262
              },
              "start": {
                "col": 5,
                "line": 16,
                "offset": 188
              }
            }
          ],
          "pattern": "$RETURNTYPE $FUNC(...) {...}",
          "pattern_path": "csharp/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "// ERROR:\nusing System;\n// ERROR:\nusing System.IO;\n\nclass Test {}",
          "code_path": "csharp/metavar_import.cs",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 2,
                "offset": 23
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 17,
                "line": 4,
                "offset": 50
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 34
              }
            }
          ],
          "pattern": "using $X;",
          "pattern_path": "csharp/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "class Test \n{\n    public static void Main()\n    {\n        // OK:\n        Foo(42, \"baz\");\n\n        // ERROR:\n        Foo(bar: 42, baz: \"baz\");\n        // ERROR:\n        Foo(baz: \"baz\", bar: 42);\n    }\n}",
          "code_path": "csharp/metavar_key_value.cs",
          "highlights": [
            {
              "end": {
                "col": 34,
                "line": 9,
                "offset": 141
              },
              "start": {
                "col": 9,
                "line": 9,
                "offset": 116
              }
            },
            {
              "end": {
                "col": 34,
                "line": 11,
                "offset": 193
              },
              "start": {
                "col": 9,
                "line": 11,
                "offset": 168
              }
            }
          ],
          "pattern": "Foo(..., bar: 42, ...);",
          "pattern_path": "csharp/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        //ERROR:\n        if (true)\n            Console.WriteLine(\"same\");\n    }\n}\n",
          "code_path": "csharp/metavar_stmt.cs",
          "highlights": [
            {
              "end": {
                "col": 39,
                "line": 7,
                "offset": 129
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "if ($E) {\n    $S;\n}\n",
          "pattern_path": "csharp/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.cs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": "public class Foo {\n    public static void main() {\n        String x;\n        String y;\n        int a;\n        int b;\n        //ERROR: match\n        if (x == y) x = y;\n        if (a == b) a = b;\n   }\n}\n",
          "code_path": "csharp/metavar_typed.cs",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 8,
                "offset": 158
              },
              "start": {
                "col": 13,
                "line": 8,
                "offset": 152
              }
            }
          ],
          "pattern": "$X == (String $Y)\n",
          "pattern_path": "csharp/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.cs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.cs",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        //ERROR:\n        if (1+2 == 1+2)\n            Console.WriteLine(\"matched\");\n        else\n            Console.WriteLine(\"not matched\");\n    }\n}\n",
          "code_path": "csharp/metavar_equality_expr.cs",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 6,
                "offset": 95
              },
              "start": {
                "col": 13,
                "line": 6,
                "offset": 85
              }
            }
          ],
          "pattern": "$X == $X\n",
          "pattern_path": "csharp/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        //ERROR:\n        if (true)\n            Console.WriteLine(\"same\");\n        else\n            Console.WriteLine(\"same\");\n    }\n}\n",
          "code_path": "csharp/metavar_equality_stmt.cs",
          "highlights": [
            {
              "end": {
                "col": 39,
                "line": 9,
                "offset": 181
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "if ($E) {\n    $S;\n} else {\n    $S;\n}\n",
          "pattern_path": "csharp/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        // ERROR:\n        myFile = Open();\n        Close(myFile);\n    }\n}\n",
          "code_path": "csharp/metavar_equality_var.cs",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 7,
                "offset": 121
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 82
              }
            }
          ],
          "pattern": "$V = Open();\nClose($V);\n\n",
          "pattern_path": "csharp/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        // ERROR:\n        Foo(1, 2, 3, 4, 5);\n        // ERROR:\n        Foo(5);\n    }\n}\n",
          "code_path": "csharp/dots_args.cs",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 6,
                "offset": 100
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 82
              }
            },
            {
              "end": {
                "col": 15,
                "line": 8,
                "offset": 134
              },
              "start": {
                "col": 9,
                "line": 8,
                "offset": 128
              }
            }
          ],
          "pattern": "Foo(..., 5)\n",
          "pattern_path": "csharp/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "class Foo {\n\n  void test() {\n\n    //ERROR: match\n    f = this.foo().m().h().bar().z();\n\n    //ERROR: match\n    f = this.foo().bar();\n\n    f = this.foo().m().h().z();\n\n    //ERROR: match $O can match o.before()\n    f = this.before().foo().m().h().bar().z();\n  }\n}\n\n",
          "code_path": "csharp/dots_method_chaining.cs",
          "highlights": [
            {
              "end": {
                "col": 37,
                "line": 6,
                "offset": 85
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 53
              }
            },
            {
              "end": {
                "col": 25,
                "line": 9,
                "offset": 131
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 111
              }
            },
            {
              "end": {
                "col": 46,
                "line": 14,
                "offset": 255
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 214
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        //ERROR:\n        if (x == some_cond)\n            Console.WriteLine(\"matched\");\n        else\n            Console.WriteLine(\"not matched\");\n    }\n}\n",
          "code_path": "csharp/dots_nested_stmts.cs",
          "highlights": [
            {
              "end": {
                "col": 46,
                "line": 9,
                "offset": 201
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "if (...)\n{\n    ...\n}\n",
          "pattern_path": "csharp/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "public class Test\n{\n    public static void Test()\n    {\n        //ERROR:\n        userData = Get();\n        Console.WriteLine(\"do stuff\");\n        FooBar();\n        Eval(userData);\n        FooBar();\n    }\n}\n",
          "code_path": "csharp/dots_stmts.cs",
          "highlights": [
            {
              "end": {
                "col": 24,
                "line": 9,
                "offset": 179
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "$X = Get();\n...\nEval($X);\n",
          "pattern_path": "csharp/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "public static void Bar(input) {\n    //ERROR:\n    Foo(\"whatever sequence of chars\");\n\n    //OK:\n    Foo(\"not a constant string: \" + input);\n}\n\n",
          "code_path": "csharp/dots_string.cs",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 82
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 49
              }
            }
          ],
          "pattern": "Foo(\"...\")\n",
          "pattern_path": "csharp/dots_string.sgrep"
        }
      ]
    }
  },
  "dockerfile": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.dockerfile",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.dockerfile",
          "highlights": [],
          "pattern": "foo\nbar\n",
          "pattern_path": "dockerfile/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "# ERROR:\nFROM ubuntu\nRUN echo hello\n\nFROM debian\nRUN echo hello\n\n# ERROR:\nFROM ubuntu:testing\nRUN echo hello\n",
          "code_path": "dockerfile/concrete_syntax.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 3,
                "offset": 35
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 15,
                "line": 10,
                "offset": 108
              },
              "start": {
                "col": 1,
                "line": 9,
                "offset": 74
              }
            }
          ],
          "pattern": "FROM ubuntu\nRUN echo hello\n",
          "pattern_path": "dockerfile/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.dockerfile",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.dockerfile",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.dockerfile",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "# ERROR:\nRUN foo 1 2\n\n# ERROR:\nRUN foo \"$(date)\" 2\n\nRUN foo 2\n",
          "code_path": "dockerfile/metavar_arg.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 12,
                "line": 2,
                "offset": 20
              },
              "start": {
                "col": 5,
                "line": 2,
                "offset": 13
              }
            },
            {
              "end": {
                "col": 20,
                "line": 5,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 35
              }
            }
          ],
          "pattern": "foo $X 2\n",
          "pattern_path": "dockerfile/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.dockerfile",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.dockerfile",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "# ERROR:\nRUN something foo bar\n\n# ERROR:\nCMD \"$thing\" foo bar\n",
          "code_path": "dockerfile/metavar_call.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 2,
                "offset": 30
              },
              "start": {
                "col": 5,
                "line": 2,
                "offset": 13
              }
            },
            {
              "end": {
                "col": 21,
                "line": 5,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 45
              }
            }
          ],
          "pattern": "$CMD foo bar\n",
          "pattern_path": "dockerfile/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.dockerfile",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.dockerfile",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.dockerfile",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.dockerfile",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.dockerfile",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.dockerfile",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.dockerfile",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.dockerfile",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.dockerfile",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.dockerfile",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "# ERROR:\nRUN out='' && touch \"$out\"\n",
          "code_path": "dockerfile/metavar_equality_var.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 2,
                "offset": 35
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "RUN $FILE='' && touch \"${$FILE}\"\n",
          "pattern_path": "dockerfile/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "RUN foo\n\n# ERROR:\nRUN foo 5\n\n# ERROR:\nRUN foo 1 2 3 4 5\n\nRUN foo 5 6\n",
          "code_path": "dockerfile/dots_args.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 27
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 22
              }
            },
            {
              "end": {
                "col": 18,
                "line": 7,
                "offset": 55
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 42
              }
            }
          ],
          "pattern": "foo ... 5\n",
          "pattern_path": "dockerfile/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.dockerfile",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "# MATCH:\nRUN if [[ -e foo ]]; then \\\n      echo \"foo exists\"; \\\n    else \\\n      echo \"error: foo is missing\"; \\\n      exit 1; \\\n    fi\n",
          "code_path": "dockerfile/dots_nested_stmts.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 7,
                "line": 6,
                "offset": 119
              },
              "start": {
                "col": 5,
                "line": 2,
                "offset": 13
              }
            }
          ],
          "pattern": "if ...; then\n  ...\nelse\n  ...\nfi\n",
          "pattern_path": "dockerfile/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "# ERROR:\nFROM debian:testing\nRUN echo hello\nRUN apt-get update && apt-get install -y fortune\n",
          "code_path": "dockerfile/dots_stmts.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 49,
                "line": 4,
                "offset": 92
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "FROM debian\n...\nRUN apt-get ...\n",
          "pattern_path": "dockerfile/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "# simple strings\nRUN foo bar\nRUN foo \"bar\"\nRUN foo 'bar'\n\n# string made of multiple fragments\n# ERROR:\nRUN foo \"${HOME}/bar\"\n",
          "code_path": "dockerfile/dots_string.dockerfile",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 8,
                "offset": 124
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 107
              }
            }
          ],
          "pattern": "foo \"...\"\n",
          "pattern_path": "dockerfile/dots_string.sgrep"
        }
      ]
    }
  },
  "elixir": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "def foo do\n    # ERROR:\n    foo(bar(42 + 1))\nend\n",
          "code_path": "elixir/deep_expr_operator.ex",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 3,
                "offset": 44
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "def foo do\n    #ERROR: match\n    foo()\n    bar()\n    #ERROR: match\n    foo()\n    x = bar()\n    #ERROR: match\n    foo()\n    print(bar())\n    #ERROR: match\n    foo()\n    return bar()\nend\n",
          "code_path": "elixir/deep_exprstmt.ex",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 48
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 33
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 90
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 71
              }
            },
            {
              "end": {
                "col": 17,
                "line": 10,
                "offset": 135
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 113
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 180
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 158
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "def test do\n  #ERROR:\n  foo(1,2)\n\n  #ERROR:\n  foo(1,\n      2)\n\n  #ERROR:\n  foo(1, # comment\n      2)\n\n  foo(2,1)\nend\n",
          "code_path": "elixir/concrete_syntax.ex",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 3,
                "offset": 32
              },
              "start": {
                "col": 3,
                "line": 3,
                "offset": 24
              }
            },
            {
              "end": {
                "col": 9,
                "line": 7,
                "offset": 61
              },
              "start": {
                "col": 3,
                "line": 6,
                "offset": 46
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 100
              },
              "start": {
                "col": 3,
                "line": 10,
                "offset": 75
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.ex",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.ex",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.ex",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "def foo() do\n    #ERROR:\n    foo(1,2)\n\n    #ERROR:\n    foo(a_very_long_constant_name,\n        2)\n\n    #ERROR:\n    foo(unsafe(), # indeed\n         2)\n\n    #ERROR:\n    foo(bar(1,3), 2)\n\n    foo(2,1)\nend\n\n",
          "code_path": "elixir/metavar_arg.ex",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 96
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 55
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 148
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 114
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 182
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 166
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.ex",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.ex",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "def foo() do\n    #ERROR:\n    foo(1,2)\n\n    return 1\nend\n\n\n\n",
          "code_path": "elixir/metavar_call.ex",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.ex",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.ex",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.ex",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.ex",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.ex",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.ex",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.ex",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.ex",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.ex",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.ex",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "def foo() do\n  #ERROR:\n    myfile = open()\n    close(myfile)\nend\n\n\n\n\n",
          "code_path": "elixir/metavar_equality_var.ex",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 60
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "def foo() do\n  #ERROR:\n    foo(1,2,3,4,5)\n  #ERROR:\n    foo(5)\nend\n",
          "code_path": "elixir/dots_args.ex",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 41
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 62
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 56
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.ex",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.ex",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "def foo() do\n\n    #ERROR:\n    user_data = get()\n    print(\"do stuff\")\n    foobar()\n    eval(user_data)\nend\n",
          "code_path": "elixir/dots_stmts.ex",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 102
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 30
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "def foo() do\n    #ERROR:\n    foo(\"whatever sequence of chars\")\n    #actually charlist are quite different from strings in Elixir, so no match here\n    foo('whatever sequence of chars')\nend",
          "code_path": "elixir/dots_string.ex",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 62
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "generic": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.generic",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.generic",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "// Generic mode sees words, punctuation, and indented blocks.\nclass Foo {\n  void foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(1,\n        2);  // whitespace is ignored.\n\n    foo (1,  // comments aren't ignored :-(\n         2);\n\n    foo (1,\n  2);  // nonsensical indentation.\n\n    //ERROR:\n    foo (1,\n    2);  // acceptable indentation.\n\n    foo(2,1);\n  }\n}\n",
          "code_path": "generic/concrete_syntax.generic",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 114
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 106
              }
            },
            {
              "end": {
                "col": 11,
                "line": 9,
                "offset": 151
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 134
              }
            },
            {
              "end": {
                "col": 7,
                "line": 19,
                "offset": 318
              },
              "start": {
                "col": 5,
                "line": 18,
                "offset": 304
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.generic",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.generic",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.generic",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.generic",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.generic",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.generic",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "class Foo {\n  void foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    Bar.Baz(\n     1,\n     2\n    );\n\n    return 1;\n  }\n}\n",
          "code_path": "generic/metavar_call.generic",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 52
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 44
              }
            },
            {
              "end": {
                "col": 6,
                "line": 10,
                "offset": 101
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 76
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.generic",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.generic",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.generic",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "class Foo {\n  void foo() {\n    v = 1;\n\n    //ERROR:\n    if (v > 2)\n      return 1;\n\n    //ERROR:\n    if (v > 2)\n      x++;\n\n    // If the pattern contains an indented block, it must match an indented\n    // block in the program. Usually, indentation in the pattern is\n    // best avoided.\n    //\n    if (v > 2) return 1;\n\n    // Another tricky case that doesn't match. This is due to indentation\n    // in the pattern after the closing parenthesis ')', but no indentation\n    // in the program between ')' and '{'.\n    //\n    if (v > 2) {\n      x++;\n    }\n\n    return 0;\n  }\n}\n",
          "code_path": "generic/metavar_stmt.generic",
          "highlights": [
            {
              "end": {
                "col": 16,
                "line": 7,
                "offset": 82
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 11,
                "line": 11,
                "offset": 122
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 101
              }
            }
          ],
          "pattern": "if ($X > $Y)\n  ...;\n",
          "pattern_path": "generic/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.generic",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.generic",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.generic",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.generic",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.generic",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.generic",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "class Foo {\n  void foo() {\n    //ERROR:\n    myfile = open();\n    try {\n      foo(myfile);\n    }\n    finally {\n      close(myfile);\n    }\n  }\n}\n",
          "code_path": "generic/metavar_equality_var.generic",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 9,
                "offset": 130
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 44
              }
            }
          ],
          "pattern": "$V = open();\n...\nclose($V);\n",
          "pattern_path": "generic/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "class Foo {\n  void bar() {\n    //ERROR:\n    foo(1,2,3,4,5);\n\n    //ERROR:\n    foo ( 5 );\n\n    //ERROR:\n    foo(\"5\");  // this matches too.\n\n    //ERROR:\n    foo(5, \")\");  // quoted strings are not understood.\n\n    //ERROR:\n    foo(5.5);  // '.' is generic punctuation.\n\n    foo(55);  // '55' is a single word of the form [A-Za-z0-9_]+\n\n    /*\n       Matching nested parentheses requires an indented pattern:\n\n       Do:\n           foo(\n             ...\n           )\n\n       Don't:\n\n           foo(...)\n    */\n\n    //ERROR:\n    foo(bar(baz(5)));\n\n    //ERROR:\n    foo(\n      bar(\n        baz(5)\n      )\n    );\n\n    foo(\n      5\n      );  // strange indentation fails to match indentation in the pattern.\n\n    // Dots ('...') can match at most 10 lines.\n    // Use '... ...' to match up to 20 lines.\n    foo(\n     5,\n     6,\n     7,\n     8,\n     9,\n     10,\n     11,\n     12,\n     13,\n     14,\n     15,\n     16,\n     17\n    );\n  }\n}\n",
          "code_path": "generic/dots_args.generic",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 58
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 44
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 87
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 78
              }
            },
            {
              "end": {
                "col": 13,
                "line": 10,
                "offset": 115
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 107
              }
            },
            {
              "end": {
                "col": 14,
                "line": 13,
                "offset": 166
              },
              "start": {
                "col": 5,
                "line": 13,
                "offset": 157
              }
            },
            {
              "end": {
                "col": 13,
                "line": 16,
                "offset": 235
              },
              "start": {
                "col": 5,
                "line": 16,
                "offset": 227
              }
            },
            {
              "end": {
                "col": 21,
                "line": 34,
                "offset": 543
              },
              "start": {
                "col": 5,
                "line": 34,
                "offset": 527
              }
            },
            {
              "end": {
                "col": 6,
                "line": 41,
                "offset": 607
              },
              "start": {
                "col": 5,
                "line": 37,
                "offset": 563
              }
            },
            {
              "end": {
                "col": 6,
                "line": 63,
                "offset": 923
              },
              "start": {
                "col": 5,
                "line": 49,
                "offset": 802
              }
            }
          ],
          "pattern": "foo(\n  ... 5 ...\n)\n",
          "pattern_path": "generic/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.generic",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.generic",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "class Foo {\n  void foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n  }\n}\n\n",
          "code_path": "generic/dots_stmts.generic",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 8,
                "offset": 121
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 45
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "class Foo {\n  void bar () {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n\n    //ERROR:\n    foo(\"abc\", \"def\");  // generic mode doesn't understand strings.\n\n    //ERROR:\n    foo(\"hello \\\"world\\\"\");\n\n    foo(\"broken);\n  }\n}\n",
          "code_path": "generic/dots_string.generic",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 4,
                "offset": 78
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 45
              }
            },
            {
              "end": {
                "col": 22,
                "line": 7,
                "offset": 115
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 98
              }
            },
            {
              "end": {
                "col": 27,
                "line": 10,
                "offset": 202
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 180
              }
            }
          ],
          "pattern": "foo(\n  \"...\"\n)\n",
          "pattern_path": "generic/dots_string.sgrep"
        }
      ]
    }
  },
  "go": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "package Foo\n\nfunc bar() {\n\tbaz := 0\n\t//ERROR: match\n\tfoo(baz + 42)\n}\n",
          "code_path": "go/deep_expr_operator.go",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 6,
                "offset": 66
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 53
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "package Foo\n\nfunc foo() {\n\t//ERROR: match\n        foo()\n\tbar()\n\t//ERROR: match\n        foo()\n\tx = bar()\n\t//ERROR: match\n        foo()\n\tfoo2(bar())\n\t//ERROR: match\n        foo()\n\treturn bar()\n}\n",
          "code_path": "go/deep_exprstmt.go",
          "highlights": [
            {
              "end": {
                "col": 7,
                "line": 6,
                "offset": 62
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 50
              }
            },
            {
              "end": {
                "col": 11,
                "line": 9,
                "offset": 103
              },
              "start": {
                "col": 9,
                "line": 8,
                "offset": 87
              }
            },
            {
              "end": {
                "col": 13,
                "line": 12,
                "offset": 146
              },
              "start": {
                "col": 9,
                "line": 11,
                "offset": 128
              }
            },
            {
              "end": {
                "col": 14,
                "line": 15,
                "offset": 190
              },
              "start": {
                "col": 9,
                "line": 14,
                "offset": 171
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "package Foo\n\nfunc foo() {\n    //ERROR:\n    foo(1,2);\n    \n    //ERROR:\n    foo(1,\n        2);\n    \n    //ERROR:\n    foo (1, // comment\n         2)\n    \n    foo(2,1)\n    \n}\n\n",
          "code_path": "go/concrete_syntax.go",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            },
            {
              "end": {
                "col": 11,
                "line": 9,
                "offset": 92
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 75
              }
            },
            {
              "end": {
                "col": 12,
                "line": 13,
                "offset": 146
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 116
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "package Foo\n\nconst Bar = \"password\"\n\nfunc foo() {\n     //ERROR: match!\n     dangerous1(\"password\");\n\n     //ERROR: match!\n     dangerous2(Bar);\n}\n",
          "code_path": "go/equivalence_constant_propagation.go",
          "highlights": [
            {
              "end": {
                "col": 28,
                "line": 7,
                "offset": 98
              },
              "start": {
                "col": 6,
                "line": 7,
                "offset": 76
              }
            },
            {
              "end": {
                "col": 21,
                "line": 10,
                "offset": 142
              },
              "start": {
                "col": 6,
                "line": 10,
                "offset": 127
              }
            }
          ],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": "package Foo\n\nimport \"a/subprocess\"\n\nimport sub \"subprocess\"\n\nfunc foo() {\n  //ERROR:\n  result = subprocess.open(\"ls\")\n  //ERROR:\n  result = sub.open(\"ls\")\n\n  result = sub.not_open(\"ls\")\n\n}",
          "code_path": "go/equivalence_naming_import.go",
          "highlights": [
            {
              "end": {
                "col": 33,
                "line": 9,
                "offset": 117
              },
              "start": {
                "col": 12,
                "line": 9,
                "offset": 96
              }
            },
            {
              "end": {
                "col": 26,
                "line": 11,
                "offset": 154
              },
              "start": {
                "col": 12,
                "line": 11,
                "offset": 140
              }
            }
          ],
          "pattern": "subprocess.open(...)",
          "pattern_path": "go/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Argument": [
        {
          "code": "package Foo\n\nfunc bar() {\n    //ERROR:\n    foo(1,2)\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2)\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2)\n\n    //ERROR:\n    foo(bar(1,3), 2)\n\n    foo(2,1)\n}\n\n\n",
          "code_path": "go/metavar_arg.go",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            },
            {
              "end": {
                "col": 11,
                "line": 9,
                "offset": 111
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 70
              }
            },
            {
              "end": {
                "col": 12,
                "line": 13,
                "offset": 166
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 130
              }
            },
            {
              "end": {
                "col": 21,
                "line": 16,
                "offset": 201
              },
              "start": {
                "col": 5,
                "line": 16,
                "offset": 185
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "package Foo\n\nfunc foo() {\n    x = 1\n    //ERROR:\n    if (x > 2) {\n        foo()\n    }\n}\n",
          "code_path": "go/metavar_cond.go",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 8,
                "offset": 85
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 53
              }
            }
          ],
          "pattern": "if ($E) { \n  foo() \n}",
          "pattern_path": "go/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "package Foo\n\nfunc foo() {\n    //ERROR:\n    foo(1,2)\n\n    return 1\n}\n\n\n\n",
          "code_path": "go/metavar_call.go",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "package Foo\n\n// ERROR:\nfunc foo() {\n    foo (1,2)\n}\n\n// ERROR:\nfunc bar(bar1, bar2, bar3) {\n    return 1\n}\n\n// ERROR:\nfunc foobar(bar1) int {\n    bar(1, 2, 3)\n    foo()\n    return 2\n}\n",
          "code_path": "go/metavar_func_def.go",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 6,
                "offset": 51
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 23
              }
            },
            {
              "end": {
                "col": 2,
                "line": 11,
                "offset": 106
              },
              "start": {
                "col": 1,
                "line": 9,
                "offset": 63
              }
            },
            {
              "end": {
                "col": 2,
                "line": 18,
                "offset": 183
              },
              "start": {
                "col": 1,
                "line": 14,
                "offset": 118
              }
            }
          ],
          "pattern": "func $X(...) {\n    ...\n}\n",
          "pattern_path": "go/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.go",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "package Foo \n\nfunc foo() {\n    // ERROR:\n    foo = config {\n        key: value,\n        key2: value2,\n        key3: value3\n    }\n\n    bar = config2 {\n        key: value,\n    }\n}\n",
          "code_path": "go/metavar_key_value.go",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 9,
                "offset": 128
              },
              "start": {
                "col": 11,
                "line": 5,
                "offset": 51
              }
            }
          ],
          "pattern": "config{..., $KEY:$VALUE, ...}\n",
          "pattern_path": "go/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "package Foo\n\nfunc bar() {\n\tvar a = 1\n\tvar b = 2\n\tvar c = 3\n\t//ERROR:\n\tif a > b {\n\t\tc = 0\n\t}\n}\n",
          "code_path": "go/metavar_stmt.go",
          "highlights": [
            {
              "end": {
                "col": 3,
                "line": 10,
                "offset": 91
              },
              "start": {
                "col": 2,
                "line": 8,
                "offset": 70
              }
            }
          ],
          "pattern": "if ($X > $Y) {\n   $S;\n}",
          "pattern_path": "go/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.go",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": "package Foo\n\nfunc main() {\n    var x string\n    var y string\n    var a int\n    var b int\n    //ERROR:\n    if x == y {\n       x = y\n    }\n    if a == b {\n       a = b\n    }\n}\n",
          "code_path": "go/metavar_typed.go",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 9,
                "offset": 115
              },
              "start": {
                "col": 8,
                "line": 9,
                "offset": 109
              }
            }
          ],
          "pattern": "$X == ($Y : string)",
          "pattern_path": "go/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.go",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "package Foo\n\nfunc foo() {\n\t//ERROR: match\n\tvar path = \"/location/1\"\n\tvar d1 = \"notamatch\"\n}\n",
          "code_path": "go/regexp_string.go",
          "highlights": [
            {
              "end": {
                "col": 26,
                "line": 5,
                "offset": 67
              },
              "start": {
                "col": 6,
                "line": 5,
                "offset": 47
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "package Foo\n\nfunc test_equal() {\n    a = 1\n    b = 2\n    //ERROR: match\n    if (a+b == a+b) {\n        return 1\n    }\n    return 0\n}\n",
          "code_path": "go/metavar_equality_expr.go",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 7,
                "offset": 90
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 80
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\t//ERROR:\n\tif x > 2 {\n\t\tfmt.Println(\"hello world\")\n\t} else {\n\t\tfmt.Println(\"hello world\")\n\t}\n\n\tif x > 2 {\n\t\tfmt.Println(\"hello world\")\n\t} else {\n\t\tfmt.Println(\"goodbye world\")\n\t}\n}\n",
          "code_path": "go/metavar_equality_stmt.go",
          "highlights": [
            {
              "end": {
                "col": 3,
                "line": 11,
                "offset": 134
              },
              "start": {
                "col": 2,
                "line": 7,
                "offset": 53
              }
            }
          ],
          "pattern": "if $E {\n  $S;\n} else {\n  $S;\n}\n",
          "pattern_path": "go/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "package Foo\n\nfunc foo() {\n   //ERROR:\n    myfile = open()\n    close(myfile)\n}\n",
          "code_path": "go/metavar_equality_var.go",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 6,
                "offset": 75
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 42
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "package Foo\n\nfunc bar() {\n    //ERROR:\n    foo(1,2,3,4,5)\n    //ERROR:\n    foo(5)\n}\n\n\n\n",
          "code_path": "go/dots_args.go",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 57
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 81
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 75
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "func foo() {\n    \n  //ERROR: match\n  f = o.foo().m().h().bar().z()\n\n  //ERROR: match\n  f = o.foo().bar()\n\n  // this one does not contain the bar()\n  f = o.foo().m().h().z()\n\n  //ERROR: match $O can match o.before()\n  f = o.before().foo().m().h().bar().z()\n\n}\n",
          "code_path": "go/dots_method_chaining.go",
          "highlights": [
            {
              "end": {
                "col": 32,
                "line": 4,
                "offset": 66
              },
              "start": {
                "col": 3,
                "line": 4,
                "offset": 37
              }
            },
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 104
              },
              "start": {
                "col": 3,
                "line": 7,
                "offset": 87
              }
            },
            {
              "end": {
                "col": 41,
                "line": 13,
                "offset": 255
              },
              "start": {
                "col": 3,
                "line": 13,
                "offset": 217
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "package foo\n\nfunc foo() {\n     //ERROR: match\n     if 1 {\n        return 1\n     }\n}\n",
          "code_path": "go/dots_nested_stmts.go",
          "highlights": [
            {
              "end": {
                "col": 7,
                "line": 7,
                "offset": 81
              },
              "start": {
                "col": 6,
                "line": 5,
                "offset": 51
              }
            }
          ],
          "pattern": "if $E {\n  ...\n}",
          "pattern_path": "go/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "package Foo\n\nfunc foo() {\n    //ERROR:\n    user_data = get()\n    print(\"do stuff\")\n    foobar()\n    eval(user_data)\n    foobar()\n}\n",
          "code_path": "go/dots_stmts.go",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 8,
                "offset": 115
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            }
          ],
          "pattern": "$X = get()\n...\neval($X)",
          "pattern_path": "go/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "package Foo\n\nfunc bar () {\n    //ERROR:\n    foo(\"whatever sequence of chars\")\n}\n\n",
          "code_path": "go/dots_string.go",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 77
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 44
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "hack": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "//ERROR:\nfoo($bar + 42);\n",
          "code_path": "hack/deep_expr_operator.hack",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 2,
                "offset": 23
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "class Foo\n{\n    public function foo()\n    {\n        //ERROR: match\n        foo();\n        bar();\n        //ERROR: match\n        foo();\n        $x = bar();\n        //ERROR: match\n        foo();\n        foo2(bar());\n        //ERROR: match\n        foo();\n        return bar();\n    }\n}\n",
          "code_path": "hack/deep_exprstmt.hack",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 96
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 75
              }
            },
            {
              "end": {
                "col": 20,
                "line": 10,
                "offset": 154
              },
              "start": {
                "col": 9,
                "line": 9,
                "offset": 128
              }
            },
            {
              "end": {
                "col": 21,
                "line": 13,
                "offset": 213
              },
              "start": {
                "col": 9,
                "line": 12,
                "offset": 186
              }
            },
            {
              "end": {
                "col": 22,
                "line": 16,
                "offset": 273
              },
              "start": {
                "col": 9,
                "line": 15,
                "offset": 245
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "function foo()\n{\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(1,\n        2);\n\n    //ERROR:\n    foo (1, // comment\n        2);\n\n    foo (2,1);\n}\n",
          "code_path": "hack/concrete_syntax.hack",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 8,
                "offset": 79
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 11,
                "line": 12,
                "offset": 128
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 99
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.hack",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.hack",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.hack",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), //comment\n         2);\n\n    //ERROR:\n    foo(bar(1,3),  2);\n\n    foo(2,1);\n}\n",
          "code_path": "hack/metavar_arg.hack",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 103
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 159
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 123
              }
            },
            {
              "end": {
                "col": 22,
                "line": 14,
                "offset": 196
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 179
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "//ERROR:\nclass Foo\n{\n    public function member()\n    {\n        echo 'Member function';\n    }\n}\n",
          "code_path": "hack/metavar_class_def.hack",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 8,
                "offset": 95
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "function foo() {\n    $x = 1;\n    //ERROR:\n    if ($x > 2) {\n        foo();\n    }\n}\n",
          "code_path": "hack/metavar_cond.hack",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 6,
                "offset": 80
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 46
              }
            }
          ],
          "pattern": "if ($E) {\n   foo();\n}\n",
          "pattern_path": "hack/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n",
          "code_path": "hack/metavar_call.hack",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "//ERROR:\nfunction foo()\n{\n    return 'This is a function';\n}\n",
          "code_path": "hack/metavar_func_def.hack",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 5,
                "offset": 60
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "// ERROR:\nrequire \"a.hack\";\ninclude($dir.'/import.hack');\nrequire_once('blah');\ninclude_once \"d.hack\";\n",
          "code_path": "hack/metavar_import.hack",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 5,
                "offset": 102
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            }
          ],
          "pattern": "require $A;\ninclude $B;\nrequire_once $C;\ninclude_once $D;\n",
          "pattern_path": "hack/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.hack",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "function foo() {\n    $v = 1;\n    //ERROR:\n    if ($v > 2)\n        return 1;\n}\n",
          "code_path": "hack/metavar_stmt.hack",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 75
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 46
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.hack",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.hack",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.hack",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.hack",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "function foo() {\n    $a = 1;\n    $b = 2;\n    //ERROR:\n    if ($a + $b == $a + $b) {\n        return 1;\n    }\n    return 0;\n}\n",
          "code_path": "hack/metavar_equality_expr.hack",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 5,
                "offset": 80
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 62
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "function foo() {\n    //ERROR:\n    if ($x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if ($x > 2) {\n        foo();\n        bar();\n    }\n    else {\n        foo();\n    }\n}\n",
          "code_path": "hack/metavar_equality_stmt.hack",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 9,
                "offset": 126
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "function foo() {\n    //ERROR:\n    $myfile = open();\n    close($myfile);\n}\n",
          "code_path": "hack/metavar_equality_var.hack",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 4,
                "offset": 71
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2,3,4,5);\n    //ERROR:\n    foo(5);\n\n    $fun = 5;\n    //ERROR: \n    foo($test, $fun);\n\n    foo($not_this);\n}\n",
          "code_path": "hack/dots_args.hack",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 48
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 67
              }
            },
            {
              "end": {
                "col": 21,
                "line": 9,
                "offset": 124
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 108
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "// ERROR:\n$var->test1()->test2()->test3()->test_made();\n\n// ERROR:\n$var->test1()->test_made();\n\n$eof = <<<EOF\n// ERROR:\n{$var->$var->test1()->test_made()}\nEOF;\n\n$eof = <<<EOF\n// TODO: This should be a valid match but is not.\n{$var->test1()->test_made()}\nEOF;\n\n//ERROR: match, ellipsis can also match 0 elts\n$var->test_made();\n\n// ERROR:\n$var->test->test_made();\n\n$test->test1()->test_made();\n",
          "code_path": "hack/dots_method_chaining.hack",
          "highlights": [
            {
              "end": {
                "col": 45,
                "line": 2,
                "offset": 54
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 27,
                "line": 5,
                "offset": 93
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 67
              }
            },
            {
              "end": {
                "col": 34,
                "line": 9,
                "offset": 153
              },
              "start": {
                "col": 8,
                "line": 9,
                "offset": 127
              }
            },
            {
              "end": {
                "col": 18,
                "line": 18,
                "offset": 324
              },
              "start": {
                "col": 1,
                "line": 18,
                "offset": 307
              }
            },
            {
              "end": {
                "col": 24,
                "line": 21,
                "offset": 360
              },
              "start": {
                "col": 1,
                "line": 21,
                "offset": 337
              }
            }
          ],
          "pattern": "$var->{...}->test_made();\n",
          "pattern_path": "hack/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "function foo()\n{\n    $var = 10;\n    \n    if ($var === 42) {\n        echo('matched');\n    }\n\n    //ERROR:\n    if ($var === 42) {\n        echo('matched');\n    } else {\n        echo('not matched');\n    }\n}\n",
          "code_path": "hack/dots_nested_stmts.hack",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 14,
                "offset": 200
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 109
              }
            }
          ],
          "pattern": "if (...) {\n    ...\n} else {\n    ...\n}\n",
          "pattern_path": "hack/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "function foo() {\n    //ERROR:\n    $user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval($user_data);\n}\n",
          "code_path": "hack/dots_stmts.hack",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 6,
                "offset": 112
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n}\n",
          "code_path": "hack/dots_string.hack",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "html": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.html",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.html",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.html",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.html",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.html",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.html",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.html",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.html",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.html",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.html",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.html",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.html",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.html",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.html",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.html",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.html",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.html",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.html",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.html",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.html",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.html",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.html",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.html",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.html",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.html",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.html",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "java": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "class Foo {\n    void bar() {\n        int baz = 0;\n        //ERROR: match\n        foo(baz + 42);\n    }\n}\n",
          "code_path": "java/deep_expr_operator.java",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 5,
                "offset": 95
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 81
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "class Foo {\n    void foo() {\n        //ERROR: match\n        foo();\n        bar();\n        //ERROR: match\n        foo();\n        x = bar();\n        //ERROR: match\n        foo();\n        foo2(bar());\n        //ERROR: match\n        foo();\n        return bar();\n      }\n  }\n      \n",
          "code_path": "java/deep_exprstmt.java",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 5,
                "offset": 81
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 60
              }
            },
            {
              "end": {
                "col": 19,
                "line": 8,
                "offset": 138
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 113
              }
            },
            {
              "end": {
                "col": 21,
                "line": 11,
                "offset": 197
              },
              "start": {
                "col": 9,
                "line": 10,
                "offset": 170
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 256
              },
              "start": {
                "col": 9,
                "line": 13,
                "offset": 229
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "class Foo {\n    void foo() {\n        //ERROR:\n        foo(1,2);\n\n        //ERROR:\n        foo(1,\n            2);\n\n        //ERROR:\n        foo (1, // comment\n             2);\n\n        foo(2,1);\n    }\n}\n",
          "code_path": "java/concrete_syntax.java",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 4,
                "offset": 62
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 54
              }
            },
            {
              "end": {
                "col": 15,
                "line": 8,
                "offset": 111
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 90
              }
            },
            {
              "end": {
                "col": 16,
                "line": 12,
                "offset": 173
              },
              "start": {
                "col": 9,
                "line": 11,
                "offset": 139
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "class Foo {\n\tfinal String pwd = \"password\";\t\n \tvoid main()\t{\n        //ERROR: match\n\t\tfoo(pwd);\n\t}\n\n    void diff_word() {\n        foo(\"hello\");\n    }\n    void diff_func() {\n        bar(\"password\");\n    }\n\n    void same_const() {\n        //ERROR: match\n        foo(\"password\");\n    }\n\n    void all_diff() {\n        bar(\"hello\");\n    }\n}\n",
          "code_path": "java/equivalence_constant_propagation.java",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 94
              },
              "start": {
                "col": 3,
                "line": 5,
                "offset": 86
              }
            },
            {
              "end": {
                "col": 24,
                "line": 17,
                "offset": 276
              },
              "start": {
                "col": 9,
                "line": 17,
                "offset": 261
              }
            }
          ],
          "pattern": "foo(\"password\")",
          "pattern_path": "java/equivalence_constant_propagation.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": "// ERROR:\n@AnnoFoo\nclass Foo {\n    int foo = 1;\n}\n\n// ERROR:\n@Anno1\n@Anno2\nclass FooBar {\n    int foobar = 2;\n}\n\n@AnnoBar(bar = \"bar\")\nclass Bar {\n    int bar = 1;\n}\n\nclass NoAnno {\n    int noanno = 2;\n}\n",
          "code_path": "java/metavar_anno.java",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 5,
                "offset": 49
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 12,
                "offset": 111
              },
              "start": {
                "col": 1,
                "line": 8,
                "offset": 61
              }
            }
          ],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "class Foo {\n  void bar() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n  }\n}\n\n",
          "code_path": "java/metavar_arg.java",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 52
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 44
              }
            },
            {
              "end": {
                "col": 11,
                "line": 8,
                "offset": 113
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 72
              }
            },
            {
              "end": {
                "col": 12,
                "line": 12,
                "offset": 169
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 133
              }
            },
            {
              "end": {
                "col": 21,
                "line": 15,
                "offset": 205
              },
              "start": {
                "col": 5,
                "line": 15,
                "offset": 189
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "// ERROR:\npublic class Foo {\n    int foo = 5;\n\n    public static void foo() {\n        int foo1 = 4;\n    }\n}\n\n// ERROR:\nprivate class Bar extends Foo {\n    int bar = 3;\n}\n\n// ERROR:\nabstract class Foobar {\n    public abstract void foobar();\n}\n\n",
          "code_path": "java/metavar_class_def.java",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 8,
                "offset": 107
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 13,
                "offset": 169
              },
              "start": {
                "col": 1,
                "line": 11,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 2,
                "line": 18,
                "offset": 241
              },
              "start": {
                "col": 1,
                "line": 16,
                "offset": 181
              }
            }
          ],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "class Foo {\nvoid foo() {\n    x = 1;\n    //ERROR:\n    if (x > 2)\n        foo();\n}\n\n}",
          "code_path": "java/metavar_cond.java",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 6,
                "offset": 78
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 53
              }
            }
          ],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "class Foo {\nvoid foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n}\n\n\n",
          "code_path": "java/metavar_call.java",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 42
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "class Foo {\n    // ERROR:\n    void foo() {\n        foo(1,2);\n    }\n\n    // ERROR:\n    public static void bar(int bar1, int bar2, int bar3) {\n        foo(1,2,3);\n        bar(1,2);\n    } \n\n    // ERROR:\n    public void foobar(int bar1) {\n        foo();\n    }\n\n    public static String str() {\n        return \"hello\";\n    }\n}\n",
          "code_path": "java/metavar_func_def.java",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 5,
                "offset": 66
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 6,
                "line": 11,
                "offset": 184
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 86
              }
            },
            {
              "end": {
                "col": 6,
                "line": 16,
                "offset": 256
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 205
              }
            }
          ],
          "pattern": "void $X(...) {\n    ...\n}\n",
          "pattern_path": "java/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "//ERROR: match\nimport java.util.ArrayList;\n//ERROR: match\nimport java.util.List;\n\nclass Foo {\n\n}",
          "code_path": "java/metavar_import.java",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 2,
                "offset": 41
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            },
            {
              "end": {
                "col": 22,
                "line": 4,
                "offset": 79
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 58
              }
            }
          ],
          "pattern": "import java.util.$X;",
          "pattern_path": "java/metavar_import.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "class Foo {\nvoid foo() {\n    v = 1;\n    //ERROR:\n    if (v > 2)\n        return 1;\n}\n}\n\n\n",
          "code_path": "java/metavar_stmt.java",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 6,
                "offset": 80
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 53
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.java",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": "public class Foo {\n    public static void main() {\n        String x;\n        String y;\n        int a;\n        int b;\n        //ERROR: match\n        if (x == y) x = y;\n        if (a == b) a = b;\n   }\n}\n",
          "code_path": "java/metavar_typed.java",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 8,
                "offset": 158
              },
              "start": {
                "col": 13,
                "line": 8,
                "offset": 152
              }
            }
          ],
          "pattern": "$X == (String $Y)\n",
          "pattern_path": "java/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.java",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "class Foo {\n    void foo() {\n        //ERROR: match\n        path = \"/location/1\";\n    }\n}",
          "code_path": "java/regexp_string.java",
          "highlights": [
            {
              "end": {
                "col": 29,
                "line": 4,
                "offset": 80
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 60
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "class Foo {\nvoid test_equal() {\n    a = 1;\n    b = 2;\n    //ERROR: match\n    if (a+b == a+b)\n        return 1;\n    return 0;\n}\n\n}\n",
          "code_path": "java/metavar_equality_expr.java",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 6,
                "offset": 91
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 81
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "class foo {\n\nvoid foo() {\n    //ERROR:\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n    }\n}\n\n\n}",
          "code_path": "java/metavar_equality_stmt.java",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 11,
                "offset": 134
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "class Foo {\nvoid foo() {\n   //ERROR:\n    myfile = open();\n    close(myfile);\n}\n}\n\n\n\n\n",
          "code_path": "java/metavar_equality_var.java",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 76
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "class Foo {\n  void bar() {\n    //ERROR:\n    foo(1,2,3,4,5);\n    //ERROR:\n    foo(5);\n  }\n}\n\n\n",
          "code_path": "java/dots_args.java",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 58
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 44
              }
            },
            {
              "end": {
                "col": 11,
                "line": 6,
                "offset": 83
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 77
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "class Foo {\n\n  void test() {\n\n    //ERROR: match\n    f = this.foo().m().h().bar().z();\n\n    //ERROR: match\n    f = this.foo().bar();\n\n    f = this.foo().m().h().z();\n\n    //ERROR: match $O can match o.before()\n    f = this.before().foo().m().h().bar().z();\n  }\n}\n\n",
          "code_path": "java/dots_method_chaining.java",
          "highlights": [
            {
              "end": {
                "col": 37,
                "line": 6,
                "offset": 85
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 53
              }
            },
            {
              "end": {
                "col": 25,
                "line": 9,
                "offset": 131
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 111
              }
            },
            {
              "end": {
                "col": 46,
                "line": 14,
                "offset": 255
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 214
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "class Foo {\n  void main() {\n\n    //ERROR: match\n    if (x == 1) \n        return 2; \n  }\n}\n\n",
          "code_path": "java/dots_nested_stmts.java",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 6,
                "offset": 81
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 52
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "class Foo {\nvoid foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n\n}\n\n\n",
          "code_path": "java/dots_stmts.java",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 8,
                "offset": 119
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "class Foo { \n  void bar () {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n  }\n}\n",
          "code_path": "java/dots_string.java",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 4,
                "offset": 79
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 46
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "js": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "function bar() {\n    baz = 0;\n    //ERROR: match\n    foo(baz + 42);\n}\n",
          "code_path": "js/deep_expr_operator.js",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 53
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "function foo() {\n    //ERROR: match\n    foo();\n    bar();\n    //ERROR: match\n    foo();\n    x = bar();\n    //ERROR: match\n    foo();\n    print(bar());\n    //ERROR: match\n    foo();\n    return bar();\n}\n",
          "code_path": "js/deep_exprstmt.js",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 4,
                "offset": 57
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 40
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 102
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 81
              }
            },
            {
              "end": {
                "col": 18,
                "line": 10,
                "offset": 150
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 126
              }
            },
            {
              "end": {
                "col": 18,
                "line": 13,
                "offset": 198
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 174
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "function foo() {\n //ERROR:\n    foo(1, 2);\n //ERROR:\n    foo(1,2);\n //ERROR:\n    foo (1, 2);\n //ERROR:\n foo(1,\n     2);\n //ERROR:\n foo(1, // comment\n     2);\n\n foo(2,1)\n}\n\n\n",
          "code_path": "js/concrete_syntax.js",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 40
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 31
              }
            },
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 64
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 90
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 80
              }
            },
            {
              "end": {
                "col": 8,
                "line": 10,
                "offset": 117
              },
              "start": {
                "col": 2,
                "line": 9,
                "offset": 103
              }
            },
            {
              "end": {
                "col": 8,
                "line": 13,
                "offset": 155
              },
              "start": {
                "col": 2,
                "line": 12,
                "offset": 130
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "const Bar = \"password\";\n\nfunction foo() {\n     //ERROR: match!\n     password(Bar);\n}\n",
          "code_path": "js/equivalence_constant_propagation.js",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 81
              },
              "start": {
                "col": 6,
                "line": 5,
                "offset": 68
              }
            }
          ],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.js",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": "// ERROR:\n@Anno1\nclass Foo {\n    foo() {\n        var foo = 1;\n    }\n}\n\n// ERROR:\n@Anno1()\n@Anno2()\nclass FooBar {\n    foo() {\n        var foo = 2;\n    }\n}\n\n@AnnoVar(\"Bar\")\nclass Bar {\n    bar() {\n        var bar = 1;\n    }\n}\n\nclass NoAnno {\n    noanno() {\n        var no_anno = 1;\n    }\n}\n",
          "code_path": "js/metavar_anno.js",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 7,
                "offset": 69
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 16,
                "offset": 154
              },
              "start": {
                "col": 1,
                "line": 10,
                "offset": 81
              }
            }
          ],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n\n",
          "code_path": "js/metavar_arg.js",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 103
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 159
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 123
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 195
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 179
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "// ERROR:\nclass Foo {\n    constructor(foo) {\n        this.foo = foo;\n    }\n\n    get foo() {\n        return this.foo;\n    }\n}\n\n// ERROR:\nclass Bar extends Foo {\n    constructor (bar) {\n        this.bar = bar;\n    }\n}\n",
          "code_path": "js/metavar_class_def.js",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 10,
                "offset": 124
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 17,
                "offset": 215
              },
              "start": {
                "col": 1,
                "line": 13,
                "offset": 136
              }
            }
          ],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "function foo() {\n    x = 1;\n    //ERROR:\n    if (x > 2)\n        foo();\n}\n\n",
          "code_path": "js/metavar_cond.js",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 5,
                "offset": 70
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 45
              }
            }
          ],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n",
          "code_path": "js/metavar_call.js",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "// ERROR:\nfunction foo() {\n    foo(1,2);\n}\n\n// ERROR:\nfunction bar(bar1, bar2, bar3) {\n    foo(1,2);\n    bar(1,2,3);\n}\n\n",
          "code_path": "js/metavar_func_def.js",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 4,
                "offset": 42
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 10,
                "offset": 118
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 54
              }
            }
          ],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "//ERROR: match\nimport jwt from 'foo';\nlet a = jwt.sign({}, 'a');\n",
          "code_path": "js/metavar_import.js",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 2,
                "offset": 36
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            }
          ],
          "pattern": "import $X from 'foo';\n",
          "pattern_path": "js/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "function foo() {\n    // ERROR:\n    var foo = {key: value, key2: value2, key3: value3};\n\n    // ERROR:\n    var bar = {foo: bar, foo2: bar2, foo3: bar3};\n}\n",
          "code_path": "js/metavar_key_value.js",
          "highlights": [
            {
              "end": {
                "col": 55,
                "line": 3,
                "offset": 85
              },
              "start": {
                "col": 15,
                "line": 3,
                "offset": 45
              }
            },
            {
              "end": {
                "col": 49,
                "line": 6,
                "offset": 150
              },
              "start": {
                "col": 15,
                "line": 6,
                "offset": 116
              }
            }
          ],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "function foo() {\n    v = 1;\n    //ERROR:\n    if (v > 2)\n        return 1;\n}\n\n",
          "code_path": "js/metavar_stmt.js",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 45
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.js",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": "//ERROR: match\nvar x = {\"Location\": 1};\n",
          "code_path": "js/regexp_fieldname.js",
          "highlights": [
            {
              "end": {
                "col": 24,
                "line": 2,
                "offset": 38
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            }
          ],
          "pattern": "var $X = {\"=~/[lL]ocation/\": $Y};\n",
          "pattern_path": "js/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "//ERROR: match\npath = \"/location/1\";",
          "code_path": "js/regexp_string.js",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 2,
                "offset": 35
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "function test_equal() {\n    a = 1;\n    b = 2;\n    //ERROR: match\n    if (a+b == a+b)\n        return 1;\n    return 0;\n}\n\n",
          "code_path": "js/metavar_equality_expr.js",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 5,
                "offset": 84
              },
              "start": {
                "col": 8,
                "line": 5,
                "offset": 72
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "function foo() {\n    //ERROR:\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n    }\n}\n\n\n\n",
          "code_path": "js/metavar_equality_stmt.js",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 9,
                "offset": 125
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "function foo() {\n  //ERROR:\n    myfile = open();\n    close(myfile);\n}\n\n\n\n",
          "code_path": "js/metavar_equality_var.js",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "function foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n\n",
          "code_path": "js/dots_args.js",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 46
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 63
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "//ERROR: match\nf = o.foo().m().h().bar().z();\n\n//ERROR: match\nf = o.foo().bar();\n\nf = o.foo().m().h().z();\n\n//ERROR: match $O can match o.before()\nf = o.before().foo().m().h().bar().z();\n",
          "code_path": "js/dots_method_chaining.js",
          "highlights": [
            {
              "end": {
                "col": 30,
                "line": 2,
                "offset": 44
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            },
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 79
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 39,
                "line": 10,
                "offset": 185
              },
              "start": {
                "col": 1,
                "line": 10,
                "offset": 147
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "function foo() {\n\n    //ERROR: match\n    if (x == 1) \n        return 2;\n}\n",
          "code_path": "js/dots_nested_stmts.js",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 71
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "function foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n\n\n",
          "code_path": "js/dots_stmts.js",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 7,
                "offset": 111
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 35
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n    //ERROR:\n    foo('whatever sequence of chars');\n}\n\n",
          "code_path": "js/dots_string.js",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 119
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 86
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "json": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "{ \"foo\": { \"bar\" : [42] } }",
          "code_path": "json/deep_expr_operator.json",
          "highlights": [
            {
              "end": {
                "col": 26,
                "line": 1,
                "offset": 25
              },
              "start": {
                "col": 3,
                "line": 1,
                "offset": 2
              }
            }
          ],
          "pattern": "\"foo\": <... 42 ...>",
          "pattern_path": "json/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.json",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.json",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.json",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.json",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.json",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.json",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.json",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.json",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.json",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.json",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.json",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.json",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.json",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.json",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.json",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.json",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.json",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.json",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.json",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.json",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.json",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.json",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.json",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.json",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.json",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "jsonnet": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "local f = function () [\n  //ERROR:\n  foo(bar(1 + 42)),\n\n  foo(1)\n];",
          "code_path": "jsonnet/deep_expr_operator.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 53
              },
              "start": {
                "col": 3,
                "line": 3,
                "offset": 37
              }
            }
          ],
          "pattern": "foo(<... 42 ...>)",
          "pattern_path": "jsonnet/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.jsonnet",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "local f = function () [\n //ERROR:\n    foo(1,2),\n\n //ERROR:\n foo(1,\n     2),\n\n //ERROR:\n foo (1, // comment\n      2),\n\n // nope, not this one\n foo(2,1),\n];\nf()\n",
          "code_path": "jsonnet/concrete_syntax.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 46
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 38
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 74
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 60
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 115
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 88
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.jsonnet",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.jsonnet",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.jsonnet",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "local foo = function () [\n    //ERROR:\n    foo(1,2),\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2),\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2),\n\n    //ERROR:\n    foo(bar(1,3), 2),\n\n    foo(2,1),\n];\nfoo()\n\n",
          "code_path": "jsonnet/metavar_arg.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 43
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 112
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 71
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 168
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 132
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 204
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 188
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.jsonnet",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.jsonnet",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "local foo = function () [\n    //ERROR:\n    foo(1,2),\n];\nfoo()\n",
          "code_path": "jsonnet/metavar_call.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 43
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.jsonnet",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.jsonnet",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.jsonnet",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.jsonnet",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.jsonnet",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.jsonnet",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.jsonnet",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.jsonnet",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.jsonnet",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.jsonnet",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "local f = function ()\n    //ERROR:\n    local myfile = open();\n    close(myfile)\n;\nf()\n\n\n\n\n\n",
          "code_path": "jsonnet/metavar_equality_var.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 79
              },
              "start": {
                "col": 11,
                "line": 3,
                "offset": 45
              }
            }
          ],
          "pattern": "local $V = open();\nclose($V)\n\n\n",
          "pattern_path": "jsonnet/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "local foo = function () [\n  //ERROR:\n    foo(1,2,3,4,5),\n  //ERROR:\n    foo(5),\n];\nfoo()\n\n\n\n",
          "code_path": "jsonnet/dots_args.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 55
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 41
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 78
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 72
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.jsonnet",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.jsonnet",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.jsonnet",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "local foo = function () [\n    //ERROR:\n    foo(\"whatever sequence of chars\"),\n    //ERROR:\n    foo('whatever sequence of chars'),\n    //ERROR:\n    foo(|||whatever sequence of chars\n        |||),\n];\nfoo()\n",
          "code_path": "jsonnet/dots_string.jsonnet",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 76
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 43
              }
            },
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 128
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 95
              }
            },
            {
              "end": {
                "col": 13,
                "line": 8,
                "offset": 193
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 147
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "julia": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.jl",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "function foo()\n    # ERROR: match\n    foo()\n    bar()\n\n    # ERROR: match\n    foo()\n    x = bar()\n\n    # ERROR: match\n    foo()\n    foo2(bar())\n\n    # ERROR: match\n    foo()\n    return bar()\nend",
          "code_path": "julia/deep_exprstmt.jl",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 53
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 38
              }
            },
            {
              "end": {
                "col": 14,
                "line": 8,
                "offset": 97
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 78
              }
            },
            {
              "end": {
                "col": 16,
                "line": 12,
                "offset": 143
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 122
              }
            },
            {
              "end": {
                "col": 17,
                "line": 16,
                "offset": 190
              },
              "start": {
                "col": 5,
                "line": 15,
                "offset": 168
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "function foo()\n    # ERROR:\n    foo(1,2)\n\n    # ERROR:\n    foo(1, 2)\n\n    # ERROR:\n    foo(1, \n        2)\n\n    # ERROR:\n    foo(1, \n       2)\n\n    # ERROR:\n    foo(1,   # comment \n        2)\n\n    foo(2, 1);\nend",
          "code_path": "julia/concrete_syntax.jl",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 40
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 14,
                "line": 6,
                "offset": 68
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 59
              }
            },
            {
              "end": {
                "col": 11,
                "line": 10,
                "offset": 105
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 87
              }
            },
            {
              "end": {
                "col": 10,
                "line": 14,
                "offset": 141
              },
              "start": {
                "col": 5,
                "line": 13,
                "offset": 124
              }
            },
            {
              "end": {
                "col": 11,
                "line": 18,
                "offset": 190
              },
              "start": {
                "col": 5,
                "line": 17,
                "offset": 160
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.jl",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.jl",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.jl",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "function foo()\n    # ERROR:\n    foo(1, 2)\n\n    # ERROR:\n    foo(a_very_long_constant_name, 2)\n\n    # ERROR:\n    foo(unsafe(), 2)  # indeed\n\n    # ERROR:\n    foo(bar(1, 3), 2)\n\n    foo(2, 1)\nend",
          "code_path": "julia/metavar_arg.jl",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 41
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 38,
                "line": 6,
                "offset": 93
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 60
              }
            },
            {
              "end": {
                "col": 21,
                "line": 9,
                "offset": 128
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 112
              }
            },
            {
              "end": {
                "col": 22,
                "line": 12,
                "offset": 174
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 157
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.jl",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.jl",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "function foo()\n    # ERROR:\n    foo(1, 2)\n\n    return 1\nend\n",
          "code_path": "julia/metavar_call.jl",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 41
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.jl",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.jl",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.jl",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.jl",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.jl",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.jl",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.jl",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.jl",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.jl",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.jl",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "function foo()\n    # ERROR:\n    myfile = open()\n    close(myfile)\nend\n",
          "code_path": "julia/metavar_equality_var.jl",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 65
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "function foo()\n    # ERROR:\n    foo(1, 2, 3, 4, 5)\n    # ERROR:\n    foo(5)\nend\n",
          "code_path": "julia/dots_args.jl",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 3,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 74
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 68
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.jl",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "function foo()\n    #ERROR: match\n    if x == some_cond\n        println(\"matched\")\n    else\n        println(\"not matched\")\n    end\nend",
          "code_path": "julia/dots_nested_stmts.jl",
          "highlights": [
            {
              "end": {
                "col": 31,
                "line": 6,
                "offset": 121
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 37
              }
            }
          ],
          "pattern": "if ...\n  ...\nend\n",
          "pattern_path": "julia/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "function foo()\n    # ERROR:\n    user_data = get()\n    println(\"do stuff\")\n    foobar()\n    eval(user_data)\nend\n",
          "code_path": "julia/dots_stmts.jl",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 6,
                "offset": 106
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "function foo()\n    # ERROR:\n    foo(\"whatever sequence of chars\")\n    # foo('whatever sequence of chars')\n\n    # this string is not a constant, and therefore will not be matched.\n    foo(\"$foo, here\")\n\n    # this string is not a constant, and therefore will not be matched.\n    foo(\"$(1 + 2) = 3\")\nend\n",
          "code_path": "julia/dots_string.jl",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 65
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "kotlin": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "fun foo(): Int {\n    //ERROR:\n    foo(bar(1 + 42))\n\n    foo(1)\n}\n",
          "code_path": "kotlin/deep_expr_operator.kt",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 3,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "fun foo() {\n    //ERROR: match\n    foo()\n    bar()\n    //ERROR: match\n    foo()\n    val x = bar()\n    //ERROR: match\n    foo()\n    foo2(bar())\n    //ERROR: match\n    foo()\n    return bar()\n}\n  \n",
          "code_path": "kotlin/deep_exprstmt.kt",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 35
              }
            },
            {
              "end": {
                "col": 18,
                "line": 7,
                "offset": 97
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 74
              }
            },
            {
              "end": {
                "col": 16,
                "line": 10,
                "offset": 142
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 121
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 188
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 166
              }
            }
          ],
          "pattern": "foo()\nbar()\n",
          "pattern_path": "kotlin/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "fun foo(): Int {\n    //ERROR:\n    foo(1,2)\n\n    //ERROR:\n    foo(1,\n        2)\n\n    //ERROR:\n    foo(1, // comment\n        2)\n\n    foo(2,1)\n}\n",
          "code_path": "kotlin/concrete_syntax.kt",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 78
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 61
              }
            },
            {
              "end": {
                "col": 11,
                "line": 11,
                "offset": 125
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 97
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.kt",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.kt",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.kt",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "fun bar() {\n    //ERROR:\n    foo(1,2)\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2)\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2)\n\n    //ERROR:\n    foo(bar(1,3), 2)\n\n    foo(2,1)\n}\n",
          "code_path": "kotlin/metavar_arg.kt",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 97
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 152
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 116
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 187
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 171
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "// ERROR:\npublic class Foo {\n    val foo: Int = 5\n\n    public fun foo(): Void {\n        val foo1: Int = 4\n    }\n}\n\n// ERROR:\nprivate class Bar: Foo {\n    val bar: Int = 3\n}\n\n// ERROR:\nabstract class Foobar {\n    public abstract fun foobar(): Void\n}\n",
          "code_path": "kotlin/metavar_class_def.kt",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 8,
                "offset": 113
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 13,
                "offset": 172
              },
              "start": {
                "col": 1,
                "line": 11,
                "offset": 125
              }
            },
            {
              "end": {
                "col": 2,
                "line": 18,
                "offset": 248
              },
              "start": {
                "col": 1,
                "line": 16,
                "offset": 184
              }
            }
          ],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "class Foo {\n    fun foo() {\n        x = 1\n        // ERROR:\n        if (x > 2)\n            foo()\n    }\n}\n",
          "code_path": "kotlin/metavar_cond.kt",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 6,
                "offset": 96
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 68
              }
            }
          ],
          "pattern": "if ($E)\n    foo()\n",
          "pattern_path": "kotlin/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "fun foo() {\n    //ERROR:\n    foo(1,2)\n\n    return 1 \n}\n",
          "code_path": "kotlin/metavar_call.kt",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "class Foo {\n    // ERROR:\n    fun foo(): Void {\n        foo(1,2)\n    }\n\n    // ERROR:\n    public fun bar(bar1: Int, bar2: Int, bar3: Int): Void {\n        foo(1,2,3)\n        bar(1,2)\n    }\n\n    // ERROR:\n    public fun foobar(bar1: Int): String {\n        return \"hello\"\n    }\n}\n",
          "code_path": "kotlin/metavar_func_def.kt",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 5,
                "offset": 70
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 6,
                "line": 11,
                "offset": 187
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 90
              }
            },
            {
              "end": {
                "col": 6,
                "line": 16,
                "offset": 274
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 207
              }
            }
          ],
          "pattern": "fun $X(...) {\n    ...\n}\n",
          "pattern_path": "kotlin/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "// ERROR:\nimport java.util.ArrayList\n\n// ERROR:\nimport java.util.HashMap\n\nclass Foo {\n\n}\n",
          "code_path": "kotlin/metavar_import.kt",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 2,
                "offset": 36
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 25,
                "line": 5,
                "offset": 72
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 48
              }
            }
          ],
          "pattern": "import java.util.$X\n",
          "pattern_path": "kotlin/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.kt",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "class Foo {\n    fun foo() {\n        v = 1\n        // ERROR:\n        if (v > 2)\n            return 1\n    }\n}\n",
          "code_path": "kotlin/metavar_stmt.kt",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 6,
                "offset": 99
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 68
              }
            }
          ],
          "pattern": "if ($X > $Y)\n    $S\n",
          "pattern_path": "kotlin/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.kt",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": "class Foo {\n    fun main() {\n      val x : String\n      val y : String\n      val a : Int\n      val b : Int\n      //ERROR: match\n      if (x == y) x = y\n      if (a == b) a = b\n   }\n}\n",
          "code_path": "kotlin/metavar_typed.kt",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 8,
                "offset": 144
              },
              "start": {
                "col": 11,
                "line": 8,
                "offset": 138
              }
            }
          ],
          "pattern": "$X == ($Y : String)",
          "pattern_path": "kotlin/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.kt",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.kt",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "class Foo {\n    fun test_equal() {\n        a = 1\n        b = 2\n        // ERROR:\n        if (a+b == a+b)\n            return 1\n        return 0\n    }\n}\n",
          "code_path": "kotlin/metavar_equality_expr.kt",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 6,
                "offset": 103
              },
              "start": {
                "col": 13,
                "line": 6,
                "offset": 93
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "class Foo {\n    fun foo() {\n        // ERROR:\n        if (x > 2) {\n            bar()\n            foo()\n        } else {\n            bar()\n            foo()\n        }\n   \n        if (x > 2) {\n            foo()\n            bar()\n        } else {\n            foo()\n        }\n    }\n}\n",
          "code_path": "kotlin/metavar_equality_stmt.kt",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 10,
                "offset": 165
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 54
              }
            }
          ],
          "pattern": "if ($E)\n  $S\nelse $S\n",
          "pattern_path": "kotlin/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.kt",
          "highlights": [],
          "pattern": "val $V = open()\nclose($V)\n\n",
          "pattern_path": "kotlin/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "fun foo() {\n    //ERROR:\n    foo(1,2,3,4,5)\n    //ERROR:\n    foo(5)\n}\n",
          "code_path": "kotlin/dots_args.kt",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 43
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 61
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "class Foo {\n\n  fun test() {\n\n    //ERROR: match\n    f = this.foo().m().h().bar().z();\n\n    //ERROR: match\n    f = this.foo().bar();\n\n    f = this.foo().m().h().z();\n\n    //ERROR: match $O can match o.before()\n    f = this.before().foo().m().h().bar().z();\n  }\n}\n\n",
          "code_path": "kotlin/dots_method_chaining.kt",
          "highlights": [
            {
              "end": {
                "col": 37,
                "line": 6,
                "offset": 84
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 52
              }
            },
            {
              "end": {
                "col": 25,
                "line": 9,
                "offset": 130
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 110
              }
            },
            {
              "end": {
                "col": 46,
                "line": 14,
                "offset": 254
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 213
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "fun foo() {\n    //ERROR:\n    if (x == 1)\n        return 2\n}\n",
          "code_path": "kotlin/dots_nested_stmts.kt",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 4,
                "offset": 57
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.kt",
          "highlights": [],
          "pattern": "val $V = get()\n...\neval($V)\n",
          "pattern_path": "kotlin/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "fun foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\")\n}\n",
          "code_path": "kotlin/dots_string.kt",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 62
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "lua": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.lua",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "function foo()\n    --ERROR: match\n    foo()\n    bar()\n    --ERROR: match\n    foo()\n    x = bar()\n    --ERROR: match\n    foo()\n    print(bar())\n    --ERROR: match\n    foo()\n    return bar()\nend\n",
          "code_path": "lua/deep_exprstmt.lua",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 53
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 38
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 96
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 77
              }
            },
            {
              "end": {
                "col": 17,
                "line": 10,
                "offset": 142
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 120
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 188
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 166
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "function foo()\n --ERROR:\n    foo(1,2)\n\n --ERROR:\n foo(1,\n     2)\n\n --ERROR:\n foo (1, -- comment\n      2)\n\n foo(2,1)\nend\n",
          "code_path": "lua/concrete_syntax.lua",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 29
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 64
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 50
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 104
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 77
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.lua",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.lua",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.lua",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "function foo()\n    --ERROR:\n    foo(1,2)\n\n    --ERROR:\n    foo(a_very_long_constant_name,\n        2)\n\n    --ERROR:\n    foo (unsafe(), -- indeed\n         2)\n\n    --ERROR:\n    foo(bar(1,3), 2)\n\n    foo(2,1)\nend\n\n",
          "code_path": "lua/metavar_arg.lua",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 40
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 100
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 59
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 155
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 190
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 174
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.lua",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.lua",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "function foo()\n    --ERROR:\n    foo(1,2)\n\n    return 1\nend\n\n\n",
          "code_path": "lua/metavar_call.lua",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 40
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.lua",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.lua",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.lua",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.lua",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.lua",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.lua",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.lua",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.lua",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.lua",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.lua",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "function foo()\n  --ERROR:\n    myfile = open()\n    close(myfile)\nend\n\n\n\n\n",
          "code_path": "lua/metavar_equality_var.lua",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "function foo()\n  --ERROR:\n    foo(1,2,3,4,5)\n  --ERROR:\n    foo(5)\nend\n\n\n",
          "code_path": "lua/dots_args.lua",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 44
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 66
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 60
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.lua",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "function foo()\n\n    --ERROR: match\n    if (x == 1) then\n        return 2\n    end\nend\n\n",
          "code_path": "lua/dots_nested_stmts.lua",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 72
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 39
              }
            }
          ],
          "pattern": "if (...) then\n  ...\nend\n\n\n",
          "pattern_path": "lua/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "function foo()\n\n    --ERROR:\n    user_data = get()\n    print(\"do stuff\")\n    foobar()\n    eval(user_data)\nend\n",
          "code_path": "lua/dots_stmts.lua",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 105
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 33
              }
            }
          ],
          "pattern": "$V = get()\n...\neval($V)\n\n\n",
          "pattern_path": "lua/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "function foo()\n    --ERROR:\n    foo(\"whatever sequence of chars\")\n    --ERROR:\n    foo('whatever sequence of chars')\nend",
          "code_path": "lua/dots_string.lua",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 65
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 116
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 83
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "ocaml": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.ml",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.ml",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "(* ERROR: *)\nlet foo = foo 1 2\n\n(* ERROR: *)\nlet foo1 = foo 1\n               2\n\n(* ERROR: *)\nlet foo2 = foo 1 (* comment *)\n              2\n\nlet foo3 = foo 2 1\n",
          "code_path": "ocaml/concrete_syntax.ml",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 2,
                "offset": 30
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 23
              }
            },
            {
              "end": {
                "col": 17,
                "line": 6,
                "offset": 78
              },
              "start": {
                "col": 12,
                "line": 5,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 16,
                "line": 10,
                "offset": 139
              },
              "start": {
                "col": 12,
                "line": 9,
                "offset": 104
              }
            }
          ],
          "pattern": "foo 1 2\n",
          "pattern_path": "ocaml/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.ml",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.ml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Argument": [
        {
          "code": "(* ERROR: *)\nlet foo = foo 1 2\n\n(* ERROR: *)\nlet foo1 = foo a_very_long_constant_name 2\n\n(* ERROR: *)\nlet foo2 = foo unsafe (* indeed *) 2\n\n(* ERROR: *)\nlet foo3 = foo (bar 1 3) 2\n\nlet foo4 = foo 2 1\n",
          "code_path": "ocaml/metavar_arg.ml",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 2,
                "offset": 30
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 23
              }
            },
            {
              "end": {
                "col": 43,
                "line": 5,
                "offset": 87
              },
              "start": {
                "col": 12,
                "line": 5,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 37,
                "line": 8,
                "offset": 138
              },
              "start": {
                "col": 12,
                "line": 8,
                "offset": 113
              }
            },
            {
              "end": {
                "col": 27,
                "line": 11,
                "offset": 179
              },
              "start": {
                "col": 12,
                "line": 11,
                "offset": 164
              }
            }
          ],
          "pattern": "foo $X 2\n",
          "pattern_path": "ocaml/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.ml",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "let foo = \n  let x = 1 in\n  (* ERROR: *)\n  if x > 2 then foo else bar\n",
          "code_path": "ocaml/metavar_cond.ml",
          "highlights": [
            {
              "end": {
                "col": 29,
                "line": 4,
                "offset": 69
              },
              "start": {
                "col": 3,
                "line": 4,
                "offset": 43
              }
            }
          ],
          "pattern": "if $E then foo else $X\n",
          "pattern_path": "ocaml/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "(* ERROR: *)\nlet foo = foo 1 2\n",
          "code_path": "ocaml/metavar_call.ml",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 2,
                "offset": 30
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 23
              }
            }
          ],
          "pattern": "$F 1 2\n",
          "pattern_path": "ocaml/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "let foo = foo 1 2\n\n(* ERROR: *)\nlet bar bar1 bar2 = bar 1 2\n\n(* ERROR: *)\nlet rec foobar bar1 = foobar 1 2\n",
          "code_path": "ocaml/metavar_func_def.ml",
          "highlights": [
            {
              "end": {
                "col": 28,
                "line": 4,
                "offset": 59
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 33,
                "line": 7,
                "offset": 106
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 74
              }
            }
          ],
          "pattern": "let $X ... = ...\n",
          "pattern_path": "ocaml/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.ml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "let foo = \n  let v = 1 in\n  (* ERROR: *)\n  if v > 2 then 1 else 2\n",
          "code_path": "ocaml/metavar_stmt.ml",
          "highlights": [
            {
              "end": {
                "col": 25,
                "line": 4,
                "offset": 65
              },
              "start": {
                "col": 3,
                "line": 4,
                "offset": 43
              }
            }
          ],
          "pattern": "if $X > $Y then $S else $M\n",
          "pattern_path": "ocaml/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.ml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.ml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.ml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "(* ERROR: *)\nlet foo = \"/location/l\"\n",
          "code_path": "ocaml/regexp_string.ml",
          "highlights": [
            {
              "end": {
                "col": 24,
                "line": 2,
                "offset": 36
              },
              "start": {
                "col": 5,
                "line": 2,
                "offset": 17
              }
            }
          ],
          "pattern": "let $X = \"=~//[lL]ocation.*/\"\n",
          "pattern_path": "ocaml/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "let foo = \n  let a = 1 in\n  let b = 2 in\n  (* ERROR: *)\n  if a+b = a+b then 1 else 2\n",
          "code_path": "ocaml/metavar_equality_expr.ml",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 5,
                "offset": 70
              },
              "start": {
                "col": 6,
                "line": 5,
                "offset": 61
              }
            }
          ],
          "pattern": "$X = $X\n",
          "pattern_path": "ocaml/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "let foo = \n  (* ERROR: *)\n  if x > 2 then \n    foo\n  else \n    foo\n\nlet foo2 = \n  if x > 2 then\n    bar\n  else \n    foo\n",
          "code_path": "ocaml/metavar_equality_stmt.ml",
          "highlights": [
            {
              "end": {
                "col": 8,
                "line": 6,
                "offset": 66
              },
              "start": {
                "col": 3,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "if $E then $S else $S\n",
          "pattern_path": "ocaml/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "let foo = \n  (* ERROR: *)\n  let myfile = open_file \"file\" in\n  close myfile\n",
          "code_path": "ocaml/metavar_equality_var.ml",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 4,
                "offset": 75
              },
              "start": {
                "col": 7,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "let $A = open_file \"file\" in\nclose $A\n",
          "pattern_path": "ocaml/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "(* ERROR: *)\nlet foo = foo 1 2 3 4 5\n\n(* ERROR: *)\nlet foo2 = foo 5\n\n\n\n",
          "code_path": "ocaml/dots_args.ml",
          "highlights": [
            {
              "end": {
                "col": 24,
                "line": 2,
                "offset": 36
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 23
              }
            },
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 67
              },
              "start": {
                "col": 12,
                "line": 5,
                "offset": 62
              }
            }
          ],
          "pattern": "foo ... 5\n",
          "pattern_path": "ocaml/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.ml",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "(* ERROR: *)\nlet foo = if x = 1 then 2 else 2\n",
          "code_path": "ocaml/dots_nested_stmts.ml",
          "highlights": [
            {
              "end": {
                "col": 33,
                "line": 2,
                "offset": 45
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 23
              }
            }
          ],
          "pattern": "if ... then ... else ...\n",
          "pattern_path": "ocaml/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.ml",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "(* ERROR: *)\nlet bar = foo \"whatever sequence of chars\"\n",
          "code_path": "ocaml/dots_string.ml",
          "highlights": [
            {
              "end": {
                "col": 43,
                "line": 2,
                "offset": 55
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 23
              }
            }
          ],
          "pattern": "foo \"...\"\n",
          "pattern_path": "ocaml/dots_string.sgrep"
        }
      ]
    }
  },
  "php": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "<?php\n\n//ERROR: match\nfoo($bar + 42);\n",
          "code_path": "php/deep_expr_operator.php",
          "highlights": [
            {
              "end": {
                "col": 16,
                "line": 4,
                "offset": 37
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 22
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "<?php\n\nclass Foo\n{\n    public function foo()\n    {\n        //ERROR: match\n        foo();\n        bar();\n        //ERROR: match\n        foo();\n        $x = bar();\n        //ERROR: match\n        foo();\n        foo2(bar());\n        //ERROR: match\n        foo();\n        return bar();\n    }\n}\n",
          "code_path": "php/deep_exprstmt.php",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 9,
                "offset": 103
              },
              "start": {
                "col": 9,
                "line": 8,
                "offset": 82
              }
            },
            {
              "end": {
                "col": 20,
                "line": 12,
                "offset": 161
              },
              "start": {
                "col": 9,
                "line": 11,
                "offset": 135
              }
            },
            {
              "end": {
                "col": 21,
                "line": 15,
                "offset": 220
              },
              "start": {
                "col": 9,
                "line": 14,
                "offset": 193
              }
            },
            {
              "end": {
                "col": 21,
                "line": 18,
                "offset": 279
              },
              "start": {
                "col": 9,
                "line": 17,
                "offset": 252
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "<?php\nfunction foo()\n{\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(1,\n        2);\n\n    //ERROR:\n    foo (1, // comment\n        2);\n\n    foo (2,1);\n}\n?>\n",
          "code_path": "php/concrete_syntax.php",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 48
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 40
              }
            },
            {
              "end": {
                "col": 11,
                "line": 9,
                "offset": 85
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 68
              }
            },
            {
              "end": {
                "col": 11,
                "line": 13,
                "offset": 134
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 105
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "<?php\n\nconst glob1 = \"password\";\n\n$glob2 = \"password\";\n$glob2 = \"bar\";\n\nfunction foo()\n{\n    // ERROR: match\n    bar(glob1);\n\n    bar($glob2);\n}\n",
          "code_path": "php/equivalence_constant_propagation.php",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 11,
                "offset": 123
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 113
              }
            }
          ],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.php",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": "<?php\n// ERROR:\n#[AnnoFoo]\nclass Foo {\n}\n\n// ERROR:\n#[Anno1, Anno2]\nclass FooBar {\n}\n\n#[AnnoBar(\"bar\")]\nclass Bar {\n}\n\nclass NoAnno {\n}\n",
          "code_path": "php/metavar_anno.php",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 5,
                "offset": 40
              },
              "start": {
                "col": 3,
                "line": 3,
                "offset": 18
              }
            },
            {
              "end": {
                "col": 2,
                "line": 10,
                "offset": 84
              },
              "start": {
                "col": 3,
                "line": 8,
                "offset": 54
              }
            }
          ],
          "pattern": "#[$ATTR]\nclass $F { ... }\n",
          "pattern_path": "php/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), //comment\n         2);\n\n    //ERROR:\n    foo(bar(1,3),  2);\n\n    foo(2,1);\n}\n?>\n",
          "code_path": "php/metavar_arg.php",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 48
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            },
            {
              "end": {
                "col": 11,
                "line": 8,
                "offset": 109
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 68
              }
            },
            {
              "end": {
                "col": 12,
                "line": 12,
                "offset": 165
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 129
              }
            },
            {
              "end": {
                "col": 22,
                "line": 15,
                "offset": 202
              },
              "start": {
                "col": 5,
                "line": 15,
                "offset": 185
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "<?php\n\n# ERROR:\nclass Foo\n{\n    public function member()\n    {\n        echo 'Member function';\n    }\n}\n",
          "code_path": "php/metavar_class_def.php",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 10,
                "offset": 102
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 16
              }
            }
          ],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "php/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "<?php\nfunction foo() {\n    $x = 1;\n    //ERROR:\n    if ($x > 2) {\n        foo();\n    }\n}\n?>\n",
          "code_path": "php/metavar_cond.php",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 7,
                "offset": 86
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 52
              }
            }
          ],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n?>\n",
          "code_path": "php/metavar_call.php",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 48
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "<?php\n\n# ERROR:\nfunction foo()\n{\n    return 'This is a function';\n}\n",
          "code_path": "php/metavar_func_def.php",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 7,
                "offset": 67
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 16
              }
            }
          ],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "php/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "<?php\n\n# ERROR:\nrequire \"a.php\";\ninclude \"b.php\";\nrequire_once \"c.php\";\ninclude_once \"d.php\";\n",
          "code_path": "php/metavar_import.php",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 7,
                "offset": 93
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 16
              }
            }
          ],
          "pattern": "require $A;\ninclude $B;\nrequire_once $C;\ninclude_once $D;\n",
          "pattern_path": "php/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.php",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "<?php\nfunction foo() {\n    $v = 1;\n    //ERROR:\n    if ($v > 2)\n        return 1;\n}\n?>\n",
          "code_path": "php/metavar_stmt.php",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 6,
                "offset": 80
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 52
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.php",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.php",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.php",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    $path = \"/location/1\";\n}\n?>\n",
          "code_path": "php/regexp_string.php",
          "highlights": [
            {
              "end": {
                "col": 26,
                "line": 4,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "<?php\nfunction foo() {\n    $a = 1;\n    $b = 2;\n    //ERROR:\n    if ($a+$b == $a+$b) {\n        return 1;\n    }\n    return 0;\n}\n\n?>\n",
          "code_path": "php/metavar_equality_expr.php",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 6,
                "offset": 82
              },
              "start": {
                "col": 9,
                "line": 6,
                "offset": 68
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    if ($x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if ($x > 2) {\n        foo();\n        bar();\n    }\n    else {\n        foo();\n    }\n}\n?>\n",
          "code_path": "php/metavar_equality_stmt.php",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 10,
                "offset": 132
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    $myfile = open();\n    close($myfile);\n}\n?>\n",
          "code_path": "php/metavar_equality_var.php",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 5,
                "offset": 77
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "<?php\nfunction foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n?>\n",
          "code_path": "php/dots_args.php",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 52
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 38
              }
            },
            {
              "end": {
                "col": 11,
                "line": 6,
                "offset": 75
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 69
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "<?php\n\nfunction test() {\n\n    //ERROR: match\n    $f = this->foo()->m()->h()->bar()->z();\n\n    //ERROR: match\n    $f = this->foo()->bar();\n\n    $f = this->foo()->m()->h()->z();\n\n    //ERROR: match $O can match o.before()\n    $f = this->before()->foo()->m()->h()->bar()->z();\n}\n\n\n",
          "code_path": "php/dots_method_chaining.php",
          "highlights": [
            {
              "end": {
                "col": 44,
                "line": 6,
                "offset": 88
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 49
              }
            },
            {
              "end": {
                "col": 29,
                "line": 9,
                "offset": 137
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 113
              }
            },
            {
              "end": {
                "col": 54,
                "line": 14,
                "offset": 273
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 224
              }
            }
          ],
          "pattern": "$X = $O->foo()-> ... ->bar()-> ...;\n\n",
          "pattern_path": "php/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "<?php\n\nfunction foo()\n{\n    $var = 10;\n\n    //ERROR: match\n    if ($var === 42) {\n        echo('matched');\n    }\n\n    if ($var === 42) {\n        echo('matched');\n    } else {\n        echo('not matched');\n    }\n}\n",
          "code_path": "php/dots_nested_stmts.php",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 10,
                "offset": 112
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 63
              }
            }
          ],
          "pattern": "if (...) {\n    ...\n}\n",
          "pattern_path": "php/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    $user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval($user_data);\n}\n?>\n",
          "code_path": "php/dots_stmts.php",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 7,
                "offset": 118
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "<?php\nfunction foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n}\n?>\n",
          "code_path": "php/dots_string.php",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 4,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "promql": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.promql",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.promql",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.promql",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.promql",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.promql",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.promql",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.promql",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.promql",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.promql",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.promql",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.promql",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.promql",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.promql",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.promql",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.promql",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.promql",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.promql",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.promql",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.promql",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.promql",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.promql",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.promql",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.promql",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.promql",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.promql",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.promql",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "python": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "bar = 0\n#ERROR: match\nfoo(bar + 42)\n",
          "code_path": "python/deep_expr_operator.py",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 35
              },
              "start": {
                "col": 1,
                "line": 3,
                "offset": 22
              }
            }
          ],
          "pattern": "foo(<... 42 ...>)\n",
          "pattern_path": "python/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "def foo():\n    # ERROR: match\n    foo()\n    bar()\n    # ERROR: match\n    foo()\n    x = bar()\n    # ERROR: match\n    foo()\n    foo2(bar())\n    # ERROR: match\n    foo()\n    return bar()\n",
          "code_path": "python/deep_exprstmt.py",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 49
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 92
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 73
              }
            },
            {
              "end": {
                "col": 16,
                "line": 10,
                "offset": 137
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 116
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 183
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 161
              }
            }
          ],
          "pattern": "foo()\nbar()",
          "pattern_path": "python/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "def foo():\n    # ERROR:\n    foo(1,2)\n\n    # ERROR:\n    foo(1, \n        2)\n\n    # ERROR:\n    foo(1,   # comment \n        2)\n\n    foo(2, 1)\n",
          "code_path": "python/concrete_syntax.py",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 36
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 55
              }
            },
            {
              "end": {
                "col": 11,
                "line": 11,
                "offset": 122
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 92
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "CONST_GLOBAL = \"secret\"\n\n# this is modifed somewhere, so not inferred as a constant\nGLOBAL = \"secret\"\n\ndef foo():\n    # ERROR: match\n    bar(CONST_GLOBAL)\n\n\ndef bar():\n    global GLOBAL\n    GLOBAL=\"x\"\n",
          "code_path": "python/equivalence_constant_propagation.py",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 8,
                "offset": 154
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 137
              }
            }
          ],
          "pattern": "bar(\"secret\")",
          "pattern_path": "python/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": "import subprocess.open\nfrom subprocess import open as sub_open\n\nimport subprocess as sub\n\n\n# TODO\n# import os as subprocess\n\n\ndef foo():\n    # ERROR:\n    result = subprocess.open(\"ls\")\n    # ERROR:\n    result = sub_open(\"ls\")\n    # ERROR:\n    result = sub.open(\"ls\")\n\n    result = sub.not_open(\"ls\")\n",
          "code_path": "python/equivalence_naming_import.py",
          "highlights": [
            {
              "end": {
                "col": 35,
                "line": 13,
                "offset": 184
              },
              "start": {
                "col": 14,
                "line": 13,
                "offset": 163
              }
            },
            {
              "end": {
                "col": 28,
                "line": 15,
                "offset": 225
              },
              "start": {
                "col": 14,
                "line": 15,
                "offset": 211
              }
            },
            {
              "end": {
                "col": 28,
                "line": 17,
                "offset": 266
              },
              "start": {
                "col": 14,
                "line": 17,
                "offset": 252
              }
            }
          ],
          "pattern": "subprocess.open(...)",
          "pattern_path": "python/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": "# ERROR:\n@anno1\ndef bar(foo: 'foo'):\n    x = 2\n\n# ERROR:\n@anno1\n@anno2\ndef foobar():\n    x = 3\n\n@app.route('/foo')\ndef foo():\n    x = 1\n\ndef no_anno():\n    x = 2\n\n\n",
          "code_path": "python/metavar_anno.py",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 46
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 10,
                "line": 10,
                "offset": 94
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 57
              }
            }
          ],
          "pattern": "@$X\ndef $FUNC(...):\n    ...\n",
          "pattern_path": "python/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "def foo():\n    # ERROR:\n    foo(1, 2)\n\n    # ERROR:\n    foo(a_very_long_constant_name, 2)\n\n    # ERROR:\n    foo(unsafe(), 2)  # indeed\n\n    # ERROR:\n    foo(bar(1, 3), 2)\n\n    foo(2, 1)\n",
          "code_path": "python/metavar_arg.py",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 38,
                "line": 6,
                "offset": 89
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 21,
                "line": 9,
                "offset": 124
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 108
              }
            },
            {
              "end": {
                "col": 22,
                "line": 12,
                "offset": 170
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 153
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "# ERROR:\nclass Foo:\n    def foo ():\n        foo (3)\n# ERROR:\nclass Anything(Foo):\n    def foos ():\n        foo (4)\n\ndef foo(var):\n    foo (3)\n\n\n",
          "code_path": "python/metavar_class_def.py",
          "highlights": [
            {
              "end": {
                "col": 16,
                "line": 4,
                "offset": 51
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 16,
                "line": 8,
                "offset": 114
              },
              "start": {
                "col": 1,
                "line": 6,
                "offset": 61
              }
            }
          ],
          "pattern": "class $X:\n    ...\n",
          "pattern_path": "python/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "def foo():\n    x = 1\n    # ERROR:\n    if x > 2:\n        foo()\n",
          "code_path": "python/metavar_cond.py",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 5,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 38
              }
            }
          ],
          "pattern": "if $E:\n   foo()\n",
          "pattern_path": "python/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "def foo():\n    # ERROR:\n    foo(1, 2)\n\n    return 1\n",
          "code_path": "python/metavar_call.py",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 37
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "# ERROR:\ndef foo():\n    foo(1,2)\n\n# ERROR:\ndef bar(bar1, bar2, bar3):\n    bar (1,2,3)\n\n# ERROR:\ndef foobar(bar1) -> int:\n    bar(1,2,3)\n    foo()\n    return 3\n",
          "code_path": "python/metavar_func_def.py",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 32
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 16,
                "line": 7,
                "offset": 85
              },
              "start": {
                "col": 1,
                "line": 6,
                "offset": 43
              }
            },
            {
              "end": {
                "col": 13,
                "line": 13,
                "offset": 158
              },
              "start": {
                "col": 1,
                "line": 10,
                "offset": 96
              }
            }
          ],
          "pattern": "def $X(...):\n    ...\n",
          "pattern_path": "python/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "#ERROR: match\nimport foo.something",
          "code_path": "python/metavar_import.py",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 2,
                "offset": 34
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 14
              }
            }
          ],
          "pattern": "import foo.$BAR",
          "pattern_path": "python/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "def foo():\n    # ERROR:\n    thisdict = {\n        key:value,\n        key2:value2,\n        key3:value3\n    }\n\n    # ERROR:\n    foo = {\n        foo:bar\n    }\n",
          "code_path": "python/metavar_key_value.py",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 7,
                "offset": 106
              },
              "start": {
                "col": 16,
                "line": 3,
                "offset": 39
              }
            },
            {
              "end": {
                "col": 6,
                "line": 12,
                "offset": 154
              },
              "start": {
                "col": 11,
                "line": 10,
                "offset": 131
              }
            }
          ],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "def foo():\n    var = 1\n    # ERROR:\n    if var > 2:\n        return 1\n",
          "code_path": "python/metavar_stmt.py",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 68
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "if var > 2:\n   $S\n",
          "pattern_path": "python/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.py",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.py",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "#ERROR: match\npath = \"/location/1\";",
          "code_path": "python/regexp_string.py",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 2,
                "offset": 34
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 14
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "def test_equal():\n    a = 1\n    b = 2\n    # ERROR: match\n    if a + b == a + b:\n        return 1\n    return 0\n",
          "code_path": "python/metavar_equality_expr.py",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 5,
                "offset": 78
              },
              "start": {
                "col": 8,
                "line": 5,
                "offset": 64
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "def foo():\n    # ERROR:\n    if x > 2:\n        foo()\n        bar()\n    else:\n        foo()\n        bar()\n\n    if x > 2:\n        foo()\n        bar()\n    else:\n        foo()\n",
          "code_path": "python/metavar_equality_stmt.py",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 8,
                "offset": 103
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "if $E:\n  $S\nelse:\n  $S\n",
          "pattern_path": "python/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "def foo():\n    # ERROR:\n    myfile = open()\n    close(myfile)\n",
          "code_path": "python/metavar_equality_var.py",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "$V = open()\nclose($V)\n",
          "pattern_path": "python/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "def foo():\n    # ERROR:\n    foo(1, 2, 3, 4, 5)\n    # ERROR:\n    foo(5)\n",
          "code_path": "python/dots_args.py",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 3,
                "offset": 46
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 70
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 64
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "def foo():\n    \n  #ERROR: match\n  f = o.foo().m().h().bar().z()\n\n  #ERROR: match\n  f = o.foo().bar()\n\n  # this one does not contain the bar()\n  f = o.foo().m().h().z()\n\n  #ERROR: match $O can match o.before()\n  f = o.before().foo().m().h().bar().z()\n",
          "code_path": "python/dots_method_chaining.py",
          "highlights": [
            {
              "end": {
                "col": 32,
                "line": 4,
                "offset": 63
              },
              "start": {
                "col": 3,
                "line": 4,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 100
              },
              "start": {
                "col": 3,
                "line": 7,
                "offset": 83
              }
            },
            {
              "end": {
                "col": 41,
                "line": 13,
                "offset": 249
              },
              "start": {
                "col": 3,
                "line": 13,
                "offset": 211
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "def foo():\n    #ERROR: match\n    if (x == some_cond):\n        print('matched')\n    else:\n        print('not matched')\n    \n\n",
          "code_path": "python/dots_nested_stmts.py",
          "highlights": [
            {
              "end": {
                "col": 29,
                "line": 6,
                "offset": 117
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 33
              }
            }
          ],
          "pattern": "if (...):\n  ...\n\n",
          "pattern_path": "python/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "def foo():\n\n    # ERROR:\n    user_data = get()\n    print(\"do stuff\")\n    foobar()\n    eval(user_data)\n",
          "code_path": "python/dots_stmts.py",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 101
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 29
              }
            }
          ],
          "pattern": "$V = get()\n...\neval($V)\n",
          "pattern_path": "python/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "def foo():\n    # ERROR:\n    foo(\"whatever sequence of chars\")\n    # foo('whatever sequence of chars')\n\n    # ERROR:\n    foo(f'constant string')\n\n    # this string is not a constant, and therefore will not be matched.\n    foo(f'string {var} interpolation')\n",
          "code_path": "python/dots_string.py",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 28,
                "line": 7,
                "offset": 143
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 120
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "r": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.r",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.r",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "foo <- function () {\n --ERROR:\n    foo(1,2)\n\n #ERROR:\n foo(1,\n     2)\n\n #ERROR:\n foo (1, #comment\n      2)\n\n foo(2,1)\n}",
          "code_path": "r/concrete_syntax.r",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 43
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 35
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 69
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 55
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 106
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 81
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.r",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.r",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.r",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "foo <- function () {\n    #ERROR:\n    foo(1,2)\n\n    #ERROR:\n    foo(a_very_long_constant_name,\n        2)\n\n    #ERROR:\n    foo (unsafe(), #indeed\n         2)\n\n    #ERROR:\n    foo(bar(1,3), 2)\n\n    foo(2,1)\n}\n\n",
          "code_path": "r/metavar_arg.r",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 45
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 37
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 104
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 63
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 156
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 122
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 190
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 174
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.r",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.r",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "foo <- function () {\n    #ERROR:\n    foo(1,2)\n\n    return 1\n}\n\n\n",
          "code_path": "r/metavar_call.r",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 45
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 37
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.r",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.r",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.r",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.r",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.r",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.r",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.r",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.r",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.r",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.r",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "foo <- function () {\n  #ERROR:\n    myfile = open()\n    close(myfile)\n}\n\n\n\n\n",
          "code_path": "r/metavar_equality_var.r",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 68
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 35
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "foo <- function () {\n  #ERROR:\n    foo(1,2,3,4,5)\n  #ERROR:\n    foo(5)\n}\n\n\n",
          "code_path": "r/dots_args.r",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 49
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 35
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 70
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 64
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.r",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "foo <- function () {\n    #ERROR: match\n    if (x == 1) then\n        return 2\n    end\n}\n\n",
          "code_path": "r/dots_nested_stmts.r",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 3,
                "offset": 59
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 43
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "foo <- function () {\n    #ERROR:\n    user_data <- get()\n    print(\"do stuff\")\n    foobar()\n    eval(user_data)\n}\n",
          "code_path": "r/dots_stmts.r",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 6,
                "offset": 110
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 37
              }
            }
          ],
          "pattern": "$V <- get()\n...\neval($V)\n\n",
          "pattern_path": "r/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "foo <- function() {\n    #ERROR:\n    foo(\"whatever sequence of chars\")\n    #ERROR:\n    foo('whatever sequence of chars')\n}",
          "code_path": "r/dots_string.r",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 36
              }
            },
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 119
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 86
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "ruby": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "def bar()\n    baz = 0\n    #ERROR: match\n    foo(baz + 42)\n    #ERROR: match\n    foo(/hello #{world + 42}/)\nend\n",
          "code_path": "ruby/deep_expr_operator.rb",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 57
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 44
              }
            },
            {
              "end": {
                "col": 31,
                "line": 6,
                "offset": 106
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 80
              }
            }
          ],
          "pattern": "foo(<... 42 ...>)\n",
          "pattern_path": "ruby/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "def foo()\n    #ERROR: match\n    foo()\n    bar()\n    #ERROR: match\n    foo()\n    x = bar()\n    #ERROR: match\n    foo()\n    print(bar())\n    #ERROR: match\n    foo()\n    return bar()\nend\n",
          "code_path": "ruby/deep_exprstmt.rb",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 4,
                "offset": 47
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 89
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 70
              }
            },
            {
              "end": {
                "col": 17,
                "line": 10,
                "offset": 134
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 112
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 179
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 157
              }
            }
          ],
          "pattern": "foo()\nbar()",
          "pattern_path": "ruby/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "def foo()\n    # ERROR:\n    foo(1,2)\n\n    # ERROR:\n    foo(1,\n        2)\n\n    # ERROR:\n    foo(1, # comment \n        2)\n \n    foo(2, 1)\nend\n",
          "code_path": "ruby/concrete_syntax.rb",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 35
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 71
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 54
              }
            },
            {
              "end": {
                "col": 11,
                "line": 11,
                "offset": 118
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 90
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "PASSWORD = \"password\"\ndef foo()\n    #ERROR: match\n    func(PASSWORD)\nend\n\n# we even handle this case!\nA=PASSWORD\ndef foo2()\n    #ERROR: match\n    func(A)\nend\n",
          "code_path": "ruby/equivalence_constant_propagation.rb",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 68
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 54
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 153
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 146
              }
            }
          ],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Argument": [
        {
          "code": "def foo()\n    # ERROR:\n    foo(1, 2)\n\n    # ERROR:\n    foo(a_very_long_constant_name, 2)\n\n    # ERROR:\n    foo(unsafe(), # indeed\n        2)\n\n    # ERROR:\n    foo(bar(1, 3), 2)\n\n    foo(2, 1)\nend\n",
          "code_path": "ruby/metavar_arg.rb",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 36
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 38,
                "line": 6,
                "offset": 88
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 55
              }
            },
            {
              "end": {
                "col": 11,
                "line": 10,
                "offset": 140
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 107
              }
            },
            {
              "end": {
                "col": 22,
                "line": 13,
                "offset": 176
              },
              "start": {
                "col": 5,
                "line": 13,
                "offset": 159
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "# ERROR:\nclass Foo\n  def foo()\n    foo(1,2)\n  end \nend\n\n# ERROR:\nclass Foo::Bar\nend\n",
          "code_path": "ruby/metavar_class_def.rb",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 43
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 15,
                "line": 9,
                "offset": 79
              },
              "start": {
                "col": 1,
                "line": 9,
                "offset": 65
              }
            }
          ],
          "pattern": "class $X\n    ...\nend\n",
          "pattern_path": "ruby/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "def foo()\n    x = 1\n    # ERROR:\n    if x > 2\n        foo()\n    end\nend\n\n",
          "code_path": "ruby/metavar_cond.rb",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 5,
                "offset": 59
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 37
              }
            }
          ],
          "pattern": "if $E\n   foo()\nend\n",
          "pattern_path": "ruby/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "def foo()\n    # ERROR:\n    foo(1, 2)\n\n    return 1\nend\n\n",
          "code_path": "ruby/metavar_call.rb",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 36
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "# ERROR:\ndef foo()\n  foo(1,2)\nend\n\n# ERROR:\ndef bar(bar1, bar2, bar3)\n  foo(1,2)\n  bar(1,2,3)\nend\n\n",
          "code_path": "ruby/metavar_func_def.rb",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 3,
                "offset": 29
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            },
            {
              "end": {
                "col": 13,
                "line": 9,
                "offset": 93
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 44
              }
            }
          ],
          "pattern": "def $X(...)\n    ...\nend\n",
          "pattern_path": "ruby/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "#ERROR: match\nrequire 'foo'\n",
          "code_path": "ruby/metavar_import.rb",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 2,
                "offset": 27
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 14
              }
            }
          ],
          "pattern": "require $R\n",
          "pattern_path": "ruby/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "#ERROR: match\noptions = { key1: 41, key2: 42, key3: 43 }\noptions[:key2]  # => 42\n",
          "code_path": "ruby/metavar_key_value.rb",
          "highlights": [
            {
              "end": {
                "col": 43,
                "line": 2,
                "offset": 56
              },
              "start": {
                "col": 11,
                "line": 2,
                "offset": 24
              }
            }
          ],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "def foo()\n    var = 1\n    # ERROR:\n    if var > 2\n        return 1\n    end\nend\n\n",
          "code_path": "ruby/metavar_stmt.rb",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 66
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 39
              }
            }
          ],
          "pattern": "if $X > $Y\n   $S\nend\n\n",
          "pattern_path": "ruby/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.rb",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.rb",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "# ERROR:\npath = \"/location/1\"\n",
          "code_path": "ruby/regexp_string.rb",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 2,
                "offset": 29
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "$X = \"=~/\\/[lL]ocation.*/\"",
          "pattern_path": "ruby/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "def test_equal()\n    a = 1\n    b = 2\n    # ERROR: match\n    if a + b == a + b\n        return 1\n    end\n    return 0\nend\n\n",
          "code_path": "ruby/metavar_equality_expr.rb",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 5,
                "offset": 77
              },
              "start": {
                "col": 8,
                "line": 5,
                "offset": 63
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "def foo()\n    # ERROR:\n    if x > 2\n        foo()\n        bar()\n    else\n        foo()\n        bar()\n    end\n\n    if x > 2\n        foo()\n        bar()\n    else\n        foo()\n    end\nend\n\n",
          "code_path": "ruby/metavar_equality_stmt.rb",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 8,
                "offset": 100
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            }
          ],
          "pattern": "if $E\n  $S\nelse\n  $S\nend\n\n",
          "pattern_path": "ruby/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "def foo()\n    # ERROR:\n    myfile = open()\n    close(myfile)\nend\n\n",
          "code_path": "ruby/metavar_equality_var.rb",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 60
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            }
          ],
          "pattern": "$V = open()\nclose($V)\n",
          "pattern_path": "ruby/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "def foo()\n    # ERROR:\n    foo(1, 2, 3, 4, 5)\n    # ERROR:\n    foo(5)\nend\n\n",
          "code_path": "ruby/dots_args.rb",
          "highlights": [
            {
              "end": {
                "col": 23,
                "line": 3,
                "offset": 45
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 63
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "def foo()\n    \n  #ERROR: match\n  f = o.foo().m().h().bar().z()\n\n  #ERROR: match\n  f = o.foo().bar()\n\n  # this one does not contain the bar()\n  f = o.foo().m().h().z()\n\n  #ERROR: match $O can match o.before()\n  f = o.before().foo().m().h().bar().z()\nend\n",
          "code_path": "ruby/dots_method_chaining.rb",
          "highlights": [
            {
              "end": {
                "col": 32,
                "line": 4,
                "offset": 62
              },
              "start": {
                "col": 3,
                "line": 4,
                "offset": 33
              }
            },
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 99
              },
              "start": {
                "col": 3,
                "line": 7,
                "offset": 82
              }
            },
            {
              "end": {
                "col": 41,
                "line": 13,
                "offset": 248
              },
              "start": {
                "col": 3,
                "line": 13,
                "offset": 210
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "def foo\n    # ERROR:\n    if 1 != 3 then\n        foo()\n    end\n\n    # ERROR:\n    if 1 != 3\n        foo()\n    end\n\n    # ERROR:\n    if 1 == 1\n        foo()\n        bar()\n        baz()\n    end\nend\n\n",
          "code_path": "ruby/dots_nested_stmts.rb",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 4,
                "offset": 53
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 25
              }
            },
            {
              "end": {
                "col": 14,
                "line": 9,
                "offset": 103
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 80
              }
            },
            {
              "end": {
                "col": 14,
                "line": 16,
                "offset": 181
              },
              "start": {
                "col": 5,
                "line": 13,
                "offset": 130
              }
            }
          ],
          "pattern": "if ... then\n  ...\nend\n",
          "pattern_path": "ruby/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "def foo(user)\n    # ERROR:\n    user_data = get_data user\n    puts \"... more stuff here ...\"\n    eval user_data\n\nend\n",
          "code_path": "ruby/dots_stmts.rb",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 110
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 31
              }
            }
          ],
          "pattern": "$V = get_data user\n...\neval $V\n\n",
          "pattern_path": "ruby/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "def foo()\n    # ERROR:\n    foo(\"whatever sequence of chars\")\n    # foo('whatever sequence of chars')\n\n    # this string is not a constant, and therefore will not be matched.\n    foo(\"string #{var} interpolation\")\nend\n\n",
          "code_path": "ruby/dots_string.rb",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 60
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 27
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "rust": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "fn main() {\n  // ERROR:\n  let x = foo(bar(1 + 42))\n}",
          "code_path": "rust/deep_expr_operator.rs",
          "highlights": [
            {
              "end": {
                "col": 27,
                "line": 3,
                "offset": 50
              },
              "start": {
                "col": 7,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "fn foo() {\n    //ERROR: match\n    foo();\n    bar();\n    //ERROR: match\n    foo();\n    x = bar();\n    //ERROR: match\n    foo();\n    print(bar());\n    //ERROR: match\n    foo();\n    return bar();\n}\n",
          "code_path": "rust/deep_exprstmt.rs",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 4,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 96
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 75
              }
            },
            {
              "end": {
                "col": 18,
                "line": 10,
                "offset": 144
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 120
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 191
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 168
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "fn foo() {\n //ERROR:\n    foo(1,2);\n\n //ERROR:\n foo(1,\n     2);\n\n //ERROR:\n foo (1, // comment\n      2);\n\n foo(2,1);\n}\n",
          "code_path": "rust/concrete_syntax.rs",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 33
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 25
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 61
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 47
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 102
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 75
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.rs",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.rs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.rs",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "fn foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe_func(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n",
          "code_path": "rust/metavar_arg.rs",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 36
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 97
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 56
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 158
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 117
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 194
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 178
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "// ERROR:\nstruct Foo {\n    x: u32,\n}\n\nimpl FooI {\n}\n\nmod m1 {\n}\n",
          "code_path": "rust/metavar_class_def.rs",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 4,
                "offset": 36
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            }
          ],
          "pattern": "struct $FOO { ... }\n",
          "pattern_path": "rust/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "fn foo() {\n    x = 1;\n    //ERROR:\n    if (x > 2) {\n        foo();\n    }\n}\n",
          "code_path": "rust/metavar_cond.rs",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 6,
                "offset": 72
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 39
              }
            }
          ],
          "pattern": "if ($E) {\n   foo();\n}",
          "pattern_path": "rust/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "fn foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n\n",
          "code_path": "rust/metavar_call.rs",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 36
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "// ERROR:\nfn foo() {\n}\n\n// ERROR:\nfn foo2(a: u32) {\n}\n\n// ERROR:\nfn foo2(a: u32) -> u32 {\n}\n",
          "code_path": "rust/metavar_func_def.rs",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 3,
                "offset": 22
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 7,
                "offset": 53
              },
              "start": {
                "col": 1,
                "line": 6,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 2,
                "line": 11,
                "offset": 91
              },
              "start": {
                "col": 1,
                "line": 10,
                "offset": 65
              }
            }
          ],
          "pattern": "fn $FOO(...) { ... }\n",
          "pattern_path": "rust/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "//ERROR: match\nuse java::util::ArrayList;\n//ERROR: match\nuse java::util::List;\n\nfn Foo() {\n}\n",
          "code_path": "rust/metavar_import.rs",
          "highlights": [
            {
              "end": {
                "col": 26,
                "line": 2,
                "offset": 40
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            },
            {
              "end": {
                "col": 21,
                "line": 4,
                "offset": 77
              },
              "start": {
                "col": 1,
                "line": 4,
                "offset": 57
              }
            }
          ],
          "pattern": "use $X;\n",
          "pattern_path": "rust/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.rs",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "fn foo() {\n    v = 1;\n    //ERROR:\n    if (v > 2) {\n        return 1;\n    }\n}\n\n",
          "code_path": "rust/metavar_stmt.rs",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 6,
                "offset": 75
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 39
              }
            }
          ],
          "pattern": "if ($X > $Y) {\n   $S;\n}\n",
          "pattern_path": "rust/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.rs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.rs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.rs",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.rs",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "fn test_equal() {\n    a = 1;\n    b = 2;\n    //ERROR: match\n    if (a+b == a+b) {\n        return 1;\n    }\n    return 0;\n}\n",
          "code_path": "rust/metavar_equality_expr.rs",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 77
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 67
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "fn foo() {\n    //ERROR:\n    if (x > 2) {\n        return 1;\n    } else {\n        return 1;\n    }\n    // nope, not here\n    if (x > 2) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n",
          "code_path": "rust/metavar_equality_stmt.rs",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 7,
                "offset": 95
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "if ($E) {\n  $S;\n}\nelse {\n  $S;\n}\n\n",
          "pattern_path": "rust/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "fn foo() {\n  //ERROR:\n    myfile = open();\n    close(myfile);\n}\n\n\n\n\n",
          "code_path": "rust/metavar_equality_var.rs",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 26
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "fn foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n\n\n",
          "code_path": "rust/dots_args.rs",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 40
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 26
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 57
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "use std::process::Command;\n\nfn main() -> io::Result<()> {\n    // ERROR: match\n    let proc = Command::new(\"semgrep-core\")\n        .args([\"-l\", \"rust\"])\n        .args([\"-rules\", \"test.yaml\"])\n        .output()\n        .expect(\"failed to execute process\");\n\n    Ok(())\n}\n",
          "code_path": "rust/dots_method_chaining.rs",
          "highlights": [
            {
              "end": {
                "col": 45,
                "line": 9,
                "offset": 253
              },
              "start": {
                "col": 16,
                "line": 5,
                "offset": 93
              }
            }
          ],
          "pattern": "Command::new(...). ... .expect(...)\n",
          "pattern_path": "rust/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "fn test() {\n        //ERROR:\n        if (x == some_cond) {\n            Console.WriteLine(\"matched\");\n\t}\n        else {\n            Console.WriteLine(\"not matched\");\n\t}\n}\n\n",
          "code_path": "rust/dots_nested_stmts.rs",
          "highlights": [
            {
              "end": {
                "col": 3,
                "line": 8,
                "offset": 167
              },
              "start": {
                "col": 9,
                "line": 3,
                "offset": 37
              }
            }
          ],
          "pattern": "if (...)\n{\n    ...\n}\n",
          "pattern_path": "rust/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "fn foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n",
          "code_path": "rust/dots_stmts.rs",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 7,
                "offset": 105
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 29
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "fn foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n    // TODO other form of string in Rust?\n    //foo('whatever sequence of chars');\n}\n",
          "code_path": "rust/dots_string.rs",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 61
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 28
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "scala": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "def bar() = {\n\t//ERROR: match\n\treturn foo(baz + 42)\n}",
          "code_path": "scala/deep_expr_operator.scala",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 3,
                "offset": 51
              },
              "start": {
                "col": 9,
                "line": 3,
                "offset": 38
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "object Foo {\n\ndef foo() {\n    //ERROR: match\n    foo()\n    bar()\n    //ERROR: match\n    foo()\n    x = bar()\n    //ERROR: match\n    foo()\n    print(bar())\n    //ERROR: match\n    foo()\n    return bar()\n}\n}\n",
          "code_path": "scala/deep_exprstmt.scala",
          "highlights": [
            {
              "end": {
                "col": 10,
                "line": 6,
                "offset": 64
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 49
              }
            },
            {
              "end": {
                "col": 14,
                "line": 9,
                "offset": 107
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 88
              }
            },
            {
              "end": {
                "col": 17,
                "line": 12,
                "offset": 153
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 131
              }
            },
            {
              "end": {
                "col": 17,
                "line": 15,
                "offset": 199
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 177
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "object Foo { \n\ndef foo() {\n //ERROR:\n    foo(1,2)\n\n //ERROR:\n foo(1,\n     2)\n\n //ERROR:\n foo (1, // comment\n      2)\n\n foo(2,1)\n}\n}\n",
          "code_path": "scala/concrete_syntax.scala",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 49
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 41
              }
            },
            {
              "end": {
                "col": 8,
                "line": 9,
                "offset": 76
              },
              "start": {
                "col": 2,
                "line": 8,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 9,
                "line": 13,
                "offset": 116
              },
              "start": {
                "col": 2,
                "line": 12,
                "offset": 89
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "\ndef ohno = {\n    val bad = \"password\"\n\n    //ERROR: match\n    f(\"password\");\n\n    //ERROR: match\n    f(bad);\n}",
          "code_path": "scala/equivalence_constant_propagation.scala",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 6,
                "offset": 76
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 63
              }
            },
            {
              "end": {
                "col": 11,
                "line": 9,
                "offset": 108
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 102
              }
            }
          ],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": "\nimport subprocess.open\nimport subprocess.{open => sub_open}\n\ndef foo = {\n    //ERROR: match\n    result = subprocess.open(\"ls\")\n\n    //ERROR: match\n    result = sub_open(\"ls\")\n\n}",
          "code_path": "scala/equivalence_naming_import.scala",
          "highlights": [
            {
              "end": {
                "col": 35,
                "line": 7,
                "offset": 127
              },
              "start": {
                "col": 14,
                "line": 7,
                "offset": 106
              }
            },
            {
              "end": {
                "col": 28,
                "line": 10,
                "offset": 175
              },
              "start": {
                "col": 14,
                "line": 10,
                "offset": 161
              }
            }
          ],
          "pattern": "subprocess.open(...)",
          "pattern_path": "scala/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": "\n//ERROR: match\n@Anno\nclass Foo1 {}\n\n//ERROR: match\n@Anno1\n@Anno2\nclass Foo2 {}\n\n//OK:\n@Anno(x)\nclass Foo3 {}\n\n//OK:\nclass Foo4 {}",
          "code_path": "scala/metavar_anno.scala",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 4,
                "offset": 35
              },
              "start": {
                "col": 1,
                "line": 3,
                "offset": 16
              }
            },
            {
              "end": {
                "col": 14,
                "line": 9,
                "offset": 79
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 52
              }
            }
          ],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "object Foo {\ndef foo() {\n    //ERROR:\n    foo(1,2)\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2)\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2)\n\n    //ERROR:\n    foo(bar(1,3), 2)\n\n    foo(2,1)\n}\n}\n\n",
          "code_path": "scala/metavar_arg.scala",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 42
              }
            },
            {
              "end": {
                "col": 11,
                "line": 8,
                "offset": 110
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 69
              }
            },
            {
              "end": {
                "col": 12,
                "line": 12,
                "offset": 165
              },
              "start": {
                "col": 5,
                "line": 11,
                "offset": 129
              }
            },
            {
              "end": {
                "col": 21,
                "line": 15,
                "offset": 200
              },
              "start": {
                "col": 5,
                "line": 15,
                "offset": 184
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": "//ERROR:\nclass Foo {\n    val x = 0\n\n    def bar (x : Int) : Int = x\n}",
          "code_path": "scala/metavar_class_def.scala",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 6,
                "offset": 69
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "object Foo {\n    def f(x : Bool) : Int = {\n        //ERROR:\n        if (x) {\n            return foo()\n        }\n    }\n}",
          "code_path": "scala/metavar_cond.scala",
          "highlights": [
            {
              "end": {
                "col": 25,
                "line": 5,
                "offset": 101
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 68
              }
            }
          ],
          "pattern": "if ($E) {\n    foo()\n}",
          "pattern_path": "scala/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "object Foo {\ndef foo() {\n    //ERROR:\n    foo(1,2)\n\n    return 1\n}\n}\n\n\n\n",
          "code_path": "scala/metavar_call.scala",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 4,
                "offset": 50
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 42
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "object Test {\n    // ERROR:\n    def foo() : Int = 1\n\n    // ERROR:\n    def bar(bar1 : Int, bar2 : Bool, bar3 : String) : Bool = {\n        return bar2\n    }\n\n}",
          "code_path": "scala/metavar_func_def.scala",
          "highlights": [
            {
              "end": {
                "col": 24,
                "line": 3,
                "offset": 51
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 20,
                "line": 7,
                "offset": 149
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 71
              }
            }
          ],
          "pattern": "def $FUNC(...) : $T = ...",
          "pattern_path": "scala/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "//ERROR:\nimport Lib._\nimport Lib.Thingy\nimport Lib.{ ThingA => ThingB, ThingC => ThingD }",
          "code_path": "scala/metavar_import.scala",
          "highlights": [
            {
              "end": {
                "col": 30,
                "line": 4,
                "offset": 69
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "import $A._\nimport $B.Thingy\nimport $C.{ $X => $Y }\n",
          "pattern_path": "scala/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "//ERROR: match\ndef x = Map(\"x\" -> 1, \"y\" -> 2)\n\n//OK:\ndef y = Map2(\"x\" -> 1, \"y\" -> 2)",
          "code_path": "scala/metavar_key_value.scala",
          "highlights": [
            {
              "end": {
                "col": 32,
                "line": 2,
                "offset": 46
              },
              "start": {
                "col": 9,
                "line": 2,
                "offset": 23
              }
            }
          ],
          "pattern": "Map(..., $KEY -> $VALUE, ...)",
          "pattern_path": "scala/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "object Foo {\n    def foo () : Int = {\n        //ERROR:\n        if (cond) {\n            return 1\n        }\n    }\n}",
          "code_path": "scala/metavar_stmt.scala",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 5,
                "offset": 95
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 63
              }
            }
          ],
          "pattern": "if ($E) {\n    $S\n}",
          "pattern_path": "scala/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.scala",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": "def foo = {\n  val x: Int = 0\n  val y: String = \"\"\n  //ERROR: match\n  foo(x);\n\n  //OK:\n  foo(y);\n}\n",
          "code_path": "scala/metavar_typed.scala",
          "highlights": [
            {
              "end": {
                "col": 9,
                "line": 5,
                "offset": 75
              },
              "start": {
                "col": 3,
                "line": 5,
                "offset": 69
              }
            }
          ],
          "pattern": "foo($X : Int)",
          "pattern_path": "scala/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.scala",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.scala",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "object Foo {\n    //ERROR:\n    val x = (a + b - foo()) == (a + b - foo())\n}",
          "code_path": "scala/metavar_equality_expr.scala",
          "highlights": [
            {
              "end": {
                "col": 46,
                "line": 3,
                "offset": 71
              },
              "start": {
                "col": 14,
                "line": 3,
                "offset": 39
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "object Foo {\n    def foo() = {\n\n        //ERROR:\n        if (cond) {\n            bar()\n        }\n        else {\n            bar()\n        }\n\n        if (cond) {\n            bar()\n        }\n        else {\n            baz()\n        }\n\n    }\n}",
          "code_path": "scala/metavar_equality_stmt.scala",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 9,
                "offset": 129
              },
              "start": {
                "col": 9,
                "line": 5,
                "offset": 57
              }
            }
          ],
          "pattern": "if ($E) {\n    $S\n}\nelse {\n    $S\n}",
          "pattern_path": "scala/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "object Foo {\ndef foo() {\n  //ERROR:\n    myfile = open()\n    close(myfile)\n}\n}\n\n\n\n\n\n",
          "code_path": "scala/metavar_equality_var.scala",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "object Foo {\n\ndef foo() {\n  //ERROR:\n  foo(1,2,3,4,5)\n  //ERROR:\n  foo(5)\n}\n}\n\n\n\n",
          "code_path": "scala/dots_args.scala",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 5,
                "offset": 53
              },
              "start": {
                "col": 3,
                "line": 5,
                "offset": 39
              }
            },
            {
              "end": {
                "col": 9,
                "line": 7,
                "offset": 73
              },
              "start": {
                "col": 3,
                "line": 7,
                "offset": 67
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "    \n//ERROR: match\ndef f = o.foo().m().h().bar().z()\n\n//ERROR: match\ndef f = o.foo().bar()\n\n  // this one does not contain the bar()\ndef f = o.foo().m().h().z()\n\n  //ERROR: match $O can match o.before()\ndef f = o.before().foo().m().h().bar().z()\n\n",
          "code_path": "scala/dots_method_chaining.scala",
          "highlights": [
            {
              "end": {
                "col": 34,
                "line": 3,
                "offset": 53
              },
              "start": {
                "col": 1,
                "line": 3,
                "offset": 20
              }
            },
            {
              "end": {
                "col": 22,
                "line": 6,
                "offset": 91
              },
              "start": {
                "col": 1,
                "line": 6,
                "offset": 70
              }
            },
            {
              "end": {
                "col": 43,
                "line": 12,
                "offset": 246
              },
              "start": {
                "col": 1,
                "line": 12,
                "offset": 204
              }
            }
          ],
          "pattern": "def $X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "scala/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "object Foo {\n\ndef foo() {\n\n    //ERROR: match\n    if (x == 1) {\n        return 2\n    }\n}\n}\n\n\n",
          "code_path": "scala/dots_nested_stmts.scala",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 7,
                "offset": 80
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 50
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "object Foo {\ndef foo() {\n\n    //ERROR:\n    user_data = get()\n    print(\"do stuff\")\n    foobar()\n    eval(user_data)\n}\n}\n\n",
          "code_path": "scala/dots_stmts.scala",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 8,
                "offset": 115
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 43
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "object Foo {\ndef foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\")\n    //ERROR:\n    foo(s\"whatever sequence of chars\")\n    //ERROR:\n    foo(\"\"\"whatever sequence of chars\"\"\")\n}\n}\n",
          "code_path": "scala/dots_string.scala",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 4,
                "offset": 75
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 42
              }
            },
            {
              "end": {
                "col": 39,
                "line": 6,
                "offset": 127
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 93
              }
            },
            {
              "end": {
                "col": 42,
                "line": 8,
                "offset": 182
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 145
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "solidity": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.sol",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "function foo() {\n    //ERROR: match\n    foo();\n    bar();\n    //ERROR: match\n    foo();\n    x = bar();\n    //ERROR: match\n    foo();\n    print(bar());\n    //ERROR: match\n    foo();\n    return bar();\n}\n",
          "code_path": "solidity/deep_exprstmt.sol",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 4,
                "offset": 57
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 40
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 102
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 81
              }
            },
            {
              "end": {
                "col": 18,
                "line": 10,
                "offset": 150
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 126
              }
            },
            {
              "end": {
                "col": 18,
                "line": 13,
                "offset": 198
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 174
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "function foo() {\n //ERROR:\n    foo(1,2);\n\n //ERROR:\n foo(1,\n     2);\n\n //ERROR:\n foo (1, // comment\n      2);\n\n foo(2,1);\n}\n",
          "code_path": "solidity/concrete_syntax.sol",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 39
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 31
              }
            },
            {
              "end": {
                "col": 8,
                "line": 7,
                "offset": 67
              },
              "start": {
                "col": 2,
                "line": 6,
                "offset": 53
              }
            },
            {
              "end": {
                "col": 9,
                "line": 11,
                "offset": 108
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 81
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.sol",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.sol",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.sol",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n\n",
          "code_path": "solidity/metavar_arg.sol",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 103
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 159
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 123
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 195
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 179
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.sol",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.sol",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n\n",
          "code_path": "solidity/metavar_call.sol",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.sol",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.sol",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.sol",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.sol",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.sol",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.sol",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.sol",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.sol",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.sol",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.sol",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "function foo() {\n  //ERROR:\n    myfile = open();\n    close(myfile);\n}\n\n\n\n\n",
          "code_path": "solidity/metavar_equality_var.sol",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "function foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n\n\n",
          "code_path": "solidity/dots_args.sol",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 46
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 63
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.sol",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "function foo() {\n\n    //ERROR: match\n    if (x == 1) {\n        return 2;\n    }\n}\n\n",
          "code_path": "solidity/dots_nested_stmts.sol",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 6,
                "offset": 78
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "function foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n",
          "code_path": "solidity/dots_stmts.sol",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 7,
                "offset": 111
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 35
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n    //ERROR:\n    foo('whatever sequence of chars');\n}",
          "code_path": "solidity/dots_string.sol",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 119
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 86
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "swift": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "func foo() {\n    // ERROR:\n    foo(bar(1 + 42))\n}\n",
          "code_path": "swift/deep_expr_operator.swift",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 3,
                "offset": 47
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 31
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "func foo() {\n    //ERROR: match\n    foo();\n    bar();\n    //ERROR: match\n    foo();\n    let x = bar();\n    //ERROR: match\n    foo()\n    print(bar());\n    //ERROR: match\n    foo();\n    return bar();\n}\n",
          "code_path": "swift/deep_exprstmt.swift",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 4,
                "offset": 53
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 36
              }
            },
            {
              "end": {
                "col": 18,
                "line": 7,
                "offset": 101
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 77
              }
            },
            {
              "end": {
                "col": 18,
                "line": 10,
                "offset": 149
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 126
              }
            },
            {
              "end": {
                "col": 18,
                "line": 13,
                "offset": 197
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 173
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "func foo() {\n    //ERROR:\n    foo(1, 2);\n    //ERROR:\n    foo(1,2);\n    //ERROR:\n    foo (1, 2);\n    //ERROR:\n    foo(1,\n      2);\n    //ERROR:\n    foo(1, // comment\n      2);\n\n    foo(2,1)\n}\n\n\n",
          "code_path": "swift/concrete_syntax.swift",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 39
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 13,
                "line": 5,
                "offset": 66
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 58
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 95
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 85
              }
            },
            {
              "end": {
                "col": 9,
                "line": 10,
                "offset": 129
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 114
              }
            },
            {
              "end": {
                "col": 9,
                "line": 13,
                "offset": 174
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 148
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.swift",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.swift",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.swift",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "func foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n\n",
          "code_path": "swift/metavar_arg.swift",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 38
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 99
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 58
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 155
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 119
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 191
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 175
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.swift",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.swift",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "func foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n",
          "code_path": "swift/metavar_call.swift",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 38
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.swift",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.swift",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.swift",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.swift",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.swift",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.swift",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.swift",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.swift",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.swift",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.swift",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "func foo() {\n    //ERROR:\n    myfile = open();\n    close(myfile);\n}\n",
          "code_path": "swift/metavar_equality_var.swift",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 65
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "func foo() {\n    //ERROR:\n    foo(1,2,3,4,5);\n    //ERROR:\n    foo(5);\n    //ERROR:\n    foo(1, 5);\n}\n\n",
          "code_path": "swift/dots_args.swift",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 44
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 63
              }
            },
            {
              "end": {
                "col": 14,
                "line": 7,
                "offset": 97
              },
              "start": {
                "col": 5,
                "line": 7,
                "offset": 88
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.swift",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "func foo() {\n    //ERROR: match\n    if (x == 1) {\n        return 2;\n    }\n}\n",
          "code_path": "swift/dots_nested_stmts.swift",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 5,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 36
              }
            }
          ],
          "pattern": "if ... {\n  ...\n}\n",
          "pattern_path": "swift/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "func foo() {\n    //ERROR:\n    let user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n",
          "code_path": "swift/dots_stmts.swift",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 6,
                "offset": 110
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "func foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n}\n\n",
          "code_path": "swift/dots_string.swift",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 63
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 30
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "terraform": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n    #ERROR:\n    a = foo(bar(42))\n}",
          "code_path": "terraform/deep_expr_operator.tf",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 3,
                "offset": 79
              },
              "start": {
                "col": 9,
                "line": 3,
                "offset": 67
              }
            }
          ],
          "pattern": "foo(<... 42 ...>)",
          "pattern_path": "terraform/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.tf",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n #ERROR:\n a = foo(1,2)\n\n #ERROR:\n b = foo(1,\n         2)\n\n #ERROR:\n c = foo (1, # comment\n          2)\n\n d = foo(2,1)\n}\n",
          "code_path": "terraform/concrete_syntax.tf",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 3,
                "offset": 69
              },
              "start": {
                "col": 6,
                "line": 3,
                "offset": 61
              }
            },
            {
              "end": {
                "col": 12,
                "line": 7,
                "offset": 103
              },
              "start": {
                "col": 6,
                "line": 6,
                "offset": 85
              }
            },
            {
              "end": {
                "col": 13,
                "line": 11,
                "offset": 149
              },
              "start": {
                "col": 6,
                "line": 10,
                "offset": 119
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "locals {\n  #ERROR: match\n  data_science = \"data-science\"\n}\nresource \"aws_s3_bucket\" \"athena_output_data_science\" {\n  #ERROR: match\n  bucket        = local.data_science\n}\n",
          "code_path": "terraform/equivalence_constant_propagation.tf",
          "highlights": [
            {
              "end": {
                "col": 32,
                "line": 3,
                "offset": 56
              },
              "start": {
                "col": 18,
                "line": 3,
                "offset": 42
              }
            },
            {
              "end": {
                "col": 37,
                "line": 7,
                "offset": 167
              },
              "start": {
                "col": 19,
                "line": 7,
                "offset": 149
              }
            }
          ],
          "pattern": "\"data-science\"\n",
          "pattern_path": "terraform/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.tf",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.tf",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n\n    #ERROR:\n    a = foo(1,2)\n\n    #ERROR:\n    b = foo(a_very_long_constant_name,\n           2)\n\n    #ERROR:\n    c = foo (unsafe(), #indeed\n             2)\n\n    #ERROR:\n    d = foo(bar(1,3), 2)\n\n    e = foo(2,1)\n}",
          "code_path": "terraform/metavar_arg.tf",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 4,
                "offset": 76
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 68
              }
            },
            {
              "end": {
                "col": 14,
                "line": 8,
                "offset": 142
              },
              "start": {
                "col": 9,
                "line": 7,
                "offset": 98
              }
            },
            {
              "end": {
                "col": 16,
                "line": 12,
                "offset": 202
              },
              "start": {
                "col": 9,
                "line": 11,
                "offset": 164
              }
            },
            {
              "end": {
                "col": 25,
                "line": 15,
                "offset": 240
              },
              "start": {
                "col": 9,
                "line": 15,
                "offset": 224
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.tf",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.tf",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n    #ERROR:\n    a = foo(1,2)\n\n    \n}",
          "code_path": "terraform/metavar_call.tf",
          "highlights": [
            {
              "end": {
                "col": 17,
                "line": 3,
                "offset": 75
              },
              "start": {
                "col": 9,
                "line": 3,
                "offset": 67
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.tf",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.tf",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.tf",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.tf",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.tf",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.tf",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.tf",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.tf",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.tf",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.tf",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "#ERROR:\nresource \"aws_ebs_volume\" \"web_host_storage\" {\n  myfile = open()\n  \n  x = close(myfile)\n}\n",
          "code_path": "terraform/metavar_equality_var.tf",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 6,
                "offset": 97
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 8
              }
            }
          ],
          "pattern": "resource \"...\" \"...\" {\n\n$V = open()\n...\n$RES = close($V)\n\n}",
          "pattern_path": "terraform/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n\n  #ERROR:\n  a = foo(1,2,3,4,5)\n  #ERROR:\n  b =  foo(5)\n}",
          "code_path": "terraform/dots_args.tf",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 4,
                "offset": 78
              },
              "start": {
                "col": 7,
                "line": 4,
                "offset": 64
              }
            },
            {
              "end": {
                "col": 14,
                "line": 6,
                "offset": 102
              },
              "start": {
                "col": 8,
                "line": 6,
                "offset": 96
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.tf",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.tf",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.tf",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n\n    #ERROR:\n    a = foo(\"whatever sequence of chars\")\n    #b = foo('whatever sequence of chars')\n}\n",
          "code_path": "terraform/dots_string.tf",
          "highlights": [
            {
              "end": {
                "col": 42,
                "line": 4,
                "offset": 101
              },
              "start": {
                "col": 9,
                "line": 4,
                "offset": 68
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "ts": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "function bar() {\n    baz = 0;\n    //ERROR: match\n    foo(baz + 42);\n}\n",
          "code_path": "ts/deep_expr_operator.ts",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 53
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": "function foo() {\n    //ERROR: match\n    foo();\n    bar();\n    //ERROR: match\n    foo();\n    x = bar();\n    //ERROR: match\n    foo();\n    print(bar());\n    //ERROR: match\n    foo();\n    await bar();\n    //ERROR: match\n    foo();\n    bar().then(other => stuff());\n    //ERROR: match\n    foo();\n    return bar();\n}\n",
          "code_path": "ts/deep_exprstmt.ts",
          "highlights": [
            {
              "end": {
                "col": 11,
                "line": 4,
                "offset": 57
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 40
              }
            },
            {
              "end": {
                "col": 15,
                "line": 7,
                "offset": 102
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 81
              }
            },
            {
              "end": {
                "col": 18,
                "line": 10,
                "offset": 150
              },
              "start": {
                "col": 5,
                "line": 9,
                "offset": 126
              }
            },
            {
              "end": {
                "col": 17,
                "line": 13,
                "offset": 197
              },
              "start": {
                "col": 5,
                "line": 12,
                "offset": 174
              }
            },
            {
              "end": {
                "col": 34,
                "line": 16,
                "offset": 261
              },
              "start": {
                "col": 5,
                "line": 15,
                "offset": 221
              }
            },
            {
              "end": {
                "col": 18,
                "line": 19,
                "offset": 309
              },
              "start": {
                "col": 5,
                "line": 18,
                "offset": 285
              }
            }
          ],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(1,\n        2);\n\n    //ERROR:\n    foo (1, //comment\n         2);\n\n    foo (2,1);\n}\n",
          "code_path": "ts/concrete_syntax.ts",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 79
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 128
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 99
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": "const Bar = \"password\";\n\nfunction foo() {\n     //ERROR: match!\n     password(Bar);\n}\n",
          "code_path": "ts/equivalence_constant_propagation.ts",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 5,
                "offset": 81
              },
              "start": {
                "col": 6,
                "line": 5,
                "offset": 68
              }
            }
          ],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.ts",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.ts",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    //ERROR:\n    foo(a_very_long_constant_name,\n        2);\n\n    //ERROR:\n    foo (unsafe(), // indeed\n         2);\n\n    //ERROR:\n    foo(bar(1,3), 2);\n\n    foo(2,1);\n}\n\n",
          "code_path": "ts/metavar_arg.ts",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 11,
                "line": 7,
                "offset": 103
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 12,
                "line": 11,
                "offset": 159
              },
              "start": {
                "col": 5,
                "line": 10,
                "offset": 123
              }
            },
            {
              "end": {
                "col": 21,
                "line": 14,
                "offset": 195
              },
              "start": {
                "col": 5,
                "line": 14,
                "offset": 179
              }
            }
          ],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.ts",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": "function foo() {\n    x = 1;\n    //ERROR:\n    if (x > 2)\n        foo();\n}\n\n",
          "code_path": "ts/metavar_cond.ts",
          "highlights": [
            {
              "end": {
                "col": 15,
                "line": 5,
                "offset": 70
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 45
              }
            }
          ],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(1,2);\n\n    return 1;\n}\n\n",
          "code_path": "ts/metavar_call.ts",
          "highlights": [
            {
              "end": {
                "col": 13,
                "line": 3,
                "offset": 42
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": "// ERROR:\nfunction foo() {\n    foo(1,2);\n}\n\n// ERROR:\nfunction bar(bar1:number,bar2:number,bar2:number) {\n    foo(1,2);\n    bar(1,2,3);\n}\n\n// ERROR:\nfunction foobar(bar1: number): number {\n    foo();\n}\n",
          "code_path": "ts/metavar_func_def.ts",
          "highlights": [
            {
              "end": {
                "col": 2,
                "line": 4,
                "offset": 42
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 10
              }
            },
            {
              "end": {
                "col": 2,
                "line": 10,
                "offset": 137
              },
              "start": {
                "col": 1,
                "line": 7,
                "offset": 54
              }
            },
            {
              "end": {
                "col": 2,
                "line": 15,
                "offset": 201
              },
              "start": {
                "col": 1,
                "line": 13,
                "offset": 149
              }
            }
          ],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": "//ERROR:\nimport bar from 'foo';\nlet x = bar.func_call('a');\n",
          "code_path": "ts/metavar_import.ts",
          "highlights": [
            {
              "end": {
                "col": 22,
                "line": 2,
                "offset": 30
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 9
              }
            }
          ],
          "pattern": "import $X from 'foo';\n",
          "pattern_path": "ts/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": "function foo(): number {\n    // ERROR:\n    var config = {\n        key: value,\n        key2: value2,\n        key3: value3,\n    };\n\n    var invoke = function(obj: {key: number, key2: string}) {\n        return 2;\n    };\n}\n",
          "code_path": "ts/metavar_key_value.ts",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 7,
                "offset": 127
              },
              "start": {
                "col": 18,
                "line": 3,
                "offset": 56
              }
            }
          ],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "function foo() {\n    v = 1;\n    //ERROR:\n    if (v > 2)\n        return 1;\n}\n\n",
          "code_path": "ts/metavar_stmt.ts",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 45
              }
            }
          ],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.ts",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.ts",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": "//ERROR: match\nvar x = {\"Location\": 1};\n",
          "code_path": "ts/regexp_fieldname.ts",
          "highlights": [
            {
              "end": {
                "col": 24,
                "line": 2,
                "offset": 38
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            }
          ],
          "pattern": "var $X = {\"=~/[lL]ocation/\": $Y};\n",
          "pattern_path": "ts/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "//ERROR: match\npath = \"/location/1\";",
          "code_path": "ts/regexp_string.ts",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 2,
                "offset": 35
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            }
          ],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": "function test_equal() {\n    a = 1;\n    b = 2;\n    //ERROR: match\n    if (a+b == a+b)\n        return 1;\n    return 0;\n}\n\n",
          "code_path": "ts/metavar_equality_expr.ts",
          "highlights": [
            {
              "end": {
                "col": 20,
                "line": 5,
                "offset": 84
              },
              "start": {
                "col": 8,
                "line": 5,
                "offset": 72
              }
            }
          ],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": "function foo() {\n    //ERROR:\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n        bar();\n    }\n\n    if (x > 2) {\n        foo();\n        bar();\n    } else {\n        foo();\n    }\n}\n\n\n\n",
          "code_path": "ts/metavar_equality_stmt.ts",
          "highlights": [
            {
              "end": {
                "col": 6,
                "line": 9,
                "offset": 125
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            }
          ],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": "function foo() {\n  //ERROR:\n    myfile = open();\n    close(myfile);\n}\n\n\n\n",
          "code_path": "ts/metavar_equality_var.ts",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 4,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            }
          ],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": "function foo() {\n  //ERROR:\n    foo(1,2,3,4,5);\n  //ERROR:\n    foo(5);\n}\n\n",
          "code_path": "ts/dots_args.ts",
          "highlights": [
            {
              "end": {
                "col": 19,
                "line": 3,
                "offset": 46
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 32
              }
            },
            {
              "end": {
                "col": 11,
                "line": 5,
                "offset": 69
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 63
              }
            }
          ],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": "//ERROR: match\nf = o.foo().m().h().bar().z();\n\n//ERROR: match\nf = o.foo().bar();\n\nf = o.foo().m().h().z();\n\n//ERROR: match $O can match o.before()\nf = o.before().foo().m().h().bar().z();\n",
          "code_path": "ts/dots_method_chaining.ts",
          "highlights": [
            {
              "end": {
                "col": 30,
                "line": 2,
                "offset": 44
              },
              "start": {
                "col": 1,
                "line": 2,
                "offset": 15
              }
            },
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 79
              },
              "start": {
                "col": 1,
                "line": 5,
                "offset": 62
              }
            },
            {
              "end": {
                "col": 39,
                "line": 10,
                "offset": 185
              },
              "start": {
                "col": 1,
                "line": 10,
                "offset": 147
              }
            }
          ],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": "function foo() {\n\n    //ERROR: match\n    if (x == 1) \n        return 2;\n}\n",
          "code_path": "ts/dots_nested_stmts.ts",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 5,
                "offset": 71
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 41
              }
            }
          ],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": "function foo() {\n\n    //ERROR:\n    user_data = get();\n    print(\"do stuff\");\n    foobar();\n    eval(user_data);\n}\n\n\n",
          "code_path": "ts/dots_stmts.ts",
          "highlights": [
            {
              "end": {
                "col": 21,
                "line": 7,
                "offset": 111
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 35
              }
            }
          ],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": "function foo() {\n    //ERROR:\n    foo(\"whatever sequence of chars\");\n    //ERROR:\n    foo('whatever sequence of chars');\n}\n\n",
          "code_path": "ts/dots_string.ts",
          "highlights": [
            {
              "end": {
                "col": 38,
                "line": 3,
                "offset": 67
              },
              "start": {
                "col": 5,
                "line": 3,
                "offset": 34
              }
            },
            {
              "end": {
                "col": 38,
                "line": 5,
                "offset": 119
              },
              "start": {
                "col": 5,
                "line": 5,
                "offset": 86
              }
            }
          ],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "vue": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": "<script>\nfunction foo() {\n //ERROR:\n foo(bar(1 + 42);\n\n foo(1);\n}\n\n\n</script>\n",
          "code_path": "vue/deep_expr_operator.vue",
          "highlights": [
            {
              "end": {
                "col": 18,
                "line": 4,
                "offset": 53
              },
              "start": {
                "col": 2,
                "line": 4,
                "offset": 37
              }
            }
          ],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.vue",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": "<script>\nfunction foo() {\n //ERROR:\n    foo(1, 2);\n //ERROR:\n    foo(1,2);\n //ERROR:\n    foo (1, 2);\n //ERROR:\n foo(1,\n     2);\n //ERROR:\n foo(1, // comment\n     2);\n\n foo(2,1)\n}\n\n\n</script>\n",
          "code_path": "vue/concrete_syntax.vue",
          "highlights": [
            {
              "end": {
                "col": 14,
                "line": 4,
                "offset": 49
              },
              "start": {
                "col": 5,
                "line": 4,
                "offset": 40
              }
            },
            {
              "end": {
                "col": 13,
                "line": 6,
                "offset": 73
              },
              "start": {
                "col": 5,
                "line": 6,
                "offset": 65
              }
            },
            {
              "end": {
                "col": 15,
                "line": 8,
                "offset": 99
              },
              "start": {
                "col": 5,
                "line": 8,
                "offset": 89
              }
            },
            {
              "end": {
                "col": 8,
                "line": 11,
                "offset": 126
              },
              "start": {
                "col": 2,
                "line": 10,
                "offset": 112
              }
            },
            {
              "end": {
                "col": 8,
                "line": 14,
                "offset": 164
              },
              "start": {
                "col": 2,
                "line": 13,
                "offset": 139
              }
            }
          ],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.vue",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.vue",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.vue",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.vue",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.vue",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.vue",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.vue",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.vue",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.vue",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.vue",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.vue",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.vue",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.vue",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.vue",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.vue",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.vue",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.vue",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.vue",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.vue",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.vue",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.vue",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.vue",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.vue",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "xml": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.xml",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.xml",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.xml",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.xml",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.xml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.xml",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.xml",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.xml",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.xml",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.xml",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.xml",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.xml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.xml",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.xml",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.xml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.xml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.xml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.xml",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.xml",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.xml",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.xml",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.xml",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.xml",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.xml",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.xml",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.xml",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  },
  "yaml": {
    "Deep (Recursive) Matching": {
      "Deep Expression Operator": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_expr_operator.yaml",
          "highlights": [],
          "pattern": "foo(<... 42 ...>);\n",
          "pattern_path": "POLYGLOT/deep_expr_operator.sgrep"
        }
      ],
      "Expression and Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/deep_exprstmt.yaml",
          "highlights": [],
          "pattern": "foo();\nbar();\n",
          "pattern_path": "POLYGLOT/deep_exprstmt.sgrep"
        }
      ]
    },
    "Exact Matches": {
      "Single Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/concrete_syntax.yaml",
          "highlights": [],
          "pattern": "foo(1, 2)",
          "pattern_path": "POLYGLOT/concrete_syntax.sgrep"
        }
      ]
    },
    "Helpful Features": {
      "Constant Propagation": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_constant_propagation.yaml",
          "highlights": [],
          "pattern": "$F(\"password\")",
          "pattern_path": "POLYGLOT/equivalence_constant_propagation.sgrep"
        }
      ],
      "Import Renaming/Aliasing": [
        {
          "code": null,
          "code_path": "POLYGLOT/equivalence_naming_import.yaml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/equivalence_naming_import.sgrep"
        }
      ]
    },
    "Named Placeholders ($X)": {
      "Annotations": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_anno.yaml",
          "highlights": [],
          "pattern": "@$X\nclass $CLASS {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_anno.sgrep"
        }
      ],
      "Argument": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_arg.yaml",
          "highlights": [],
          "pattern": "foo($X, 2)",
          "pattern_path": "POLYGLOT/metavar_arg.sgrep"
        }
      ],
      "Class Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_class_def.yaml",
          "highlights": [],
          "pattern": "class $X {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_class_def.sgrep"
        }
      ],
      "Conditionals": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_cond.yaml",
          "highlights": [],
          "pattern": "if ($E)\n   foo();\n",
          "pattern_path": "POLYGLOT/metavar_cond.sgrep"
        }
      ],
      "Function Call": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_call.yaml",
          "highlights": [],
          "pattern": "$F(1,2)",
          "pattern_path": "POLYGLOT/metavar_call.sgrep"
        }
      ],
      "Function Definitions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_func_def.yaml",
          "highlights": [],
          "pattern": "function $X(...) {\n    ...\n}\n",
          "pattern_path": "POLYGLOT/metavar_func_def.sgrep"
        }
      ],
      "Imports": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_import.yaml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_import.sgrep"
        }
      ],
      "Object or Dictionary Key Value Pairs": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_key_value.yaml",
          "highlights": [],
          "pattern": "{..., $KEY: $VALUE, ...}\n",
          "pattern_path": "POLYGLOT/metavar_key_value.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_stmt.yaml",
          "highlights": [],
          "pattern": "if ($X > $Y)\n   $S;\n",
          "pattern_path": "POLYGLOT/metavar_stmt.sgrep"
        }
      ],
      "Typed Metavariable Field Access": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed_fieldaccess.yaml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed_fieldaccess.sgrep"
        }
      ],
      "Typed Metavariables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_typed.yaml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/metavar_typed.sgrep"
        }
      ]
    },
    "Regular Expressions '=~/regexp/'": {
      "Field Names": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_fieldname.yaml",
          "highlights": [],
          "pattern": null,
          "pattern_path": "POLYGLOT/regexp_fieldname.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/regexp_string.yaml",
          "highlights": [],
          "pattern": "$X = \"=~//[lL]ocation.*/\" \n\n",
          "pattern_path": "POLYGLOT/regexp_string.sgrep"
        }
      ]
    },
    "Reoccurring Expressions": {
      "Expressions": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_expr.yaml",
          "highlights": [],
          "pattern": "$X == $X",
          "pattern_path": "POLYGLOT/metavar_equality_expr.sgrep"
        }
      ],
      "Statement": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_stmt.yaml",
          "highlights": [],
          "pattern": "if ($E)\n  $S;\nelse\n  $S;\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_stmt.sgrep"
        }
      ],
      "Variables": [
        {
          "code": null,
          "code_path": "POLYGLOT/metavar_equality_var.yaml",
          "highlights": [],
          "pattern": "$V = open();\nclose($V);\n\n",
          "pattern_path": "POLYGLOT/metavar_equality_var.sgrep"
        }
      ]
    },
    "Wildcard Matches (...)": {
      "Arguments": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_args.yaml",
          "highlights": [],
          "pattern": "foo(..., 5)",
          "pattern_path": "POLYGLOT/dots_args.sgrep"
        }
      ],
      "Method Chaining": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_method_chaining.yaml",
          "highlights": [],
          "pattern": "$X = $O.foo(). ... .bar(). ...\n",
          "pattern_path": "POLYGLOT/dots_method_chaining.sgrep"
        }
      ],
      "Nested Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_nested_stmts.yaml",
          "highlights": [],
          "pattern": "if (...)\n  ...\n\n",
          "pattern_path": "POLYGLOT/dots_nested_stmts.sgrep"
        }
      ],
      "Statements": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_stmts.yaml",
          "highlights": [],
          "pattern": "$V = get();\n...\neval($V);\n\n",
          "pattern_path": "POLYGLOT/dots_stmts.sgrep"
        }
      ],
      "Strings": [
        {
          "code": null,
          "code_path": "POLYGLOT/dots_string.yaml",
          "highlights": [],
          "pattern": "foo(\"...\")",
          "pattern_path": "POLYGLOT/dots_string.sgrep"
        }
      ]
    }
  }
}
