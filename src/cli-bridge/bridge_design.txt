bridge_design.txt
Design document for semgrep_bridge_python Python module.


Summary
-------

The 'semgrep_bridge_python' module acts as a bridge from the Semgrep
command line interface (CLI), which is implemented in Python, to the
Semgrep analysis core, which is written in OCaml.  It allows the
analysis to be run from within the calling Python process, as a Python
module.  Furthermore, it lets the CLI and analysis communicate entirely
in memory rather than using any files on disk.


Background
----------

Some users of Semgrep want to be able to run it within the Snowflake
hosted database system.  Snowflake allows users to extend the system by
creating user-defined functions (UDFs) in several languages, including
Python, but UDFs have restricted access permissions, both for security
reasons and to avoid dependence on execution hardware.  It is our
current understanding that the primary restriction is the inability
to access any file system.

Separately, there are potential performance advantages to running the
Semgrep analysis without launching another process.

That said, the ability to run the analysis as a separate process should
not be removed, since it is useful for development and debugging.
Consequently, the bridge is an optional component, integrated in a way
that is minimally intrusive on both sides.


Bridge design
-------------

See diagram: bridge_design.ded.png.  (Editable with
https://github.com/smcpeak/ded)

The bridge consists of two shared libraries:

  * semgrep_bridge_python.so: Thin layer with Python bindings,
    implemented in bridge_py.c.

  * semgrep_bridge_core.so: OCaml bindings (bridge_ml.c) and the
    analysis core (in OCaml).

To provide analysis inputs, the bridge initially forwards the list of
command line arguments.  Some of these arguments are the names of input
files that would normally be read from disk.  So, the bridge also
provides the analysis a callback to get the contents of a named file.
In stand-alone executable operation, that callback reads from disk as
usual (using OCaml file I/O).  In bridge module operation, it relays the
request back to the Python code, which serves requests using Python file
I/O.

When the analysis finishes, it returns control to the bridge, which in
turn returns control to the CLI.  If the analysis terminates with an
uncaught exception, that is converted to a string and delivered to the
CLI in that form.


Finding shared libraries
------------------------

The .so files are installed in the same directory as the semgrep-core
stand-alone executable.

First, semgrep_core.py locates semgrep_bridge_python.so by using
essentially the same procedure as when looking for semgrep-core.  When
it finds it, it temporarily prepends the containing directory to Python
'sys.path' to ensure that 'import' will look in the directory where the
.so was found.

Next, semgrep_bridge_python.so must find semgrep_bridge_core.so.  To do
that, it uses 'dladdr' to get the directory the former was loaded from,
appends "semgrep_bridge_core.so", and uses 'dlopen' to load the latter.
('dladdr' is not part of POSIX, but is available on Linux and Mac.)

On Linux, one can use implicit shared library loading and specify
'-Wl,-rpath,$ORIGIN' to gcc when building semgrep_bridge_python.so to
load the _core.so file from the same directory.  But the macos loader
does not have the $ORIGIN feature, and in fact has weirdly different
library search semantics altogether, so for maximum portability and
control we use explicit dlopen.

The dlhelp.{c,h} module wraps 'dlopen' and implements the
requester-relative loading logic.  It is intended to be adaptable to
support Windows as well, although this hasn't been attempted yet.


Analysis runs in a forked child
-------------------------------

Prior to invoking the bridge module, core_runner.py forks a child
process in which to invoke the bridge.  (Note: This is fork without
exec; the child is a copy of the parent, but running a different Python
function.)

This fork is necessary because of how semgrep-core achieves parallelism,
namely via the Parmap module.  Parmap also uses fork to create the
workers.  Each worker analyzes its assigned targets, then writes its
results to a temporary file and terminates.  The parent reads these
files and combines them to obtain the final result.

The problem arises due to the fact that the workers notify the Python
CLI as they complete analysis of targets (and also when they discover
new, "extracted" targets).  Some process must be able to respond to
these notifications and update the progress bar.  The OCaml parent
process is blocked on a call to 'waitpid' until all children finish, so
it can't help.  The workers could call back into Python (as they already
do to read their inputs), but they have no way to coordinate among
themselves, so we'd end up with N progress bars, all stomping on each
other's output and each only going 1/N of the way across.

This brings us to the preliminary fork, which creates a parent Python
process that can monitor the (collective) stdout/err of the workers for
progress notifications, exactly the same as it does in the case where
semgrep-core is started via fork+exec.

It is unknown whether Snowflake UDFs are allowed to invoke fork.  If
they are not, then in that situation we can disable the fork by
replacing it with an ordinary function call, disable Parmap's fork
(which -j1 accomplishes), disable the progress outputs (which are not
needed in the UDF context), and send outputs back via a new callback
(which was actually the original design before I discovered the Parmap
problem).


Progress bar race condition
---------------------------

There is a race condition bug with the above scheme, whether or not the
bridge module is in use.  The progress protocol entails workers writing
messages of the form ".\n" or "$n\n" (where $n is an ASCII decimal
non-negative integer) to stdout.  When the parent reads from the file
descriptor corresponding to worker stdout, it is reading an
uncoordinated mixture of outputs from different workers, allowing their
message bytes to interleave one another.

For example, suppose two workers both write ".\n" at the same time.  It
would be possible for the parent to see either ".\n.\n" or "..\n\n".
The latter possibility will cause the progress notification code to
think it is seeing the final analysis output and will choke when it
tries to parse it as JSON.

In practice, assuming the usual implementation of the 'write' system
call, losing this race is very unlikely because the short length of the
progress messages means it would take a large number of them getting
queued in the OS pipe buffer to hit that buffer limit (typically 8kiB),
which is in turn what would be required for one of the write calls to
not write all of its data atomically.  Even then, since the usual
messages are all two bytes long and the pipe buffer's length is even,
splitting a message would need a "$n\n" messge where n >= 10 to be among
those enqueued.

There are several ways to solve this, but doing so is outside the scope
of the bridge module project, so I merely note this problem.


OCaml file reading
------------------

The OCaml entry point, 'Semgrep_bridge_core.semgrep_cli_lib_main', is
provided with a callback it can use to read files served by the Python
CLI.  The original plan was to then modify the places the OCaml code
parses inputs to use this callback instead of directly reading files
from disk.  After packaging as an OCaml closure ('bridge_read_file'),
the callback would be put in Runner_config, since that is passed down
pretty far into the guts of semgrep-core.

However, that effort proved more difficult than anticipated.  For
example, just to parse the rules file:

- Run_semgrep.semgrep_with_raw_results_and_exn_handler gets a config,
  and passes rules_file to

- Parse_rule.parse_and_filter_invalid_rules (which does not get a
  config), which passes it to

- Parse_rule.parse_bis, which passes it to

- Parse_json.parse_program (in pfff), which passes it to

- Parse_js.tokens, which gets down into the Lexing infrastructure, etc.

Therefore, for now, the OCaml code does nothing at all with the
callback.  Future options include:

1. Have the Python CLI copy all files into /tmp and let semgrep-core
   read them from there.  Something will need to be done about the
   altered file names in the reported findings.

2. Modify the OCaml interfaces between where a config is available and
   where the file is read, providing the option to pass down the file
   name *and* contents rather than the name alone.

3. Hook into the OCaml run-time library at Stdlib.open_in_bin in order
   to intercept file read attempts and redirect them to in-memory
   contents.  I've explored this enough to conclude it is probably
   feasible.


Python CLI file serving
-----------------------

When the bridge is active, the OCaml side has the option to request file
contents from the Python side, as outlined above.  These requests go to
'_hande_file_read' in the 'StreamingSemgrepCore' class in
'core_runner.py'.  That class has been expanded with the 'vfs_map'
member to serve certain files from memory, falling back to ordinary disk
reads when the file is not found in memory.

Currently, the Python code ('_run_rules_direct_to_semgrep_core', also in
'core_runner.py') only populates 'vfs_map' with two entries: the targets
file and the rules file.  For now, I have chosen to not add more than
this in order to limit the scope of my work, as it adequately
demonstrates the procedure, and the OCaml code is ignoring it right now
anyway.


Enablement
----------

There is one new environment variable that the semgrep CLI is sensitive
to that affects the bridge operation, SEMGREP_USE_BRIDGE.  The following
values are recognized:

* unset or Python falsy: Do not use the bridge.  Hence, it is not used
  by default.

* truthy: Try to load and use the bridge module, but if that fails, fall
  back on invoking the executable after logging the failure reason.

* "require": Load the bridge, and if that fails, fail the entire
  invocation.

Currently, the fallback code will log what happens at "debug" level
(which goes to the log file but not stderr), except if it finds
semgrep_bridge_python.so but fails to load it, that is logged at "warn"
level (going to both the log file and stderr).


Testing
-------

As this work is preliminary to building a Snowflake UDF, there is not
meant to be any user-visible consequence of using the bridge module.
However, its existence can be confirmed in the log file, as the command
after "Running semgrep-core with command" will mention
semgrep_bridge_python.so instead of semgrep-core.

The main method of testing is to simply run the main test suite ("make
test", etc.) with the bridge active (SEMGREP_USE_BRIDGE=require).

To test the fallback behavior, temporarily move the bridge .so files
elsewhere.  Note that they can potentially be found in both
cli/src/semgrep/bin and ~/.opam/4.14.0/bin (the log indicates which gets
loaded, if any).


Portability
-----------

As currently implemented, semgrep_bridge_*.so acquires a dependency on
the libc shared library used to build it.  In particular, when compiled
on Alpine Linux by the continuous integration script job "build-core" in
.github/workflows/tests.yml, semgrep_bridge_python.so depends on
libc.musl-x86_64.so.1.  When subsequently tested on Ubuntu by the
"test-cli" job, the library does not load since that dependency is not
found.


Impact on debugging semgrep-core
--------------------------------

The --dump-command-for-core switch prints a command line that begins
with "semgrep-core", even when it is really using the bridge, for ease
of copy+pasting onto a shell command line.  The real command line, which
begins with "semgrep_bridge_python.so", is logged.


Impact on performance
---------------------

In cli, I ran the longest test that runs as part of "make test" in cli.

Time with bridge:

  cli$ time pytest tests/qa/test_semgrep_rules_repo.py::test_semgrep_rules_repo__test
  [...]
  real    2m35.357s
  user    3m23.532s
  sys     0m51.984s

Time without bridge:

  cli$ time env SEMGREP_DISABLE_BRIDGE=1 pytest tests/qa/test_semgrep_rules_repo.py::test_semgrep_rules_repo__test
  [...]
  real    2m36.528s
  user    3m21.009s
  sys     0m57.905s

I verified that the bridge was active in the first case and inactive in
the second by looking at the command line in the log file.

There is no significant performance impact.


Required documentation updates
------------------------------

https://semgrep.dev/docs/contributing/semgrep-core-contributing/

Entry point section: cli/Main.ml is still the entry point for the
executable, but cli-bridge/Semgrep_bridge_core.ml contains the entry
point for the shared library, and cli-lib/Cli_lib.ml now contains the
command line parsing code.


File descriptions
-----------------

This section describes the role of the files related to the bridge
module's implementation.  When it says "Added" or "Modified", that is
relatve to the version of semgrep that did not have the bridge.  This
allows one to understand the entire feature as a delta on top of a
version without it.  It also allows this section to double as a
description of the commit in which this feature was introduced.

In semgrep-core:

  Modified Makefile: dev: Symlink semgrep_bridge_python.so and
  semgrep_bridge_core.so like semgrep-core.

In semgrep-core/src/cli:

  Modified dune: Defines executable Main.exe (as before).

  Modified Main.ml: Mostly empty file that calls into cli_lib.

In semgrep-core/src/cli-lib:

  Added dune: Defines library 'cli_lib', which is shared between the
  stand-alone executable and the semgrep_bridge_core.so shared library.

  Added Cli_lib.ml: This contains all of what was in cli/Main.ml except the
  top-level code to start running it.  It exports 'cli_lib_main' as the
  function to begin analysis.

  Moved version.ml: Moved from cli to cli-lib so it can be shared.

Added semgrep-core/src/cli-bridge:

  dune: Defines executables semgrep_bridge_python.so and
  semgrep_bridge_core.so.

  Semgrep_bridge_core.ml: Defines the entry point to OCaml code for use
  by bridge_ml.

  bridge_py.c: Python-interfacing bridge half.  Contains the entry point
  for invocation as a shared library that implements a Python module,
  'semgrep_bridge_python'.

  bridge_ml.{c,h}: OCaml-interfacing bridge half.  Contains the entry
  points for semgrep_bridge_core.so.

  dlhelp.{c,h}: Small wrapper on dlopen() and friends that makes it
  easier to load a library from a location relative to the program or
  library doing the loading, and also does (crude) error handling.

  bridge_design.txt: This file.

  bridge_design.ded{,.png}: Module interaction diagram, editable with
  https://github.com/smcpeak/ded.

In semgrep-core/src/utils:

  Modified dune: Include fnptr_impl.c in the library.

  Added Fnptr.ml: Invoke a C function pointer.

  Added fnptr_impl.{c,h}: C implementation of Fnptr module.  This lets C
  code dynamically create objects consisting of a 'void *extra' pointer
  and a function pointer that can be called, approximating closures.

Added semgrep-core/tests/cli-bridge:

  dune: Build and run the tests.

  bridge_test.c: Wrapper to invoke semgrep_bridge_core.so from C rather
  than Python.

In semgrep-core/tests/utils:

  Added dune: Build and run the tests.

  Added Fnptr_test_ml.ml: Test Fnptr module, ML side.

  Added fnptr_test_c.c: Test Fnptr module, C side.

In cli/src/semgrep:

  Modified core_runner.py: Add ability to run semgrep via the bridge,
  handling its file read requests.

  Modified dump_ast.py: Force the use of the executable rather than the
  bridge in this case.

  Modified semgrep_core.py: Decide whether to use the executable or
  shared library.  Return the path to semgrep_bridge_python.so.

  Added fork_subprocess.py: Fork a subprocess where the child runs a
  Python function and the parent has streams for child stdout/err.

In cli/tests/unit:

  Added test_fork_subprocess.py: Test fork_subprocess.py.

In cli/tests/e2e

  Modified test_ci.py: Mask the difference between the executable and
  the bridge in the logged command line, and drop the log lines that
  show the bridge being loaded.

In cli/tests/e2e/snapshots/test_ci/test_github_ci_bad_base_sha:

  Modified results.txt: Expect the executable or bridge name to be
  masked.

In cli/stubs:

  Added semgrep_bridge_python.pyi: Python mypy interface.

    Is that the right place for it?

In scripts/release:

  Modified bump: Adapt to having moved version.ml from cli to cli-lib.



EOF
