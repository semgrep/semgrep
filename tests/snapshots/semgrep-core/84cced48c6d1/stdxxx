[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): setup_logging: highlight_setting=Std_msg.On, highlight=true
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for networking.http
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for semgrep.targeting
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for ojsonnet.eval
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for cohttp.lwt.client
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for cohttp.lwt.io
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for conduit_lwt_server
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for ca-certs
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for mirage-crypto-rng-lwt
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for mirage-crypto-rng.unix
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for handshake
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for tls.config
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for tls.tracing
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for x509
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for git.value
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for git.tree
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for git.stream
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for git.blob
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for paths
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for commons.pcre
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Skipping logs for bos
[<MASKED TIMESTAMP>][[32mDEBUG[0m](default): Showing logs for application
--- begin input files ---
rules.yml
stupid.py
--- end input files ---
[<MASKED TIMESTAMP>][[34mINFO[0m]: Running external command: 'git' 'init' '-b' 'main'
Initialized empty Git repository in /tmp/test-296a340/.git/
[<MASKED TIMESTAMP>][[34mINFO[0m]: Running external command: 'git' 'config' 'user.name' 'Tester'
[<MASKED TIMESTAMP>][[34mINFO[0m]: Running external command: 'git' 'config' 'user.email' 'tester@example.com'
[<MASKED TIMESTAMP>][[34mINFO[0m]: Running external command: 'git' 'add' '.'
[<MASKED TIMESTAMP>][[34mINFO[0m]: Running external command: 'git' 'commit' '-m' 'Add files'
[main (root-commit) 8db7ed4] Add files
 2 files changed, 11 insertions(+)
 create mode 100644 rules.yml
 create mode 100644 stupid.py
[<MASKED TIMESTAMP>][INFO]: Semgrep version: 1.69.0

┌──── [32m○○○[39m ────┐
│ Semgrep CLI │
└─────────────┘

[<MASKED TIMESTAMP>][INFO]: Loading settings from /home/pad/.semgrep/settings.yml
[<MASKED TIMESTAMP>][INFO]: Running external command: 'git' 'ls-remote' '--get-url'
fatal: No remote configured to list refs from.
[32m✔[39m [1mSemgrep OSS[0m
  [32m✔[39m Basic security coverage for first-party code vulnerabilities.

[32m✔[39m [1mSemgrep Code (SAST)[0m
  [32m✔[39m Find and fix vulnerabilities in the code you write with advanced scanning and expert security rules.

[31m✘[39m [1mSemgrep Secrets[0m
  [31m✘[39m Detect and validate potential secrets in your code.

[<MASKED TIMESTAMP>][INFO]: Getting the rules
[1m  Loading rules from local config...[0m
[<MASKED TIMESTAMP>][INFO]: loading local config from rules.yml
[<MASKED TIMESTAMP>][INFO]: Done loading local config from rules.yml
[<MASKED TIMESTAMP>][INFO]: Computing the targets
[<MASKED TIMESTAMP>][INFO]: Running external command: 'git' '-C' '.' 'rev-parse' '--show-toplevel'
[<MASKED TIMESTAMP>][INFO]: Running external command: 'git' '-C' '/tmp/test-296a340' 'ls-files' '--cached' '/tmp/test-296a340/'
[<MASKED TIMESTAMP>][INFO]: Running external command: 'git' '-C' '/tmp/test-296a340' 'ls-files' '--others' '--exclude-standard' '/tmp/test-296a340/'
[<MASKED TIMESTAMP>][INFO]: running 1 rules from 1 config rules.yml
Rules:
- eqeq-bad

[<MASKED TIMESTAMP>][INFO]: running the semgrep engine


┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 2 files tracked by git with 1 Code rule:
  Scanning 2 files.
[<MASKED TIMESTAMP>][INFO]: reporting matches if any
[<MASKED TIMESTAMP>][INFO]: Loading settings from /home/pad/.semgrep/settings.yml


┌────────────────┐
│ 1 Code Finding │
└────────────────┘

    stupid.py
   ❯❯❱ eqeq-bad
          useless comparison

            3┆ return a + b == a + b

[<MASKED TIMESTAMP>][INFO]: 
========================================
Files skipped:
========================================

  Always skipped by Semgrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  (See: https://semgrep.dev/docs/ignoring-files-folders-code/#understanding-semgrep-defaults)

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • <none>

  Partially analyzed due to parsing or internal Semgrep errors

   • <none>




┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

Ran 1 rule on 1 file: 1 finding.
ASSERT exit code
